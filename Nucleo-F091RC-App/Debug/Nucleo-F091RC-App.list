
Nucleo-F091RC-App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e2c  080080bc  080080bc  000080bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800aee8  0800aee8  0000aee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afa4  0800afa4  00010130  2**0
                  CONTENTS
  4 .ARM          00000000  0800afa4  0800afa4  00010130  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800afa4  0800afa4  00010130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afa4  0800afa4  0000afa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afa8  0800afa8  0000afa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  200000c0  0800afac  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000130  0800b01c  00010130  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  0800b01c  00010274  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010130  2**0
                  CONTENTS, READONLY
 12 .RAMVectorTable 000000c0  20000000  20000000  00020000  2**2
                  ALLOC
 13 .debug_info   0000a23c  00000000  00000000  00010158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001886  00000000  00000000  0001a394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e8  00000000  00000000  0001bc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000650  00000000  00000000  0001c308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b68a  00000000  00000000  0001c958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009131  00000000  00000000  00037fe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1cb5  00000000  00000000  00041113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000e2dc8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001da8  00000000  00000000  000e2e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080080bc <__do_global_dtors_aux>:
 80080bc:	b510      	push	{r4, lr}
 80080be:	4c06      	ldr	r4, [pc, #24]	; (80080d8 <__do_global_dtors_aux+0x1c>)
 80080c0:	7823      	ldrb	r3, [r4, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d107      	bne.n	80080d6 <__do_global_dtors_aux+0x1a>
 80080c6:	4b05      	ldr	r3, [pc, #20]	; (80080dc <__do_global_dtors_aux+0x20>)
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d002      	beq.n	80080d2 <__do_global_dtors_aux+0x16>
 80080cc:	4804      	ldr	r0, [pc, #16]	; (80080e0 <__do_global_dtors_aux+0x24>)
 80080ce:	e000      	b.n	80080d2 <__do_global_dtors_aux+0x16>
 80080d0:	bf00      	nop
 80080d2:	2301      	movs	r3, #1
 80080d4:	7023      	strb	r3, [r4, #0]
 80080d6:	bd10      	pop	{r4, pc}
 80080d8:	20000130 	.word	0x20000130
 80080dc:	00000000 	.word	0x00000000
 80080e0:	0800aed0 	.word	0x0800aed0

080080e4 <frame_dummy>:
 80080e4:	4b04      	ldr	r3, [pc, #16]	; (80080f8 <frame_dummy+0x14>)
 80080e6:	b510      	push	{r4, lr}
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d003      	beq.n	80080f4 <frame_dummy+0x10>
 80080ec:	4903      	ldr	r1, [pc, #12]	; (80080fc <frame_dummy+0x18>)
 80080ee:	4804      	ldr	r0, [pc, #16]	; (8008100 <frame_dummy+0x1c>)
 80080f0:	e000      	b.n	80080f4 <frame_dummy+0x10>
 80080f2:	bf00      	nop
 80080f4:	bd10      	pop	{r4, pc}
 80080f6:	46c0      	nop			; (mov r8, r8)
 80080f8:	00000000 	.word	0x00000000
 80080fc:	20000134 	.word	0x20000134
 8008100:	0800aed0 	.word	0x0800aed0

08008104 <__udivsi3>:
 8008104:	2200      	movs	r2, #0
 8008106:	0843      	lsrs	r3, r0, #1
 8008108:	428b      	cmp	r3, r1
 800810a:	d374      	bcc.n	80081f6 <__udivsi3+0xf2>
 800810c:	0903      	lsrs	r3, r0, #4
 800810e:	428b      	cmp	r3, r1
 8008110:	d35f      	bcc.n	80081d2 <__udivsi3+0xce>
 8008112:	0a03      	lsrs	r3, r0, #8
 8008114:	428b      	cmp	r3, r1
 8008116:	d344      	bcc.n	80081a2 <__udivsi3+0x9e>
 8008118:	0b03      	lsrs	r3, r0, #12
 800811a:	428b      	cmp	r3, r1
 800811c:	d328      	bcc.n	8008170 <__udivsi3+0x6c>
 800811e:	0c03      	lsrs	r3, r0, #16
 8008120:	428b      	cmp	r3, r1
 8008122:	d30d      	bcc.n	8008140 <__udivsi3+0x3c>
 8008124:	22ff      	movs	r2, #255	; 0xff
 8008126:	0209      	lsls	r1, r1, #8
 8008128:	ba12      	rev	r2, r2
 800812a:	0c03      	lsrs	r3, r0, #16
 800812c:	428b      	cmp	r3, r1
 800812e:	d302      	bcc.n	8008136 <__udivsi3+0x32>
 8008130:	1212      	asrs	r2, r2, #8
 8008132:	0209      	lsls	r1, r1, #8
 8008134:	d065      	beq.n	8008202 <__udivsi3+0xfe>
 8008136:	0b03      	lsrs	r3, r0, #12
 8008138:	428b      	cmp	r3, r1
 800813a:	d319      	bcc.n	8008170 <__udivsi3+0x6c>
 800813c:	e000      	b.n	8008140 <__udivsi3+0x3c>
 800813e:	0a09      	lsrs	r1, r1, #8
 8008140:	0bc3      	lsrs	r3, r0, #15
 8008142:	428b      	cmp	r3, r1
 8008144:	d301      	bcc.n	800814a <__udivsi3+0x46>
 8008146:	03cb      	lsls	r3, r1, #15
 8008148:	1ac0      	subs	r0, r0, r3
 800814a:	4152      	adcs	r2, r2
 800814c:	0b83      	lsrs	r3, r0, #14
 800814e:	428b      	cmp	r3, r1
 8008150:	d301      	bcc.n	8008156 <__udivsi3+0x52>
 8008152:	038b      	lsls	r3, r1, #14
 8008154:	1ac0      	subs	r0, r0, r3
 8008156:	4152      	adcs	r2, r2
 8008158:	0b43      	lsrs	r3, r0, #13
 800815a:	428b      	cmp	r3, r1
 800815c:	d301      	bcc.n	8008162 <__udivsi3+0x5e>
 800815e:	034b      	lsls	r3, r1, #13
 8008160:	1ac0      	subs	r0, r0, r3
 8008162:	4152      	adcs	r2, r2
 8008164:	0b03      	lsrs	r3, r0, #12
 8008166:	428b      	cmp	r3, r1
 8008168:	d301      	bcc.n	800816e <__udivsi3+0x6a>
 800816a:	030b      	lsls	r3, r1, #12
 800816c:	1ac0      	subs	r0, r0, r3
 800816e:	4152      	adcs	r2, r2
 8008170:	0ac3      	lsrs	r3, r0, #11
 8008172:	428b      	cmp	r3, r1
 8008174:	d301      	bcc.n	800817a <__udivsi3+0x76>
 8008176:	02cb      	lsls	r3, r1, #11
 8008178:	1ac0      	subs	r0, r0, r3
 800817a:	4152      	adcs	r2, r2
 800817c:	0a83      	lsrs	r3, r0, #10
 800817e:	428b      	cmp	r3, r1
 8008180:	d301      	bcc.n	8008186 <__udivsi3+0x82>
 8008182:	028b      	lsls	r3, r1, #10
 8008184:	1ac0      	subs	r0, r0, r3
 8008186:	4152      	adcs	r2, r2
 8008188:	0a43      	lsrs	r3, r0, #9
 800818a:	428b      	cmp	r3, r1
 800818c:	d301      	bcc.n	8008192 <__udivsi3+0x8e>
 800818e:	024b      	lsls	r3, r1, #9
 8008190:	1ac0      	subs	r0, r0, r3
 8008192:	4152      	adcs	r2, r2
 8008194:	0a03      	lsrs	r3, r0, #8
 8008196:	428b      	cmp	r3, r1
 8008198:	d301      	bcc.n	800819e <__udivsi3+0x9a>
 800819a:	020b      	lsls	r3, r1, #8
 800819c:	1ac0      	subs	r0, r0, r3
 800819e:	4152      	adcs	r2, r2
 80081a0:	d2cd      	bcs.n	800813e <__udivsi3+0x3a>
 80081a2:	09c3      	lsrs	r3, r0, #7
 80081a4:	428b      	cmp	r3, r1
 80081a6:	d301      	bcc.n	80081ac <__udivsi3+0xa8>
 80081a8:	01cb      	lsls	r3, r1, #7
 80081aa:	1ac0      	subs	r0, r0, r3
 80081ac:	4152      	adcs	r2, r2
 80081ae:	0983      	lsrs	r3, r0, #6
 80081b0:	428b      	cmp	r3, r1
 80081b2:	d301      	bcc.n	80081b8 <__udivsi3+0xb4>
 80081b4:	018b      	lsls	r3, r1, #6
 80081b6:	1ac0      	subs	r0, r0, r3
 80081b8:	4152      	adcs	r2, r2
 80081ba:	0943      	lsrs	r3, r0, #5
 80081bc:	428b      	cmp	r3, r1
 80081be:	d301      	bcc.n	80081c4 <__udivsi3+0xc0>
 80081c0:	014b      	lsls	r3, r1, #5
 80081c2:	1ac0      	subs	r0, r0, r3
 80081c4:	4152      	adcs	r2, r2
 80081c6:	0903      	lsrs	r3, r0, #4
 80081c8:	428b      	cmp	r3, r1
 80081ca:	d301      	bcc.n	80081d0 <__udivsi3+0xcc>
 80081cc:	010b      	lsls	r3, r1, #4
 80081ce:	1ac0      	subs	r0, r0, r3
 80081d0:	4152      	adcs	r2, r2
 80081d2:	08c3      	lsrs	r3, r0, #3
 80081d4:	428b      	cmp	r3, r1
 80081d6:	d301      	bcc.n	80081dc <__udivsi3+0xd8>
 80081d8:	00cb      	lsls	r3, r1, #3
 80081da:	1ac0      	subs	r0, r0, r3
 80081dc:	4152      	adcs	r2, r2
 80081de:	0883      	lsrs	r3, r0, #2
 80081e0:	428b      	cmp	r3, r1
 80081e2:	d301      	bcc.n	80081e8 <__udivsi3+0xe4>
 80081e4:	008b      	lsls	r3, r1, #2
 80081e6:	1ac0      	subs	r0, r0, r3
 80081e8:	4152      	adcs	r2, r2
 80081ea:	0843      	lsrs	r3, r0, #1
 80081ec:	428b      	cmp	r3, r1
 80081ee:	d301      	bcc.n	80081f4 <__udivsi3+0xf0>
 80081f0:	004b      	lsls	r3, r1, #1
 80081f2:	1ac0      	subs	r0, r0, r3
 80081f4:	4152      	adcs	r2, r2
 80081f6:	1a41      	subs	r1, r0, r1
 80081f8:	d200      	bcs.n	80081fc <__udivsi3+0xf8>
 80081fa:	4601      	mov	r1, r0
 80081fc:	4152      	adcs	r2, r2
 80081fe:	4610      	mov	r0, r2
 8008200:	4770      	bx	lr
 8008202:	e7ff      	b.n	8008204 <__udivsi3+0x100>
 8008204:	b501      	push	{r0, lr}
 8008206:	2000      	movs	r0, #0
 8008208:	f000 f806 	bl	8008218 <__aeabi_idiv0>
 800820c:	bd02      	pop	{r1, pc}
 800820e:	46c0      	nop			; (mov r8, r8)

08008210 <__aeabi_uidivmod>:
 8008210:	2900      	cmp	r1, #0
 8008212:	d0f7      	beq.n	8008204 <__udivsi3+0x100>
 8008214:	e776      	b.n	8008104 <__udivsi3>
 8008216:	4770      	bx	lr

08008218 <__aeabi_idiv0>:
 8008218:	4770      	bx	lr
 800821a:	46c0      	nop			; (mov r8, r8)

0800821c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
	uint32_t i=0;
 8008222:	2300      	movs	r3, #0
 8008224:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN 1 */
	  for(i = 0; i < 48; i++)
 8008226:	2300      	movs	r3, #0
 8008228:	607b      	str	r3, [r7, #4]
 800822a:	e00c      	b.n	8008246 <main+0x2a>
	  {
	    VectorTable[i] = *(__IO uint32_t*)(APPLICATION_ADDRESS + (i<<2));
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	4a1e      	ldr	r2, [pc, #120]	; (80082ac <main+0x90>)
 8008232:	4694      	mov	ip, r2
 8008234:	4463      	add	r3, ip
 8008236:	6819      	ldr	r1, [r3, #0]
 8008238:	4b1d      	ldr	r3, [pc, #116]	; (80082b0 <main+0x94>)
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	0092      	lsls	r2, r2, #2
 800823e:	50d1      	str	r1, [r2, r3]
	  for(i = 0; i < 48; i++)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	3301      	adds	r3, #1
 8008244:	607b      	str	r3, [r7, #4]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2b2f      	cmp	r3, #47	; 0x2f
 800824a:	d9ef      	bls.n	800822c <main+0x10>
	  }
	  /* Enable the SYSCFG peripheral clock*/
	  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800824c:	4b19      	ldr	r3, [pc, #100]	; (80082b4 <main+0x98>)
 800824e:	699a      	ldr	r2, [r3, #24]
 8008250:	4b18      	ldr	r3, [pc, #96]	; (80082b4 <main+0x98>)
 8008252:	2101      	movs	r1, #1
 8008254:	430a      	orrs	r2, r1
 8008256:	619a      	str	r2, [r3, #24]
 8008258:	4b16      	ldr	r3, [pc, #88]	; (80082b4 <main+0x98>)
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	2201      	movs	r2, #1
 800825e:	4013      	ands	r3, r2
 8008260:	603b      	str	r3, [r7, #0]
 8008262:	683b      	ldr	r3, [r7, #0]
	  /* Remap SRAM at 0x00000000 */
	  __HAL_SYSCFG_REMAPMEMORY_SRAM();
 8008264:	4b14      	ldr	r3, [pc, #80]	; (80082b8 <main+0x9c>)
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	4b13      	ldr	r3, [pc, #76]	; (80082b8 <main+0x9c>)
 800826a:	2103      	movs	r1, #3
 800826c:	438a      	bics	r2, r1
 800826e:	601a      	str	r2, [r3, #0]
 8008270:	4b11      	ldr	r3, [pc, #68]	; (80082b8 <main+0x9c>)
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	4b10      	ldr	r3, [pc, #64]	; (80082b8 <main+0x9c>)
 8008276:	2103      	movs	r1, #3
 8008278:	430a      	orrs	r2, r1
 800827a:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800827c:	f000 fb04 	bl	8008888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008280:	f000 f840 	bl	8008304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008284:	f000 f906 	bl	8008494 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8008288:	f000 f8a4 	bl	80083d4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800828c:	f000 f8d2 	bl	8008434 <MX_USART3_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("APP running...\r\n");
 8008290:	4b0a      	ldr	r3, [pc, #40]	; (80082bc <main+0xa0>)
 8008292:	0018      	movs	r0, r3
 8008294:	f002 f97e 	bl	800a594 <puts>
	  HAL_Delay(2000);
 8008298:	23fa      	movs	r3, #250	; 0xfa
 800829a:	00db      	lsls	r3, r3, #3
 800829c:	0018      	movs	r0, r3
 800829e:	f000 fb57 	bl	8008950 <HAL_Delay>
	  printf("after delay...\r\n");
 80082a2:	4b07      	ldr	r3, [pc, #28]	; (80082c0 <main+0xa4>)
 80082a4:	0018      	movs	r0, r3
 80082a6:	f002 f975 	bl	800a594 <puts>
	  printf("APP running...\r\n");
 80082aa:	e7f1      	b.n	8008290 <main+0x74>
 80082ac:	08008000 	.word	0x08008000
 80082b0:	20000000 	.word	0x20000000
 80082b4:	40021000 	.word	0x40021000
 80082b8:	40010000 	.word	0x40010000
 80082bc:	0800aee8 	.word	0x0800aee8
 80082c0:	0800aef8 	.word	0x0800aef8

080082c4 <_write>:
  }
  /* USER CODE END 3 */
}

int _write(int file, char *ptr, int len){
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b086      	sub	sp, #24
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++){
 80082d0:	2300      	movs	r3, #0
 80082d2:	617b      	str	r3, [r7, #20]
 80082d4:	e00a      	b.n	80082ec <_write+0x28>
		HAL_UART_Transmit(&huart3, (uint8_t *)ptr++, 1, 100);
 80082d6:	68b9      	ldr	r1, [r7, #8]
 80082d8:	1c4b      	adds	r3, r1, #1
 80082da:	60bb      	str	r3, [r7, #8]
 80082dc:	4808      	ldr	r0, [pc, #32]	; (8008300 <_write+0x3c>)
 80082de:	2364      	movs	r3, #100	; 0x64
 80082e0:	2201      	movs	r2, #1
 80082e2:	f001 fc61 	bl	8009ba8 <HAL_UART_Transmit>
	for(DataIdx=0; DataIdx<len; DataIdx++){
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	3301      	adds	r3, #1
 80082ea:	617b      	str	r3, [r7, #20]
 80082ec:	697a      	ldr	r2, [r7, #20]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	dbf0      	blt.n	80082d6 <_write+0x12>
	}
	return len;
 80082f4:	687b      	ldr	r3, [r7, #4]
}
 80082f6:	0018      	movs	r0, r3
 80082f8:	46bd      	mov	sp, r7
 80082fa:	b006      	add	sp, #24
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	46c0      	nop			; (mov r8, r8)
 8008300:	20000158 	.word	0x20000158

08008304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008304:	b590      	push	{r4, r7, lr}
 8008306:	b099      	sub	sp, #100	; 0x64
 8008308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800830a:	242c      	movs	r4, #44	; 0x2c
 800830c:	193b      	adds	r3, r7, r4
 800830e:	0018      	movs	r0, r3
 8008310:	2334      	movs	r3, #52	; 0x34
 8008312:	001a      	movs	r2, r3
 8008314:	2100      	movs	r1, #0
 8008316:	f002 f8c3 	bl	800a4a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800831a:	231c      	movs	r3, #28
 800831c:	18fb      	adds	r3, r7, r3
 800831e:	0018      	movs	r0, r3
 8008320:	2310      	movs	r3, #16
 8008322:	001a      	movs	r2, r3
 8008324:	2100      	movs	r1, #0
 8008326:	f002 f8bb 	bl	800a4a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800832a:	003b      	movs	r3, r7
 800832c:	0018      	movs	r0, r3
 800832e:	231c      	movs	r3, #28
 8008330:	001a      	movs	r2, r3
 8008332:	2100      	movs	r1, #0
 8008334:	f002 f8b4 	bl	800a4a0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008338:	0021      	movs	r1, r4
 800833a:	187b      	adds	r3, r7, r1
 800833c:	2202      	movs	r2, #2
 800833e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008340:	187b      	adds	r3, r7, r1
 8008342:	2201      	movs	r2, #1
 8008344:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008346:	187b      	adds	r3, r7, r1
 8008348:	2210      	movs	r2, #16
 800834a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800834c:	187b      	adds	r3, r7, r1
 800834e:	2202      	movs	r2, #2
 8008350:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008352:	187b      	adds	r3, r7, r1
 8008354:	2280      	movs	r2, #128	; 0x80
 8008356:	0212      	lsls	r2, r2, #8
 8008358:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800835a:	187b      	adds	r3, r7, r1
 800835c:	22a0      	movs	r2, #160	; 0xa0
 800835e:	0392      	lsls	r2, r2, #14
 8008360:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8008362:	187b      	adds	r3, r7, r1
 8008364:	2201      	movs	r2, #1
 8008366:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008368:	187b      	adds	r3, r7, r1
 800836a:	0018      	movs	r0, r3
 800836c:	f000 fdc8 	bl	8008f00 <HAL_RCC_OscConfig>
 8008370:	1e03      	subs	r3, r0, #0
 8008372:	d001      	beq.n	8008378 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8008374:	f000 f900 	bl	8008578 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008378:	211c      	movs	r1, #28
 800837a:	187b      	adds	r3, r7, r1
 800837c:	2207      	movs	r2, #7
 800837e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008380:	187b      	adds	r3, r7, r1
 8008382:	2202      	movs	r2, #2
 8008384:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008386:	187b      	adds	r3, r7, r1
 8008388:	2200      	movs	r2, #0
 800838a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800838c:	187b      	adds	r3, r7, r1
 800838e:	2200      	movs	r2, #0
 8008390:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8008392:	187b      	adds	r3, r7, r1
 8008394:	2101      	movs	r1, #1
 8008396:	0018      	movs	r0, r3
 8008398:	f001 f938 	bl	800960c <HAL_RCC_ClockConfig>
 800839c:	1e03      	subs	r3, r0, #0
 800839e:	d001      	beq.n	80083a4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80083a0:	f000 f8ea 	bl	8008578 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2;
 80083a4:	003b      	movs	r3, r7
 80083a6:	4a0a      	ldr	r2, [pc, #40]	; (80083d0 <SystemClock_Config+0xcc>)
 80083a8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80083aa:	003b      	movs	r3, r7
 80083ac:	2200      	movs	r2, #0
 80083ae:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80083b0:	003b      	movs	r3, r7
 80083b2:	2200      	movs	r2, #0
 80083b4:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80083b6:	003b      	movs	r3, r7
 80083b8:	0018      	movs	r0, r3
 80083ba:	f001 faa1 	bl	8009900 <HAL_RCCEx_PeriphCLKConfig>
 80083be:	1e03      	subs	r3, r0, #0
 80083c0:	d001      	beq.n	80083c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80083c2:	f000 f8d9 	bl	8008578 <Error_Handler>
  }
}
 80083c6:	46c0      	nop			; (mov r8, r8)
 80083c8:	46bd      	mov	sp, r7
 80083ca:	b019      	add	sp, #100	; 0x64
 80083cc:	bd90      	pop	{r4, r7, pc}
 80083ce:	46c0      	nop			; (mov r8, r8)
 80083d0:	00040002 	.word	0x00040002

080083d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80083d8:	4b14      	ldr	r3, [pc, #80]	; (800842c <MX_USART2_UART_Init+0x58>)
 80083da:	4a15      	ldr	r2, [pc, #84]	; (8008430 <MX_USART2_UART_Init+0x5c>)
 80083dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80083de:	4b13      	ldr	r3, [pc, #76]	; (800842c <MX_USART2_UART_Init+0x58>)
 80083e0:	22e1      	movs	r2, #225	; 0xe1
 80083e2:	0252      	lsls	r2, r2, #9
 80083e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80083e6:	4b11      	ldr	r3, [pc, #68]	; (800842c <MX_USART2_UART_Init+0x58>)
 80083e8:	2200      	movs	r2, #0
 80083ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80083ec:	4b0f      	ldr	r3, [pc, #60]	; (800842c <MX_USART2_UART_Init+0x58>)
 80083ee:	2200      	movs	r2, #0
 80083f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80083f2:	4b0e      	ldr	r3, [pc, #56]	; (800842c <MX_USART2_UART_Init+0x58>)
 80083f4:	2200      	movs	r2, #0
 80083f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80083f8:	4b0c      	ldr	r3, [pc, #48]	; (800842c <MX_USART2_UART_Init+0x58>)
 80083fa:	220c      	movs	r2, #12
 80083fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80083fe:	4b0b      	ldr	r3, [pc, #44]	; (800842c <MX_USART2_UART_Init+0x58>)
 8008400:	2200      	movs	r2, #0
 8008402:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008404:	4b09      	ldr	r3, [pc, #36]	; (800842c <MX_USART2_UART_Init+0x58>)
 8008406:	2200      	movs	r2, #0
 8008408:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800840a:	4b08      	ldr	r3, [pc, #32]	; (800842c <MX_USART2_UART_Init+0x58>)
 800840c:	2200      	movs	r2, #0
 800840e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008410:	4b06      	ldr	r3, [pc, #24]	; (800842c <MX_USART2_UART_Init+0x58>)
 8008412:	2200      	movs	r2, #0
 8008414:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008416:	4b05      	ldr	r3, [pc, #20]	; (800842c <MX_USART2_UART_Init+0x58>)
 8008418:	0018      	movs	r0, r3
 800841a:	f001 fb71 	bl	8009b00 <HAL_UART_Init>
 800841e:	1e03      	subs	r3, r0, #0
 8008420:	d001      	beq.n	8008426 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8008422:	f000 f8a9 	bl	8008578 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008426:	46c0      	nop			; (mov r8, r8)
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	200001dc 	.word	0x200001dc
 8008430:	40004400 	.word	0x40004400

08008434 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008438:	4b14      	ldr	r3, [pc, #80]	; (800848c <MX_USART3_UART_Init+0x58>)
 800843a:	4a15      	ldr	r2, [pc, #84]	; (8008490 <MX_USART3_UART_Init+0x5c>)
 800843c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800843e:	4b13      	ldr	r3, [pc, #76]	; (800848c <MX_USART3_UART_Init+0x58>)
 8008440:	22e1      	movs	r2, #225	; 0xe1
 8008442:	0252      	lsls	r2, r2, #9
 8008444:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008446:	4b11      	ldr	r3, [pc, #68]	; (800848c <MX_USART3_UART_Init+0x58>)
 8008448:	2200      	movs	r2, #0
 800844a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800844c:	4b0f      	ldr	r3, [pc, #60]	; (800848c <MX_USART3_UART_Init+0x58>)
 800844e:	2200      	movs	r2, #0
 8008450:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008452:	4b0e      	ldr	r3, [pc, #56]	; (800848c <MX_USART3_UART_Init+0x58>)
 8008454:	2200      	movs	r2, #0
 8008456:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008458:	4b0c      	ldr	r3, [pc, #48]	; (800848c <MX_USART3_UART_Init+0x58>)
 800845a:	220c      	movs	r2, #12
 800845c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800845e:	4b0b      	ldr	r3, [pc, #44]	; (800848c <MX_USART3_UART_Init+0x58>)
 8008460:	2200      	movs	r2, #0
 8008462:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008464:	4b09      	ldr	r3, [pc, #36]	; (800848c <MX_USART3_UART_Init+0x58>)
 8008466:	2200      	movs	r2, #0
 8008468:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800846a:	4b08      	ldr	r3, [pc, #32]	; (800848c <MX_USART3_UART_Init+0x58>)
 800846c:	2200      	movs	r2, #0
 800846e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008470:	4b06      	ldr	r3, [pc, #24]	; (800848c <MX_USART3_UART_Init+0x58>)
 8008472:	2200      	movs	r2, #0
 8008474:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008476:	4b05      	ldr	r3, [pc, #20]	; (800848c <MX_USART3_UART_Init+0x58>)
 8008478:	0018      	movs	r0, r3
 800847a:	f001 fb41 	bl	8009b00 <HAL_UART_Init>
 800847e:	1e03      	subs	r3, r0, #0
 8008480:	d001      	beq.n	8008486 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8008482:	f000 f879 	bl	8008578 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008486:	46c0      	nop			; (mov r8, r8)
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	20000158 	.word	0x20000158
 8008490:	40004800 	.word	0x40004800

08008494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008494:	b590      	push	{r4, r7, lr}
 8008496:	b089      	sub	sp, #36	; 0x24
 8008498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800849a:	240c      	movs	r4, #12
 800849c:	193b      	adds	r3, r7, r4
 800849e:	0018      	movs	r0, r3
 80084a0:	2314      	movs	r3, #20
 80084a2:	001a      	movs	r2, r3
 80084a4:	2100      	movs	r1, #0
 80084a6:	f001 fffb 	bl	800a4a0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80084aa:	4b31      	ldr	r3, [pc, #196]	; (8008570 <MX_GPIO_Init+0xdc>)
 80084ac:	695a      	ldr	r2, [r3, #20]
 80084ae:	4b30      	ldr	r3, [pc, #192]	; (8008570 <MX_GPIO_Init+0xdc>)
 80084b0:	2180      	movs	r1, #128	; 0x80
 80084b2:	0309      	lsls	r1, r1, #12
 80084b4:	430a      	orrs	r2, r1
 80084b6:	615a      	str	r2, [r3, #20]
 80084b8:	4b2d      	ldr	r3, [pc, #180]	; (8008570 <MX_GPIO_Init+0xdc>)
 80084ba:	695a      	ldr	r2, [r3, #20]
 80084bc:	2380      	movs	r3, #128	; 0x80
 80084be:	031b      	lsls	r3, r3, #12
 80084c0:	4013      	ands	r3, r2
 80084c2:	60bb      	str	r3, [r7, #8]
 80084c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80084c6:	4b2a      	ldr	r3, [pc, #168]	; (8008570 <MX_GPIO_Init+0xdc>)
 80084c8:	695a      	ldr	r2, [r3, #20]
 80084ca:	4b29      	ldr	r3, [pc, #164]	; (8008570 <MX_GPIO_Init+0xdc>)
 80084cc:	2180      	movs	r1, #128	; 0x80
 80084ce:	03c9      	lsls	r1, r1, #15
 80084d0:	430a      	orrs	r2, r1
 80084d2:	615a      	str	r2, [r3, #20]
 80084d4:	4b26      	ldr	r3, [pc, #152]	; (8008570 <MX_GPIO_Init+0xdc>)
 80084d6:	695a      	ldr	r2, [r3, #20]
 80084d8:	2380      	movs	r3, #128	; 0x80
 80084da:	03db      	lsls	r3, r3, #15
 80084dc:	4013      	ands	r3, r2
 80084de:	607b      	str	r3, [r7, #4]
 80084e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80084e2:	4b23      	ldr	r3, [pc, #140]	; (8008570 <MX_GPIO_Init+0xdc>)
 80084e4:	695a      	ldr	r2, [r3, #20]
 80084e6:	4b22      	ldr	r3, [pc, #136]	; (8008570 <MX_GPIO_Init+0xdc>)
 80084e8:	2180      	movs	r1, #128	; 0x80
 80084ea:	0289      	lsls	r1, r1, #10
 80084ec:	430a      	orrs	r2, r1
 80084ee:	615a      	str	r2, [r3, #20]
 80084f0:	4b1f      	ldr	r3, [pc, #124]	; (8008570 <MX_GPIO_Init+0xdc>)
 80084f2:	695a      	ldr	r2, [r3, #20]
 80084f4:	2380      	movs	r3, #128	; 0x80
 80084f6:	029b      	lsls	r3, r3, #10
 80084f8:	4013      	ands	r3, r2
 80084fa:	603b      	str	r3, [r7, #0]
 80084fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80084fe:	2390      	movs	r3, #144	; 0x90
 8008500:	05db      	lsls	r3, r3, #23
 8008502:	2200      	movs	r2, #0
 8008504:	2120      	movs	r1, #32
 8008506:	0018      	movs	r0, r3
 8008508:	f000 fc9c 	bl	8008e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800850c:	193b      	adds	r3, r7, r4
 800850e:	2280      	movs	r2, #128	; 0x80
 8008510:	0192      	lsls	r2, r2, #6
 8008512:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008514:	193b      	adds	r3, r7, r4
 8008516:	2284      	movs	r2, #132	; 0x84
 8008518:	0392      	lsls	r2, r2, #14
 800851a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800851c:	193b      	adds	r3, r7, r4
 800851e:	2200      	movs	r2, #0
 8008520:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8008522:	193b      	adds	r3, r7, r4
 8008524:	4a13      	ldr	r2, [pc, #76]	; (8008574 <MX_GPIO_Init+0xe0>)
 8008526:	0019      	movs	r1, r3
 8008528:	0010      	movs	r0, r2
 800852a:	f000 fb13 	bl	8008b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800852e:	0021      	movs	r1, r4
 8008530:	187b      	adds	r3, r7, r1
 8008532:	2220      	movs	r2, #32
 8008534:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008536:	187b      	adds	r3, r7, r1
 8008538:	2201      	movs	r2, #1
 800853a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800853c:	187b      	adds	r3, r7, r1
 800853e:	2200      	movs	r2, #0
 8008540:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008542:	187b      	adds	r3, r7, r1
 8008544:	2200      	movs	r2, #0
 8008546:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8008548:	187a      	adds	r2, r7, r1
 800854a:	2390      	movs	r3, #144	; 0x90
 800854c:	05db      	lsls	r3, r3, #23
 800854e:	0011      	movs	r1, r2
 8008550:	0018      	movs	r0, r3
 8008552:	f000 faff 	bl	8008b54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8008556:	2200      	movs	r2, #0
 8008558:	2100      	movs	r1, #0
 800855a:	2007      	movs	r0, #7
 800855c:	f000 fac8 	bl	8008af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8008560:	2007      	movs	r0, #7
 8008562:	f000 fada 	bl	8008b1a <HAL_NVIC_EnableIRQ>

}
 8008566:	46c0      	nop			; (mov r8, r8)
 8008568:	46bd      	mov	sp, r7
 800856a:	b009      	add	sp, #36	; 0x24
 800856c:	bd90      	pop	{r4, r7, pc}
 800856e:	46c0      	nop			; (mov r8, r8)
 8008570:	40021000 	.word	0x40021000
 8008574:	48000800 	.word	0x48000800

08008578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800857c:	b672      	cpsid	i
}
 800857e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008580:	e7fe      	b.n	8008580 <Error_Handler+0x8>
	...

08008584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800858a:	4b0f      	ldr	r3, [pc, #60]	; (80085c8 <HAL_MspInit+0x44>)
 800858c:	699a      	ldr	r2, [r3, #24]
 800858e:	4b0e      	ldr	r3, [pc, #56]	; (80085c8 <HAL_MspInit+0x44>)
 8008590:	2101      	movs	r1, #1
 8008592:	430a      	orrs	r2, r1
 8008594:	619a      	str	r2, [r3, #24]
 8008596:	4b0c      	ldr	r3, [pc, #48]	; (80085c8 <HAL_MspInit+0x44>)
 8008598:	699b      	ldr	r3, [r3, #24]
 800859a:	2201      	movs	r2, #1
 800859c:	4013      	ands	r3, r2
 800859e:	607b      	str	r3, [r7, #4]
 80085a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80085a2:	4b09      	ldr	r3, [pc, #36]	; (80085c8 <HAL_MspInit+0x44>)
 80085a4:	69da      	ldr	r2, [r3, #28]
 80085a6:	4b08      	ldr	r3, [pc, #32]	; (80085c8 <HAL_MspInit+0x44>)
 80085a8:	2180      	movs	r1, #128	; 0x80
 80085aa:	0549      	lsls	r1, r1, #21
 80085ac:	430a      	orrs	r2, r1
 80085ae:	61da      	str	r2, [r3, #28]
 80085b0:	4b05      	ldr	r3, [pc, #20]	; (80085c8 <HAL_MspInit+0x44>)
 80085b2:	69da      	ldr	r2, [r3, #28]
 80085b4:	2380      	movs	r3, #128	; 0x80
 80085b6:	055b      	lsls	r3, r3, #21
 80085b8:	4013      	ands	r3, r2
 80085ba:	603b      	str	r3, [r7, #0]
 80085bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80085be:	46c0      	nop			; (mov r8, r8)
 80085c0:	46bd      	mov	sp, r7
 80085c2:	b002      	add	sp, #8
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	46c0      	nop			; (mov r8, r8)
 80085c8:	40021000 	.word	0x40021000

080085cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80085cc:	b590      	push	{r4, r7, lr}
 80085ce:	b08d      	sub	sp, #52	; 0x34
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085d4:	241c      	movs	r4, #28
 80085d6:	193b      	adds	r3, r7, r4
 80085d8:	0018      	movs	r0, r3
 80085da:	2314      	movs	r3, #20
 80085dc:	001a      	movs	r2, r3
 80085de:	2100      	movs	r1, #0
 80085e0:	f001 ff5e 	bl	800a4a0 <memset>
  if(huart->Instance==USART2)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a38      	ldr	r2, [pc, #224]	; (80086cc <HAL_UART_MspInit+0x100>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d133      	bne.n	8008656 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80085ee:	4b38      	ldr	r3, [pc, #224]	; (80086d0 <HAL_UART_MspInit+0x104>)
 80085f0:	69da      	ldr	r2, [r3, #28]
 80085f2:	4b37      	ldr	r3, [pc, #220]	; (80086d0 <HAL_UART_MspInit+0x104>)
 80085f4:	2180      	movs	r1, #128	; 0x80
 80085f6:	0289      	lsls	r1, r1, #10
 80085f8:	430a      	orrs	r2, r1
 80085fa:	61da      	str	r2, [r3, #28]
 80085fc:	4b34      	ldr	r3, [pc, #208]	; (80086d0 <HAL_UART_MspInit+0x104>)
 80085fe:	69da      	ldr	r2, [r3, #28]
 8008600:	2380      	movs	r3, #128	; 0x80
 8008602:	029b      	lsls	r3, r3, #10
 8008604:	4013      	ands	r3, r2
 8008606:	61bb      	str	r3, [r7, #24]
 8008608:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800860a:	4b31      	ldr	r3, [pc, #196]	; (80086d0 <HAL_UART_MspInit+0x104>)
 800860c:	695a      	ldr	r2, [r3, #20]
 800860e:	4b30      	ldr	r3, [pc, #192]	; (80086d0 <HAL_UART_MspInit+0x104>)
 8008610:	2180      	movs	r1, #128	; 0x80
 8008612:	0289      	lsls	r1, r1, #10
 8008614:	430a      	orrs	r2, r1
 8008616:	615a      	str	r2, [r3, #20]
 8008618:	4b2d      	ldr	r3, [pc, #180]	; (80086d0 <HAL_UART_MspInit+0x104>)
 800861a:	695a      	ldr	r2, [r3, #20]
 800861c:	2380      	movs	r3, #128	; 0x80
 800861e:	029b      	lsls	r3, r3, #10
 8008620:	4013      	ands	r3, r2
 8008622:	617b      	str	r3, [r7, #20]
 8008624:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8008626:	0021      	movs	r1, r4
 8008628:	187b      	adds	r3, r7, r1
 800862a:	220c      	movs	r2, #12
 800862c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800862e:	187b      	adds	r3, r7, r1
 8008630:	2202      	movs	r2, #2
 8008632:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008634:	187b      	adds	r3, r7, r1
 8008636:	2200      	movs	r2, #0
 8008638:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800863a:	187b      	adds	r3, r7, r1
 800863c:	2200      	movs	r2, #0
 800863e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8008640:	187b      	adds	r3, r7, r1
 8008642:	2201      	movs	r2, #1
 8008644:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008646:	187a      	adds	r2, r7, r1
 8008648:	2390      	movs	r3, #144	; 0x90
 800864a:	05db      	lsls	r3, r3, #23
 800864c:	0011      	movs	r1, r2
 800864e:	0018      	movs	r0, r3
 8008650:	f000 fa80 	bl	8008b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8008654:	e036      	b.n	80086c4 <HAL_UART_MspInit+0xf8>
  else if(huart->Instance==USART3)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a1e      	ldr	r2, [pc, #120]	; (80086d4 <HAL_UART_MspInit+0x108>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d131      	bne.n	80086c4 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8008660:	4b1b      	ldr	r3, [pc, #108]	; (80086d0 <HAL_UART_MspInit+0x104>)
 8008662:	69da      	ldr	r2, [r3, #28]
 8008664:	4b1a      	ldr	r3, [pc, #104]	; (80086d0 <HAL_UART_MspInit+0x104>)
 8008666:	2180      	movs	r1, #128	; 0x80
 8008668:	02c9      	lsls	r1, r1, #11
 800866a:	430a      	orrs	r2, r1
 800866c:	61da      	str	r2, [r3, #28]
 800866e:	4b18      	ldr	r3, [pc, #96]	; (80086d0 <HAL_UART_MspInit+0x104>)
 8008670:	69da      	ldr	r2, [r3, #28]
 8008672:	2380      	movs	r3, #128	; 0x80
 8008674:	02db      	lsls	r3, r3, #11
 8008676:	4013      	ands	r3, r2
 8008678:	613b      	str	r3, [r7, #16]
 800867a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800867c:	4b14      	ldr	r3, [pc, #80]	; (80086d0 <HAL_UART_MspInit+0x104>)
 800867e:	695a      	ldr	r2, [r3, #20]
 8008680:	4b13      	ldr	r3, [pc, #76]	; (80086d0 <HAL_UART_MspInit+0x104>)
 8008682:	2180      	movs	r1, #128	; 0x80
 8008684:	0309      	lsls	r1, r1, #12
 8008686:	430a      	orrs	r2, r1
 8008688:	615a      	str	r2, [r3, #20]
 800868a:	4b11      	ldr	r3, [pc, #68]	; (80086d0 <HAL_UART_MspInit+0x104>)
 800868c:	695a      	ldr	r2, [r3, #20]
 800868e:	2380      	movs	r3, #128	; 0x80
 8008690:	031b      	lsls	r3, r3, #12
 8008692:	4013      	ands	r3, r2
 8008694:	60fb      	str	r3, [r7, #12]
 8008696:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8008698:	211c      	movs	r1, #28
 800869a:	187b      	adds	r3, r7, r1
 800869c:	2230      	movs	r2, #48	; 0x30
 800869e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086a0:	187b      	adds	r3, r7, r1
 80086a2:	2202      	movs	r2, #2
 80086a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086a6:	187b      	adds	r3, r7, r1
 80086a8:	2200      	movs	r2, #0
 80086aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80086ac:	187b      	adds	r3, r7, r1
 80086ae:	2203      	movs	r2, #3
 80086b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 80086b2:	187b      	adds	r3, r7, r1
 80086b4:	2201      	movs	r2, #1
 80086b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80086b8:	187b      	adds	r3, r7, r1
 80086ba:	4a07      	ldr	r2, [pc, #28]	; (80086d8 <HAL_UART_MspInit+0x10c>)
 80086bc:	0019      	movs	r1, r3
 80086be:	0010      	movs	r0, r2
 80086c0:	f000 fa48 	bl	8008b54 <HAL_GPIO_Init>
}
 80086c4:	46c0      	nop			; (mov r8, r8)
 80086c6:	46bd      	mov	sp, r7
 80086c8:	b00d      	add	sp, #52	; 0x34
 80086ca:	bd90      	pop	{r4, r7, pc}
 80086cc:	40004400 	.word	0x40004400
 80086d0:	40021000 	.word	0x40021000
 80086d4:	40004800 	.word	0x40004800
 80086d8:	48000800 	.word	0x48000800

080086dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80086e0:	e7fe      	b.n	80086e0 <NMI_Handler+0x4>

080086e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80086e6:	e7fe      	b.n	80086e6 <HardFault_Handler+0x4>

080086e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80086ec:	46c0      	nop			; (mov r8, r8)
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80086f6:	46c0      	nop			; (mov r8, r8)
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008700:	f000 f90a 	bl	8008918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008704:	46c0      	nop			; (mov r8, r8)
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800870e:	2390      	movs	r3, #144	; 0x90
 8008710:	05db      	lsls	r3, r3, #23
 8008712:	2120      	movs	r1, #32
 8008714:	0018      	movs	r0, r3
 8008716:	f000 fbb2 	bl	8008e7e <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800871a:	2380      	movs	r3, #128	; 0x80
 800871c:	019b      	lsls	r3, r3, #6
 800871e:	0018      	movs	r0, r3
 8008720:	f000 fbc8 	bl	8008eb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8008724:	46c0      	nop			; (mov r8, r8)
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b086      	sub	sp, #24
 800872e:	af00      	add	r7, sp, #0
 8008730:	60f8      	str	r0, [r7, #12]
 8008732:	60b9      	str	r1, [r7, #8]
 8008734:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008736:	2300      	movs	r3, #0
 8008738:	617b      	str	r3, [r7, #20]
 800873a:	e00a      	b.n	8008752 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800873c:	e000      	b.n	8008740 <_read+0x16>
 800873e:	bf00      	nop
 8008740:	0001      	movs	r1, r0
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	1c5a      	adds	r2, r3, #1
 8008746:	60ba      	str	r2, [r7, #8]
 8008748:	b2ca      	uxtb	r2, r1
 800874a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	3301      	adds	r3, #1
 8008750:	617b      	str	r3, [r7, #20]
 8008752:	697a      	ldr	r2, [r7, #20]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	429a      	cmp	r2, r3
 8008758:	dbf0      	blt.n	800873c <_read+0x12>
	}

return len;
 800875a:	687b      	ldr	r3, [r7, #4]
}
 800875c:	0018      	movs	r0, r3
 800875e:	46bd      	mov	sp, r7
 8008760:	b006      	add	sp, #24
 8008762:	bd80      	pop	{r7, pc}

08008764 <_close>:
	}
	return len;
}

int _close(int file)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
	return -1;
 800876c:	2301      	movs	r3, #1
 800876e:	425b      	negs	r3, r3
}
 8008770:	0018      	movs	r0, r3
 8008772:	46bd      	mov	sp, r7
 8008774:	b002      	add	sp, #8
 8008776:	bd80      	pop	{r7, pc}

08008778 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	2280      	movs	r2, #128	; 0x80
 8008786:	0192      	lsls	r2, r2, #6
 8008788:	605a      	str	r2, [r3, #4]
	return 0;
 800878a:	2300      	movs	r3, #0
}
 800878c:	0018      	movs	r0, r3
 800878e:	46bd      	mov	sp, r7
 8008790:	b002      	add	sp, #8
 8008792:	bd80      	pop	{r7, pc}

08008794 <_isatty>:

int _isatty(int file)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
	return 1;
 800879c:	2301      	movs	r3, #1
}
 800879e:	0018      	movs	r0, r3
 80087a0:	46bd      	mov	sp, r7
 80087a2:	b002      	add	sp, #8
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b084      	sub	sp, #16
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	60f8      	str	r0, [r7, #12]
 80087ae:	60b9      	str	r1, [r7, #8]
 80087b0:	607a      	str	r2, [r7, #4]
	return 0;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	0018      	movs	r0, r3
 80087b6:	46bd      	mov	sp, r7
 80087b8:	b004      	add	sp, #16
 80087ba:	bd80      	pop	{r7, pc}

080087bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b086      	sub	sp, #24
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80087c4:	4a14      	ldr	r2, [pc, #80]	; (8008818 <_sbrk+0x5c>)
 80087c6:	4b15      	ldr	r3, [pc, #84]	; (800881c <_sbrk+0x60>)
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80087d0:	4b13      	ldr	r3, [pc, #76]	; (8008820 <_sbrk+0x64>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d102      	bne.n	80087de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80087d8:	4b11      	ldr	r3, [pc, #68]	; (8008820 <_sbrk+0x64>)
 80087da:	4a12      	ldr	r2, [pc, #72]	; (8008824 <_sbrk+0x68>)
 80087dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80087de:	4b10      	ldr	r3, [pc, #64]	; (8008820 <_sbrk+0x64>)
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	18d3      	adds	r3, r2, r3
 80087e6:	693a      	ldr	r2, [r7, #16]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d207      	bcs.n	80087fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80087ec:	f001 fe2e 	bl	800a44c <__errno>
 80087f0:	0003      	movs	r3, r0
 80087f2:	220c      	movs	r2, #12
 80087f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80087f6:	2301      	movs	r3, #1
 80087f8:	425b      	negs	r3, r3
 80087fa:	e009      	b.n	8008810 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80087fc:	4b08      	ldr	r3, [pc, #32]	; (8008820 <_sbrk+0x64>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008802:	4b07      	ldr	r3, [pc, #28]	; (8008820 <_sbrk+0x64>)
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	18d2      	adds	r2, r2, r3
 800880a:	4b05      	ldr	r3, [pc, #20]	; (8008820 <_sbrk+0x64>)
 800880c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800880e:	68fb      	ldr	r3, [r7, #12]
}
 8008810:	0018      	movs	r0, r3
 8008812:	46bd      	mov	sp, r7
 8008814:	b006      	add	sp, #24
 8008816:	bd80      	pop	{r7, pc}
 8008818:	20008000 	.word	0x20008000
 800881c:	00000400 	.word	0x00000400
 8008820:	2000014c 	.word	0x2000014c
 8008824:	20000278 	.word	0x20000278

08008828 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800882c:	46c0      	nop			; (mov r8, r8)
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
	...

08008834 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008834:	480d      	ldr	r0, [pc, #52]	; (800886c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008836:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008838:	480d      	ldr	r0, [pc, #52]	; (8008870 <LoopForever+0x6>)
  ldr r1, =_edata
 800883a:	490e      	ldr	r1, [pc, #56]	; (8008874 <LoopForever+0xa>)
  ldr r2, =_sidata
 800883c:	4a0e      	ldr	r2, [pc, #56]	; (8008878 <LoopForever+0xe>)
  movs r3, #0
 800883e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008840:	e002      	b.n	8008848 <LoopCopyDataInit>

08008842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008846:	3304      	adds	r3, #4

08008848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800884a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800884c:	d3f9      	bcc.n	8008842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800884e:	4a0b      	ldr	r2, [pc, #44]	; (800887c <LoopForever+0x12>)
  ldr r4, =_ebss
 8008850:	4c0b      	ldr	r4, [pc, #44]	; (8008880 <LoopForever+0x16>)
  movs r3, #0
 8008852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008854:	e001      	b.n	800885a <LoopFillZerobss>

08008856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008858:	3204      	adds	r2, #4

0800885a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800885a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800885c:	d3fb      	bcc.n	8008856 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800885e:	f7ff ffe3 	bl	8008828 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8008862:	f001 fdf9 	bl	800a458 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008866:	f7ff fcd9 	bl	800821c <main>

0800886a <LoopForever>:

LoopForever:
    b LoopForever
 800886a:	e7fe      	b.n	800886a <LoopForever>
  ldr   r0, =_estack
 800886c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8008870:	200000c0 	.word	0x200000c0
  ldr r1, =_edata
 8008874:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8008878:	0800afac 	.word	0x0800afac
  ldr r2, =_sbss
 800887c:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8008880:	20000274 	.word	0x20000274

08008884 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008884:	e7fe      	b.n	8008884 <ADC1_COMP_IRQHandler>
	...

08008888 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800888c:	4b07      	ldr	r3, [pc, #28]	; (80088ac <HAL_Init+0x24>)
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	4b06      	ldr	r3, [pc, #24]	; (80088ac <HAL_Init+0x24>)
 8008892:	2110      	movs	r1, #16
 8008894:	430a      	orrs	r2, r1
 8008896:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8008898:	2000      	movs	r0, #0
 800889a:	f000 f809 	bl	80088b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800889e:	f7ff fe71 	bl	8008584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	0018      	movs	r0, r3
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	46c0      	nop			; (mov r8, r8)
 80088ac:	40022000 	.word	0x40022000

080088b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80088b0:	b590      	push	{r4, r7, lr}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80088b8:	4b14      	ldr	r3, [pc, #80]	; (800890c <HAL_InitTick+0x5c>)
 80088ba:	681c      	ldr	r4, [r3, #0]
 80088bc:	4b14      	ldr	r3, [pc, #80]	; (8008910 <HAL_InitTick+0x60>)
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	0019      	movs	r1, r3
 80088c2:	23fa      	movs	r3, #250	; 0xfa
 80088c4:	0098      	lsls	r0, r3, #2
 80088c6:	f7ff fc1d 	bl	8008104 <__udivsi3>
 80088ca:	0003      	movs	r3, r0
 80088cc:	0019      	movs	r1, r3
 80088ce:	0020      	movs	r0, r4
 80088d0:	f7ff fc18 	bl	8008104 <__udivsi3>
 80088d4:	0003      	movs	r3, r0
 80088d6:	0018      	movs	r0, r3
 80088d8:	f000 f92f 	bl	8008b3a <HAL_SYSTICK_Config>
 80088dc:	1e03      	subs	r3, r0, #0
 80088de:	d001      	beq.n	80088e4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	e00f      	b.n	8008904 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2b03      	cmp	r3, #3
 80088e8:	d80b      	bhi.n	8008902 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80088ea:	6879      	ldr	r1, [r7, #4]
 80088ec:	2301      	movs	r3, #1
 80088ee:	425b      	negs	r3, r3
 80088f0:	2200      	movs	r2, #0
 80088f2:	0018      	movs	r0, r3
 80088f4:	f000 f8fc 	bl	8008af0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80088f8:	4b06      	ldr	r3, [pc, #24]	; (8008914 <HAL_InitTick+0x64>)
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80088fe:	2300      	movs	r3, #0
 8008900:	e000      	b.n	8008904 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
}
 8008904:	0018      	movs	r0, r3
 8008906:	46bd      	mov	sp, r7
 8008908:	b003      	add	sp, #12
 800890a:	bd90      	pop	{r4, r7, pc}
 800890c:	200000c0 	.word	0x200000c0
 8008910:	200000c8 	.word	0x200000c8
 8008914:	200000c4 	.word	0x200000c4

08008918 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800891c:	4b05      	ldr	r3, [pc, #20]	; (8008934 <HAL_IncTick+0x1c>)
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	001a      	movs	r2, r3
 8008922:	4b05      	ldr	r3, [pc, #20]	; (8008938 <HAL_IncTick+0x20>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	18d2      	adds	r2, r2, r3
 8008928:	4b03      	ldr	r3, [pc, #12]	; (8008938 <HAL_IncTick+0x20>)
 800892a:	601a      	str	r2, [r3, #0]
}
 800892c:	46c0      	nop			; (mov r8, r8)
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	46c0      	nop			; (mov r8, r8)
 8008934:	200000c8 	.word	0x200000c8
 8008938:	20000260 	.word	0x20000260

0800893c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	af00      	add	r7, sp, #0
  return uwTick;
 8008940:	4b02      	ldr	r3, [pc, #8]	; (800894c <HAL_GetTick+0x10>)
 8008942:	681b      	ldr	r3, [r3, #0]
}
 8008944:	0018      	movs	r0, r3
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	46c0      	nop			; (mov r8, r8)
 800894c:	20000260 	.word	0x20000260

08008950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008958:	f7ff fff0 	bl	800893c <HAL_GetTick>
 800895c:	0003      	movs	r3, r0
 800895e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	3301      	adds	r3, #1
 8008968:	d005      	beq.n	8008976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800896a:	4b0a      	ldr	r3, [pc, #40]	; (8008994 <HAL_Delay+0x44>)
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	001a      	movs	r2, r3
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	189b      	adds	r3, r3, r2
 8008974:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8008976:	46c0      	nop			; (mov r8, r8)
 8008978:	f7ff ffe0 	bl	800893c <HAL_GetTick>
 800897c:	0002      	movs	r2, r0
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	1ad3      	subs	r3, r2, r3
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	429a      	cmp	r2, r3
 8008986:	d8f7      	bhi.n	8008978 <HAL_Delay+0x28>
  {
  }
}
 8008988:	46c0      	nop			; (mov r8, r8)
 800898a:	46c0      	nop			; (mov r8, r8)
 800898c:	46bd      	mov	sp, r7
 800898e:	b004      	add	sp, #16
 8008990:	bd80      	pop	{r7, pc}
 8008992:	46c0      	nop			; (mov r8, r8)
 8008994:	200000c8 	.word	0x200000c8

08008998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	0002      	movs	r2, r0
 80089a0:	1dfb      	adds	r3, r7, #7
 80089a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80089a4:	1dfb      	adds	r3, r7, #7
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	2b7f      	cmp	r3, #127	; 0x7f
 80089aa:	d809      	bhi.n	80089c0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80089ac:	1dfb      	adds	r3, r7, #7
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	001a      	movs	r2, r3
 80089b2:	231f      	movs	r3, #31
 80089b4:	401a      	ands	r2, r3
 80089b6:	4b04      	ldr	r3, [pc, #16]	; (80089c8 <__NVIC_EnableIRQ+0x30>)
 80089b8:	2101      	movs	r1, #1
 80089ba:	4091      	lsls	r1, r2
 80089bc:	000a      	movs	r2, r1
 80089be:	601a      	str	r2, [r3, #0]
  }
}
 80089c0:	46c0      	nop			; (mov r8, r8)
 80089c2:	46bd      	mov	sp, r7
 80089c4:	b002      	add	sp, #8
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	e000e100 	.word	0xe000e100

080089cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80089cc:	b590      	push	{r4, r7, lr}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	0002      	movs	r2, r0
 80089d4:	6039      	str	r1, [r7, #0]
 80089d6:	1dfb      	adds	r3, r7, #7
 80089d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80089da:	1dfb      	adds	r3, r7, #7
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	2b7f      	cmp	r3, #127	; 0x7f
 80089e0:	d828      	bhi.n	8008a34 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80089e2:	4a2f      	ldr	r2, [pc, #188]	; (8008aa0 <__NVIC_SetPriority+0xd4>)
 80089e4:	1dfb      	adds	r3, r7, #7
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	b25b      	sxtb	r3, r3
 80089ea:	089b      	lsrs	r3, r3, #2
 80089ec:	33c0      	adds	r3, #192	; 0xc0
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	589b      	ldr	r3, [r3, r2]
 80089f2:	1dfa      	adds	r2, r7, #7
 80089f4:	7812      	ldrb	r2, [r2, #0]
 80089f6:	0011      	movs	r1, r2
 80089f8:	2203      	movs	r2, #3
 80089fa:	400a      	ands	r2, r1
 80089fc:	00d2      	lsls	r2, r2, #3
 80089fe:	21ff      	movs	r1, #255	; 0xff
 8008a00:	4091      	lsls	r1, r2
 8008a02:	000a      	movs	r2, r1
 8008a04:	43d2      	mvns	r2, r2
 8008a06:	401a      	ands	r2, r3
 8008a08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	019b      	lsls	r3, r3, #6
 8008a0e:	22ff      	movs	r2, #255	; 0xff
 8008a10:	401a      	ands	r2, r3
 8008a12:	1dfb      	adds	r3, r7, #7
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	0018      	movs	r0, r3
 8008a18:	2303      	movs	r3, #3
 8008a1a:	4003      	ands	r3, r0
 8008a1c:	00db      	lsls	r3, r3, #3
 8008a1e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008a20:	481f      	ldr	r0, [pc, #124]	; (8008aa0 <__NVIC_SetPriority+0xd4>)
 8008a22:	1dfb      	adds	r3, r7, #7
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	b25b      	sxtb	r3, r3
 8008a28:	089b      	lsrs	r3, r3, #2
 8008a2a:	430a      	orrs	r2, r1
 8008a2c:	33c0      	adds	r3, #192	; 0xc0
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8008a32:	e031      	b.n	8008a98 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008a34:	4a1b      	ldr	r2, [pc, #108]	; (8008aa4 <__NVIC_SetPriority+0xd8>)
 8008a36:	1dfb      	adds	r3, r7, #7
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	0019      	movs	r1, r3
 8008a3c:	230f      	movs	r3, #15
 8008a3e:	400b      	ands	r3, r1
 8008a40:	3b08      	subs	r3, #8
 8008a42:	089b      	lsrs	r3, r3, #2
 8008a44:	3306      	adds	r3, #6
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	18d3      	adds	r3, r2, r3
 8008a4a:	3304      	adds	r3, #4
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	1dfa      	adds	r2, r7, #7
 8008a50:	7812      	ldrb	r2, [r2, #0]
 8008a52:	0011      	movs	r1, r2
 8008a54:	2203      	movs	r2, #3
 8008a56:	400a      	ands	r2, r1
 8008a58:	00d2      	lsls	r2, r2, #3
 8008a5a:	21ff      	movs	r1, #255	; 0xff
 8008a5c:	4091      	lsls	r1, r2
 8008a5e:	000a      	movs	r2, r1
 8008a60:	43d2      	mvns	r2, r2
 8008a62:	401a      	ands	r2, r3
 8008a64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	019b      	lsls	r3, r3, #6
 8008a6a:	22ff      	movs	r2, #255	; 0xff
 8008a6c:	401a      	ands	r2, r3
 8008a6e:	1dfb      	adds	r3, r7, #7
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	0018      	movs	r0, r3
 8008a74:	2303      	movs	r3, #3
 8008a76:	4003      	ands	r3, r0
 8008a78:	00db      	lsls	r3, r3, #3
 8008a7a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008a7c:	4809      	ldr	r0, [pc, #36]	; (8008aa4 <__NVIC_SetPriority+0xd8>)
 8008a7e:	1dfb      	adds	r3, r7, #7
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	001c      	movs	r4, r3
 8008a84:	230f      	movs	r3, #15
 8008a86:	4023      	ands	r3, r4
 8008a88:	3b08      	subs	r3, #8
 8008a8a:	089b      	lsrs	r3, r3, #2
 8008a8c:	430a      	orrs	r2, r1
 8008a8e:	3306      	adds	r3, #6
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	18c3      	adds	r3, r0, r3
 8008a94:	3304      	adds	r3, #4
 8008a96:	601a      	str	r2, [r3, #0]
}
 8008a98:	46c0      	nop			; (mov r8, r8)
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	b003      	add	sp, #12
 8008a9e:	bd90      	pop	{r4, r7, pc}
 8008aa0:	e000e100 	.word	0xe000e100
 8008aa4:	e000ed00 	.word	0xe000ed00

08008aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	1e5a      	subs	r2, r3, #1
 8008ab4:	2380      	movs	r3, #128	; 0x80
 8008ab6:	045b      	lsls	r3, r3, #17
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d301      	bcc.n	8008ac0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008abc:	2301      	movs	r3, #1
 8008abe:	e010      	b.n	8008ae2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008ac0:	4b0a      	ldr	r3, [pc, #40]	; (8008aec <SysTick_Config+0x44>)
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	3a01      	subs	r2, #1
 8008ac6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008ac8:	2301      	movs	r3, #1
 8008aca:	425b      	negs	r3, r3
 8008acc:	2103      	movs	r1, #3
 8008ace:	0018      	movs	r0, r3
 8008ad0:	f7ff ff7c 	bl	80089cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008ad4:	4b05      	ldr	r3, [pc, #20]	; (8008aec <SysTick_Config+0x44>)
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008ada:	4b04      	ldr	r3, [pc, #16]	; (8008aec <SysTick_Config+0x44>)
 8008adc:	2207      	movs	r2, #7
 8008ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	0018      	movs	r0, r3
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	b002      	add	sp, #8
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	46c0      	nop			; (mov r8, r8)
 8008aec:	e000e010 	.word	0xe000e010

08008af0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60b9      	str	r1, [r7, #8]
 8008af8:	607a      	str	r2, [r7, #4]
 8008afa:	210f      	movs	r1, #15
 8008afc:	187b      	adds	r3, r7, r1
 8008afe:	1c02      	adds	r2, r0, #0
 8008b00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8008b02:	68ba      	ldr	r2, [r7, #8]
 8008b04:	187b      	adds	r3, r7, r1
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	b25b      	sxtb	r3, r3
 8008b0a:	0011      	movs	r1, r2
 8008b0c:	0018      	movs	r0, r3
 8008b0e:	f7ff ff5d 	bl	80089cc <__NVIC_SetPriority>
}
 8008b12:	46c0      	nop			; (mov r8, r8)
 8008b14:	46bd      	mov	sp, r7
 8008b16:	b004      	add	sp, #16
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b082      	sub	sp, #8
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	0002      	movs	r2, r0
 8008b22:	1dfb      	adds	r3, r7, #7
 8008b24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008b26:	1dfb      	adds	r3, r7, #7
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	b25b      	sxtb	r3, r3
 8008b2c:	0018      	movs	r0, r3
 8008b2e:	f7ff ff33 	bl	8008998 <__NVIC_EnableIRQ>
}
 8008b32:	46c0      	nop			; (mov r8, r8)
 8008b34:	46bd      	mov	sp, r7
 8008b36:	b002      	add	sp, #8
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b082      	sub	sp, #8
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	0018      	movs	r0, r3
 8008b46:	f7ff ffaf 	bl	8008aa8 <SysTick_Config>
 8008b4a:	0003      	movs	r3, r0
}
 8008b4c:	0018      	movs	r0, r3
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	b002      	add	sp, #8
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b086      	sub	sp, #24
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008b62:	e155      	b.n	8008e10 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2101      	movs	r1, #1
 8008b6a:	697a      	ldr	r2, [r7, #20]
 8008b6c:	4091      	lsls	r1, r2
 8008b6e:	000a      	movs	r2, r1
 8008b70:	4013      	ands	r3, r2
 8008b72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d100      	bne.n	8008b7c <HAL_GPIO_Init+0x28>
 8008b7a:	e146      	b.n	8008e0a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	2203      	movs	r2, #3
 8008b82:	4013      	ands	r3, r2
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d005      	beq.n	8008b94 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	2203      	movs	r2, #3
 8008b8e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	d130      	bne.n	8008bf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	005b      	lsls	r3, r3, #1
 8008b9e:	2203      	movs	r2, #3
 8008ba0:	409a      	lsls	r2, r3
 8008ba2:	0013      	movs	r3, r2
 8008ba4:	43da      	mvns	r2, r3
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	4013      	ands	r3, r2
 8008baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	68da      	ldr	r2, [r3, #12]
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	005b      	lsls	r3, r3, #1
 8008bb4:	409a      	lsls	r2, r3
 8008bb6:	0013      	movs	r3, r2
 8008bb8:	693a      	ldr	r2, [r7, #16]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	693a      	ldr	r2, [r7, #16]
 8008bc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008bca:	2201      	movs	r2, #1
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	409a      	lsls	r2, r3
 8008bd0:	0013      	movs	r3, r2
 8008bd2:	43da      	mvns	r2, r3
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	4013      	ands	r3, r2
 8008bd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	091b      	lsrs	r3, r3, #4
 8008be0:	2201      	movs	r2, #1
 8008be2:	401a      	ands	r2, r3
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	409a      	lsls	r2, r3
 8008be8:	0013      	movs	r3, r2
 8008bea:	693a      	ldr	r2, [r7, #16]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	693a      	ldr	r2, [r7, #16]
 8008bf4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	2203      	movs	r2, #3
 8008bfc:	4013      	ands	r3, r2
 8008bfe:	2b03      	cmp	r3, #3
 8008c00:	d017      	beq.n	8008c32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	005b      	lsls	r3, r3, #1
 8008c0c:	2203      	movs	r2, #3
 8008c0e:	409a      	lsls	r2, r3
 8008c10:	0013      	movs	r3, r2
 8008c12:	43da      	mvns	r2, r3
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	4013      	ands	r3, r2
 8008c18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	689a      	ldr	r2, [r3, #8]
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	005b      	lsls	r3, r3, #1
 8008c22:	409a      	lsls	r2, r3
 8008c24:	0013      	movs	r3, r2
 8008c26:	693a      	ldr	r2, [r7, #16]
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	693a      	ldr	r2, [r7, #16]
 8008c30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	2203      	movs	r2, #3
 8008c38:	4013      	ands	r3, r2
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d123      	bne.n	8008c86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	08da      	lsrs	r2, r3, #3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	3208      	adds	r2, #8
 8008c46:	0092      	lsls	r2, r2, #2
 8008c48:	58d3      	ldr	r3, [r2, r3]
 8008c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	2207      	movs	r2, #7
 8008c50:	4013      	ands	r3, r2
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	220f      	movs	r2, #15
 8008c56:	409a      	lsls	r2, r3
 8008c58:	0013      	movs	r3, r2
 8008c5a:	43da      	mvns	r2, r3
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	4013      	ands	r3, r2
 8008c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	691a      	ldr	r2, [r3, #16]
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	2107      	movs	r1, #7
 8008c6a:	400b      	ands	r3, r1
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	409a      	lsls	r2, r3
 8008c70:	0013      	movs	r3, r2
 8008c72:	693a      	ldr	r2, [r7, #16]
 8008c74:	4313      	orrs	r3, r2
 8008c76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	08da      	lsrs	r2, r3, #3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	3208      	adds	r2, #8
 8008c80:	0092      	lsls	r2, r2, #2
 8008c82:	6939      	ldr	r1, [r7, #16]
 8008c84:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	005b      	lsls	r3, r3, #1
 8008c90:	2203      	movs	r2, #3
 8008c92:	409a      	lsls	r2, r3
 8008c94:	0013      	movs	r3, r2
 8008c96:	43da      	mvns	r2, r3
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	2203      	movs	r2, #3
 8008ca4:	401a      	ands	r2, r3
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	005b      	lsls	r3, r3, #1
 8008caa:	409a      	lsls	r2, r3
 8008cac:	0013      	movs	r3, r2
 8008cae:	693a      	ldr	r2, [r7, #16]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	693a      	ldr	r2, [r7, #16]
 8008cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	685a      	ldr	r2, [r3, #4]
 8008cbe:	23c0      	movs	r3, #192	; 0xc0
 8008cc0:	029b      	lsls	r3, r3, #10
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	d100      	bne.n	8008cc8 <HAL_GPIO_Init+0x174>
 8008cc6:	e0a0      	b.n	8008e0a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008cc8:	4b57      	ldr	r3, [pc, #348]	; (8008e28 <HAL_GPIO_Init+0x2d4>)
 8008cca:	699a      	ldr	r2, [r3, #24]
 8008ccc:	4b56      	ldr	r3, [pc, #344]	; (8008e28 <HAL_GPIO_Init+0x2d4>)
 8008cce:	2101      	movs	r1, #1
 8008cd0:	430a      	orrs	r2, r1
 8008cd2:	619a      	str	r2, [r3, #24]
 8008cd4:	4b54      	ldr	r3, [pc, #336]	; (8008e28 <HAL_GPIO_Init+0x2d4>)
 8008cd6:	699b      	ldr	r3, [r3, #24]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	4013      	ands	r3, r2
 8008cdc:	60bb      	str	r3, [r7, #8]
 8008cde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008ce0:	4a52      	ldr	r2, [pc, #328]	; (8008e2c <HAL_GPIO_Init+0x2d8>)
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	089b      	lsrs	r3, r3, #2
 8008ce6:	3302      	adds	r3, #2
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	589b      	ldr	r3, [r3, r2]
 8008cec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	2203      	movs	r2, #3
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	220f      	movs	r2, #15
 8008cf8:	409a      	lsls	r2, r3
 8008cfa:	0013      	movs	r3, r2
 8008cfc:	43da      	mvns	r2, r3
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	4013      	ands	r3, r2
 8008d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	2390      	movs	r3, #144	; 0x90
 8008d08:	05db      	lsls	r3, r3, #23
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d019      	beq.n	8008d42 <HAL_GPIO_Init+0x1ee>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a47      	ldr	r2, [pc, #284]	; (8008e30 <HAL_GPIO_Init+0x2dc>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d013      	beq.n	8008d3e <HAL_GPIO_Init+0x1ea>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a46      	ldr	r2, [pc, #280]	; (8008e34 <HAL_GPIO_Init+0x2e0>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d00d      	beq.n	8008d3a <HAL_GPIO_Init+0x1e6>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a45      	ldr	r2, [pc, #276]	; (8008e38 <HAL_GPIO_Init+0x2e4>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d007      	beq.n	8008d36 <HAL_GPIO_Init+0x1e2>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a44      	ldr	r2, [pc, #272]	; (8008e3c <HAL_GPIO_Init+0x2e8>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d101      	bne.n	8008d32 <HAL_GPIO_Init+0x1de>
 8008d2e:	2304      	movs	r3, #4
 8008d30:	e008      	b.n	8008d44 <HAL_GPIO_Init+0x1f0>
 8008d32:	2305      	movs	r3, #5
 8008d34:	e006      	b.n	8008d44 <HAL_GPIO_Init+0x1f0>
 8008d36:	2303      	movs	r3, #3
 8008d38:	e004      	b.n	8008d44 <HAL_GPIO_Init+0x1f0>
 8008d3a:	2302      	movs	r3, #2
 8008d3c:	e002      	b.n	8008d44 <HAL_GPIO_Init+0x1f0>
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e000      	b.n	8008d44 <HAL_GPIO_Init+0x1f0>
 8008d42:	2300      	movs	r3, #0
 8008d44:	697a      	ldr	r2, [r7, #20]
 8008d46:	2103      	movs	r1, #3
 8008d48:	400a      	ands	r2, r1
 8008d4a:	0092      	lsls	r2, r2, #2
 8008d4c:	4093      	lsls	r3, r2
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008d54:	4935      	ldr	r1, [pc, #212]	; (8008e2c <HAL_GPIO_Init+0x2d8>)
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	089b      	lsrs	r3, r3, #2
 8008d5a:	3302      	adds	r3, #2
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	693a      	ldr	r2, [r7, #16]
 8008d60:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008d62:	4b37      	ldr	r3, [pc, #220]	; (8008e40 <HAL_GPIO_Init+0x2ec>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	43da      	mvns	r2, r3
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	4013      	ands	r3, r2
 8008d70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	685a      	ldr	r2, [r3, #4]
 8008d76:	2380      	movs	r3, #128	; 0x80
 8008d78:	025b      	lsls	r3, r3, #9
 8008d7a:	4013      	ands	r3, r2
 8008d7c:	d003      	beq.n	8008d86 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8008d7e:	693a      	ldr	r2, [r7, #16]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8008d86:	4b2e      	ldr	r3, [pc, #184]	; (8008e40 <HAL_GPIO_Init+0x2ec>)
 8008d88:	693a      	ldr	r2, [r7, #16]
 8008d8a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8008d8c:	4b2c      	ldr	r3, [pc, #176]	; (8008e40 <HAL_GPIO_Init+0x2ec>)
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	43da      	mvns	r2, r3
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	4013      	ands	r3, r2
 8008d9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	685a      	ldr	r2, [r3, #4]
 8008da0:	2380      	movs	r3, #128	; 0x80
 8008da2:	029b      	lsls	r3, r3, #10
 8008da4:	4013      	ands	r3, r2
 8008da6:	d003      	beq.n	8008db0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8008da8:	693a      	ldr	r2, [r7, #16]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	4313      	orrs	r3, r2
 8008dae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8008db0:	4b23      	ldr	r3, [pc, #140]	; (8008e40 <HAL_GPIO_Init+0x2ec>)
 8008db2:	693a      	ldr	r2, [r7, #16]
 8008db4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008db6:	4b22      	ldr	r3, [pc, #136]	; (8008e40 <HAL_GPIO_Init+0x2ec>)
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	43da      	mvns	r2, r3
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	685a      	ldr	r2, [r3, #4]
 8008dca:	2380      	movs	r3, #128	; 0x80
 8008dcc:	035b      	lsls	r3, r3, #13
 8008dce:	4013      	ands	r3, r2
 8008dd0:	d003      	beq.n	8008dda <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8008dd2:	693a      	ldr	r2, [r7, #16]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8008dda:	4b19      	ldr	r3, [pc, #100]	; (8008e40 <HAL_GPIO_Init+0x2ec>)
 8008ddc:	693a      	ldr	r2, [r7, #16]
 8008dde:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8008de0:	4b17      	ldr	r3, [pc, #92]	; (8008e40 <HAL_GPIO_Init+0x2ec>)
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	43da      	mvns	r2, r3
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	4013      	ands	r3, r2
 8008dee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	685a      	ldr	r2, [r3, #4]
 8008df4:	2380      	movs	r3, #128	; 0x80
 8008df6:	039b      	lsls	r3, r3, #14
 8008df8:	4013      	ands	r3, r2
 8008dfa:	d003      	beq.n	8008e04 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8008dfc:	693a      	ldr	r2, [r7, #16]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8008e04:	4b0e      	ldr	r3, [pc, #56]	; (8008e40 <HAL_GPIO_Init+0x2ec>)
 8008e06:	693a      	ldr	r2, [r7, #16]
 8008e08:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	40da      	lsrs	r2, r3
 8008e18:	1e13      	subs	r3, r2, #0
 8008e1a:	d000      	beq.n	8008e1e <HAL_GPIO_Init+0x2ca>
 8008e1c:	e6a2      	b.n	8008b64 <HAL_GPIO_Init+0x10>
  } 
}
 8008e1e:	46c0      	nop			; (mov r8, r8)
 8008e20:	46c0      	nop			; (mov r8, r8)
 8008e22:	46bd      	mov	sp, r7
 8008e24:	b006      	add	sp, #24
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	40021000 	.word	0x40021000
 8008e2c:	40010000 	.word	0x40010000
 8008e30:	48000400 	.word	0x48000400
 8008e34:	48000800 	.word	0x48000800
 8008e38:	48000c00 	.word	0x48000c00
 8008e3c:	48001000 	.word	0x48001000
 8008e40:	40010400 	.word	0x40010400

08008e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	0008      	movs	r0, r1
 8008e4e:	0011      	movs	r1, r2
 8008e50:	1cbb      	adds	r3, r7, #2
 8008e52:	1c02      	adds	r2, r0, #0
 8008e54:	801a      	strh	r2, [r3, #0]
 8008e56:	1c7b      	adds	r3, r7, #1
 8008e58:	1c0a      	adds	r2, r1, #0
 8008e5a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008e5c:	1c7b      	adds	r3, r7, #1
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d004      	beq.n	8008e6e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008e64:	1cbb      	adds	r3, r7, #2
 8008e66:	881a      	ldrh	r2, [r3, #0]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008e6c:	e003      	b.n	8008e76 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008e6e:	1cbb      	adds	r3, r7, #2
 8008e70:	881a      	ldrh	r2, [r3, #0]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008e76:	46c0      	nop			; (mov r8, r8)
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	b002      	add	sp, #8
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b084      	sub	sp, #16
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
 8008e86:	000a      	movs	r2, r1
 8008e88:	1cbb      	adds	r3, r7, #2
 8008e8a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	695b      	ldr	r3, [r3, #20]
 8008e90:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008e92:	1cbb      	adds	r3, r7, #2
 8008e94:	881b      	ldrh	r3, [r3, #0]
 8008e96:	68fa      	ldr	r2, [r7, #12]
 8008e98:	4013      	ands	r3, r2
 8008e9a:	041a      	lsls	r2, r3, #16
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	43db      	mvns	r3, r3
 8008ea0:	1cb9      	adds	r1, r7, #2
 8008ea2:	8809      	ldrh	r1, [r1, #0]
 8008ea4:	400b      	ands	r3, r1
 8008ea6:	431a      	orrs	r2, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	619a      	str	r2, [r3, #24]
}
 8008eac:	46c0      	nop			; (mov r8, r8)
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	b004      	add	sp, #16
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	0002      	movs	r2, r0
 8008ebc:	1dbb      	adds	r3, r7, #6
 8008ebe:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008ec0:	4b09      	ldr	r3, [pc, #36]	; (8008ee8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8008ec2:	695b      	ldr	r3, [r3, #20]
 8008ec4:	1dba      	adds	r2, r7, #6
 8008ec6:	8812      	ldrh	r2, [r2, #0]
 8008ec8:	4013      	ands	r3, r2
 8008eca:	d008      	beq.n	8008ede <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008ecc:	4b06      	ldr	r3, [pc, #24]	; (8008ee8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8008ece:	1dba      	adds	r2, r7, #6
 8008ed0:	8812      	ldrh	r2, [r2, #0]
 8008ed2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008ed4:	1dbb      	adds	r3, r7, #6
 8008ed6:	881b      	ldrh	r3, [r3, #0]
 8008ed8:	0018      	movs	r0, r3
 8008eda:	f000 f807 	bl	8008eec <HAL_GPIO_EXTI_Callback>
  }
}
 8008ede:	46c0      	nop			; (mov r8, r8)
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	b002      	add	sp, #8
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	46c0      	nop			; (mov r8, r8)
 8008ee8:	40010400 	.word	0x40010400

08008eec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	0002      	movs	r2, r0
 8008ef4:	1dbb      	adds	r3, r7, #6
 8008ef6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8008ef8:	46c0      	nop			; (mov r8, r8)
 8008efa:	46bd      	mov	sp, r7
 8008efc:	b002      	add	sp, #8
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b088      	sub	sp, #32
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d102      	bne.n	8008f14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	f000 fb76 	bl	8009600 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2201      	movs	r2, #1
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	d100      	bne.n	8008f20 <HAL_RCC_OscConfig+0x20>
 8008f1e:	e08e      	b.n	800903e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8008f20:	4bc5      	ldr	r3, [pc, #788]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	220c      	movs	r2, #12
 8008f26:	4013      	ands	r3, r2
 8008f28:	2b04      	cmp	r3, #4
 8008f2a:	d00e      	beq.n	8008f4a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008f2c:	4bc2      	ldr	r3, [pc, #776]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	220c      	movs	r2, #12
 8008f32:	4013      	ands	r3, r2
 8008f34:	2b08      	cmp	r3, #8
 8008f36:	d117      	bne.n	8008f68 <HAL_RCC_OscConfig+0x68>
 8008f38:	4bbf      	ldr	r3, [pc, #764]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 8008f3a:	685a      	ldr	r2, [r3, #4]
 8008f3c:	23c0      	movs	r3, #192	; 0xc0
 8008f3e:	025b      	lsls	r3, r3, #9
 8008f40:	401a      	ands	r2, r3
 8008f42:	2380      	movs	r3, #128	; 0x80
 8008f44:	025b      	lsls	r3, r3, #9
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d10e      	bne.n	8008f68 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f4a:	4bbb      	ldr	r3, [pc, #748]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	2380      	movs	r3, #128	; 0x80
 8008f50:	029b      	lsls	r3, r3, #10
 8008f52:	4013      	ands	r3, r2
 8008f54:	d100      	bne.n	8008f58 <HAL_RCC_OscConfig+0x58>
 8008f56:	e071      	b.n	800903c <HAL_RCC_OscConfig+0x13c>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d000      	beq.n	8008f62 <HAL_RCC_OscConfig+0x62>
 8008f60:	e06c      	b.n	800903c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	f000 fb4c 	bl	8009600 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d107      	bne.n	8008f80 <HAL_RCC_OscConfig+0x80>
 8008f70:	4bb1      	ldr	r3, [pc, #708]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	4bb0      	ldr	r3, [pc, #704]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 8008f76:	2180      	movs	r1, #128	; 0x80
 8008f78:	0249      	lsls	r1, r1, #9
 8008f7a:	430a      	orrs	r2, r1
 8008f7c:	601a      	str	r2, [r3, #0]
 8008f7e:	e02f      	b.n	8008fe0 <HAL_RCC_OscConfig+0xe0>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d10c      	bne.n	8008fa2 <HAL_RCC_OscConfig+0xa2>
 8008f88:	4bab      	ldr	r3, [pc, #684]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	4baa      	ldr	r3, [pc, #680]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 8008f8e:	49ab      	ldr	r1, [pc, #684]	; (800923c <HAL_RCC_OscConfig+0x33c>)
 8008f90:	400a      	ands	r2, r1
 8008f92:	601a      	str	r2, [r3, #0]
 8008f94:	4ba8      	ldr	r3, [pc, #672]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	4ba7      	ldr	r3, [pc, #668]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 8008f9a:	49a9      	ldr	r1, [pc, #676]	; (8009240 <HAL_RCC_OscConfig+0x340>)
 8008f9c:	400a      	ands	r2, r1
 8008f9e:	601a      	str	r2, [r3, #0]
 8008fa0:	e01e      	b.n	8008fe0 <HAL_RCC_OscConfig+0xe0>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	2b05      	cmp	r3, #5
 8008fa8:	d10e      	bne.n	8008fc8 <HAL_RCC_OscConfig+0xc8>
 8008faa:	4ba3      	ldr	r3, [pc, #652]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	4ba2      	ldr	r3, [pc, #648]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 8008fb0:	2180      	movs	r1, #128	; 0x80
 8008fb2:	02c9      	lsls	r1, r1, #11
 8008fb4:	430a      	orrs	r2, r1
 8008fb6:	601a      	str	r2, [r3, #0]
 8008fb8:	4b9f      	ldr	r3, [pc, #636]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	4b9e      	ldr	r3, [pc, #632]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 8008fbe:	2180      	movs	r1, #128	; 0x80
 8008fc0:	0249      	lsls	r1, r1, #9
 8008fc2:	430a      	orrs	r2, r1
 8008fc4:	601a      	str	r2, [r3, #0]
 8008fc6:	e00b      	b.n	8008fe0 <HAL_RCC_OscConfig+0xe0>
 8008fc8:	4b9b      	ldr	r3, [pc, #620]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	4b9a      	ldr	r3, [pc, #616]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 8008fce:	499b      	ldr	r1, [pc, #620]	; (800923c <HAL_RCC_OscConfig+0x33c>)
 8008fd0:	400a      	ands	r2, r1
 8008fd2:	601a      	str	r2, [r3, #0]
 8008fd4:	4b98      	ldr	r3, [pc, #608]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	4b97      	ldr	r3, [pc, #604]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 8008fda:	4999      	ldr	r1, [pc, #612]	; (8009240 <HAL_RCC_OscConfig+0x340>)
 8008fdc:	400a      	ands	r2, r1
 8008fde:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d014      	beq.n	8009012 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fe8:	f7ff fca8 	bl	800893c <HAL_GetTick>
 8008fec:	0003      	movs	r3, r0
 8008fee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ff0:	e008      	b.n	8009004 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ff2:	f7ff fca3 	bl	800893c <HAL_GetTick>
 8008ff6:	0002      	movs	r2, r0
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	1ad3      	subs	r3, r2, r3
 8008ffc:	2b64      	cmp	r3, #100	; 0x64
 8008ffe:	d901      	bls.n	8009004 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8009000:	2303      	movs	r3, #3
 8009002:	e2fd      	b.n	8009600 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009004:	4b8c      	ldr	r3, [pc, #560]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	2380      	movs	r3, #128	; 0x80
 800900a:	029b      	lsls	r3, r3, #10
 800900c:	4013      	ands	r3, r2
 800900e:	d0f0      	beq.n	8008ff2 <HAL_RCC_OscConfig+0xf2>
 8009010:	e015      	b.n	800903e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009012:	f7ff fc93 	bl	800893c <HAL_GetTick>
 8009016:	0003      	movs	r3, r0
 8009018:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800901a:	e008      	b.n	800902e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800901c:	f7ff fc8e 	bl	800893c <HAL_GetTick>
 8009020:	0002      	movs	r2, r0
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	1ad3      	subs	r3, r2, r3
 8009026:	2b64      	cmp	r3, #100	; 0x64
 8009028:	d901      	bls.n	800902e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800902a:	2303      	movs	r3, #3
 800902c:	e2e8      	b.n	8009600 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800902e:	4b82      	ldr	r3, [pc, #520]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	2380      	movs	r3, #128	; 0x80
 8009034:	029b      	lsls	r3, r3, #10
 8009036:	4013      	ands	r3, r2
 8009038:	d1f0      	bne.n	800901c <HAL_RCC_OscConfig+0x11c>
 800903a:	e000      	b.n	800903e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800903c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2202      	movs	r2, #2
 8009044:	4013      	ands	r3, r2
 8009046:	d100      	bne.n	800904a <HAL_RCC_OscConfig+0x14a>
 8009048:	e06c      	b.n	8009124 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800904a:	4b7b      	ldr	r3, [pc, #492]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	220c      	movs	r2, #12
 8009050:	4013      	ands	r3, r2
 8009052:	d00e      	beq.n	8009072 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8009054:	4b78      	ldr	r3, [pc, #480]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	220c      	movs	r2, #12
 800905a:	4013      	ands	r3, r2
 800905c:	2b08      	cmp	r3, #8
 800905e:	d11f      	bne.n	80090a0 <HAL_RCC_OscConfig+0x1a0>
 8009060:	4b75      	ldr	r3, [pc, #468]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 8009062:	685a      	ldr	r2, [r3, #4]
 8009064:	23c0      	movs	r3, #192	; 0xc0
 8009066:	025b      	lsls	r3, r3, #9
 8009068:	401a      	ands	r2, r3
 800906a:	2380      	movs	r3, #128	; 0x80
 800906c:	021b      	lsls	r3, r3, #8
 800906e:	429a      	cmp	r2, r3
 8009070:	d116      	bne.n	80090a0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009072:	4b71      	ldr	r3, [pc, #452]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2202      	movs	r2, #2
 8009078:	4013      	ands	r3, r2
 800907a:	d005      	beq.n	8009088 <HAL_RCC_OscConfig+0x188>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	2b01      	cmp	r3, #1
 8009082:	d001      	beq.n	8009088 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8009084:	2301      	movs	r3, #1
 8009086:	e2bb      	b.n	8009600 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009088:	4b6b      	ldr	r3, [pc, #428]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	22f8      	movs	r2, #248	; 0xf8
 800908e:	4393      	bics	r3, r2
 8009090:	0019      	movs	r1, r3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	691b      	ldr	r3, [r3, #16]
 8009096:	00da      	lsls	r2, r3, #3
 8009098:	4b67      	ldr	r3, [pc, #412]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 800909a:	430a      	orrs	r2, r1
 800909c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800909e:	e041      	b.n	8009124 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d024      	beq.n	80090f2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80090a8:	4b63      	ldr	r3, [pc, #396]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	4b62      	ldr	r3, [pc, #392]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 80090ae:	2101      	movs	r1, #1
 80090b0:	430a      	orrs	r2, r1
 80090b2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090b4:	f7ff fc42 	bl	800893c <HAL_GetTick>
 80090b8:	0003      	movs	r3, r0
 80090ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090bc:	e008      	b.n	80090d0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80090be:	f7ff fc3d 	bl	800893c <HAL_GetTick>
 80090c2:	0002      	movs	r2, r0
 80090c4:	69bb      	ldr	r3, [r7, #24]
 80090c6:	1ad3      	subs	r3, r2, r3
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	d901      	bls.n	80090d0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80090cc:	2303      	movs	r3, #3
 80090ce:	e297      	b.n	8009600 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090d0:	4b59      	ldr	r3, [pc, #356]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2202      	movs	r2, #2
 80090d6:	4013      	ands	r3, r2
 80090d8:	d0f1      	beq.n	80090be <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090da:	4b57      	ldr	r3, [pc, #348]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	22f8      	movs	r2, #248	; 0xf8
 80090e0:	4393      	bics	r3, r2
 80090e2:	0019      	movs	r1, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	00da      	lsls	r2, r3, #3
 80090ea:	4b53      	ldr	r3, [pc, #332]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 80090ec:	430a      	orrs	r2, r1
 80090ee:	601a      	str	r2, [r3, #0]
 80090f0:	e018      	b.n	8009124 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80090f2:	4b51      	ldr	r3, [pc, #324]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	4b50      	ldr	r3, [pc, #320]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 80090f8:	2101      	movs	r1, #1
 80090fa:	438a      	bics	r2, r1
 80090fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090fe:	f7ff fc1d 	bl	800893c <HAL_GetTick>
 8009102:	0003      	movs	r3, r0
 8009104:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009106:	e008      	b.n	800911a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009108:	f7ff fc18 	bl	800893c <HAL_GetTick>
 800910c:	0002      	movs	r2, r0
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	2b02      	cmp	r3, #2
 8009114:	d901      	bls.n	800911a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8009116:	2303      	movs	r3, #3
 8009118:	e272      	b.n	8009600 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800911a:	4b47      	ldr	r3, [pc, #284]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2202      	movs	r2, #2
 8009120:	4013      	ands	r3, r2
 8009122:	d1f1      	bne.n	8009108 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2208      	movs	r2, #8
 800912a:	4013      	ands	r3, r2
 800912c:	d036      	beq.n	800919c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	69db      	ldr	r3, [r3, #28]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d019      	beq.n	800916a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009136:	4b40      	ldr	r3, [pc, #256]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 8009138:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800913a:	4b3f      	ldr	r3, [pc, #252]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 800913c:	2101      	movs	r1, #1
 800913e:	430a      	orrs	r2, r1
 8009140:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009142:	f7ff fbfb 	bl	800893c <HAL_GetTick>
 8009146:	0003      	movs	r3, r0
 8009148:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800914a:	e008      	b.n	800915e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800914c:	f7ff fbf6 	bl	800893c <HAL_GetTick>
 8009150:	0002      	movs	r2, r0
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	2b02      	cmp	r3, #2
 8009158:	d901      	bls.n	800915e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800915a:	2303      	movs	r3, #3
 800915c:	e250      	b.n	8009600 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800915e:	4b36      	ldr	r3, [pc, #216]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 8009160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009162:	2202      	movs	r2, #2
 8009164:	4013      	ands	r3, r2
 8009166:	d0f1      	beq.n	800914c <HAL_RCC_OscConfig+0x24c>
 8009168:	e018      	b.n	800919c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800916a:	4b33      	ldr	r3, [pc, #204]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 800916c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800916e:	4b32      	ldr	r3, [pc, #200]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 8009170:	2101      	movs	r1, #1
 8009172:	438a      	bics	r2, r1
 8009174:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009176:	f7ff fbe1 	bl	800893c <HAL_GetTick>
 800917a:	0003      	movs	r3, r0
 800917c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800917e:	e008      	b.n	8009192 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009180:	f7ff fbdc 	bl	800893c <HAL_GetTick>
 8009184:	0002      	movs	r2, r0
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	1ad3      	subs	r3, r2, r3
 800918a:	2b02      	cmp	r3, #2
 800918c:	d901      	bls.n	8009192 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800918e:	2303      	movs	r3, #3
 8009190:	e236      	b.n	8009600 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009192:	4b29      	ldr	r3, [pc, #164]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 8009194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009196:	2202      	movs	r2, #2
 8009198:	4013      	ands	r3, r2
 800919a:	d1f1      	bne.n	8009180 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2204      	movs	r2, #4
 80091a2:	4013      	ands	r3, r2
 80091a4:	d100      	bne.n	80091a8 <HAL_RCC_OscConfig+0x2a8>
 80091a6:	e0b5      	b.n	8009314 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80091a8:	201f      	movs	r0, #31
 80091aa:	183b      	adds	r3, r7, r0
 80091ac:	2200      	movs	r2, #0
 80091ae:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80091b0:	4b21      	ldr	r3, [pc, #132]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 80091b2:	69da      	ldr	r2, [r3, #28]
 80091b4:	2380      	movs	r3, #128	; 0x80
 80091b6:	055b      	lsls	r3, r3, #21
 80091b8:	4013      	ands	r3, r2
 80091ba:	d110      	bne.n	80091de <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80091bc:	4b1e      	ldr	r3, [pc, #120]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 80091be:	69da      	ldr	r2, [r3, #28]
 80091c0:	4b1d      	ldr	r3, [pc, #116]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 80091c2:	2180      	movs	r1, #128	; 0x80
 80091c4:	0549      	lsls	r1, r1, #21
 80091c6:	430a      	orrs	r2, r1
 80091c8:	61da      	str	r2, [r3, #28]
 80091ca:	4b1b      	ldr	r3, [pc, #108]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 80091cc:	69da      	ldr	r2, [r3, #28]
 80091ce:	2380      	movs	r3, #128	; 0x80
 80091d0:	055b      	lsls	r3, r3, #21
 80091d2:	4013      	ands	r3, r2
 80091d4:	60fb      	str	r3, [r7, #12]
 80091d6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80091d8:	183b      	adds	r3, r7, r0
 80091da:	2201      	movs	r2, #1
 80091dc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091de:	4b19      	ldr	r3, [pc, #100]	; (8009244 <HAL_RCC_OscConfig+0x344>)
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	2380      	movs	r3, #128	; 0x80
 80091e4:	005b      	lsls	r3, r3, #1
 80091e6:	4013      	ands	r3, r2
 80091e8:	d11a      	bne.n	8009220 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80091ea:	4b16      	ldr	r3, [pc, #88]	; (8009244 <HAL_RCC_OscConfig+0x344>)
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	4b15      	ldr	r3, [pc, #84]	; (8009244 <HAL_RCC_OscConfig+0x344>)
 80091f0:	2180      	movs	r1, #128	; 0x80
 80091f2:	0049      	lsls	r1, r1, #1
 80091f4:	430a      	orrs	r2, r1
 80091f6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80091f8:	f7ff fba0 	bl	800893c <HAL_GetTick>
 80091fc:	0003      	movs	r3, r0
 80091fe:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009200:	e008      	b.n	8009214 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009202:	f7ff fb9b 	bl	800893c <HAL_GetTick>
 8009206:	0002      	movs	r2, r0
 8009208:	69bb      	ldr	r3, [r7, #24]
 800920a:	1ad3      	subs	r3, r2, r3
 800920c:	2b64      	cmp	r3, #100	; 0x64
 800920e:	d901      	bls.n	8009214 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8009210:	2303      	movs	r3, #3
 8009212:	e1f5      	b.n	8009600 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009214:	4b0b      	ldr	r3, [pc, #44]	; (8009244 <HAL_RCC_OscConfig+0x344>)
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	2380      	movs	r3, #128	; 0x80
 800921a:	005b      	lsls	r3, r3, #1
 800921c:	4013      	ands	r3, r2
 800921e:	d0f0      	beq.n	8009202 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	2b01      	cmp	r3, #1
 8009226:	d10f      	bne.n	8009248 <HAL_RCC_OscConfig+0x348>
 8009228:	4b03      	ldr	r3, [pc, #12]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 800922a:	6a1a      	ldr	r2, [r3, #32]
 800922c:	4b02      	ldr	r3, [pc, #8]	; (8009238 <HAL_RCC_OscConfig+0x338>)
 800922e:	2101      	movs	r1, #1
 8009230:	430a      	orrs	r2, r1
 8009232:	621a      	str	r2, [r3, #32]
 8009234:	e036      	b.n	80092a4 <HAL_RCC_OscConfig+0x3a4>
 8009236:	46c0      	nop			; (mov r8, r8)
 8009238:	40021000 	.word	0x40021000
 800923c:	fffeffff 	.word	0xfffeffff
 8009240:	fffbffff 	.word	0xfffbffff
 8009244:	40007000 	.word	0x40007000
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d10c      	bne.n	800926a <HAL_RCC_OscConfig+0x36a>
 8009250:	4bca      	ldr	r3, [pc, #808]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 8009252:	6a1a      	ldr	r2, [r3, #32]
 8009254:	4bc9      	ldr	r3, [pc, #804]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 8009256:	2101      	movs	r1, #1
 8009258:	438a      	bics	r2, r1
 800925a:	621a      	str	r2, [r3, #32]
 800925c:	4bc7      	ldr	r3, [pc, #796]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 800925e:	6a1a      	ldr	r2, [r3, #32]
 8009260:	4bc6      	ldr	r3, [pc, #792]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 8009262:	2104      	movs	r1, #4
 8009264:	438a      	bics	r2, r1
 8009266:	621a      	str	r2, [r3, #32]
 8009268:	e01c      	b.n	80092a4 <HAL_RCC_OscConfig+0x3a4>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	2b05      	cmp	r3, #5
 8009270:	d10c      	bne.n	800928c <HAL_RCC_OscConfig+0x38c>
 8009272:	4bc2      	ldr	r3, [pc, #776]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 8009274:	6a1a      	ldr	r2, [r3, #32]
 8009276:	4bc1      	ldr	r3, [pc, #772]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 8009278:	2104      	movs	r1, #4
 800927a:	430a      	orrs	r2, r1
 800927c:	621a      	str	r2, [r3, #32]
 800927e:	4bbf      	ldr	r3, [pc, #764]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 8009280:	6a1a      	ldr	r2, [r3, #32]
 8009282:	4bbe      	ldr	r3, [pc, #760]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 8009284:	2101      	movs	r1, #1
 8009286:	430a      	orrs	r2, r1
 8009288:	621a      	str	r2, [r3, #32]
 800928a:	e00b      	b.n	80092a4 <HAL_RCC_OscConfig+0x3a4>
 800928c:	4bbb      	ldr	r3, [pc, #748]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 800928e:	6a1a      	ldr	r2, [r3, #32]
 8009290:	4bba      	ldr	r3, [pc, #744]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 8009292:	2101      	movs	r1, #1
 8009294:	438a      	bics	r2, r1
 8009296:	621a      	str	r2, [r3, #32]
 8009298:	4bb8      	ldr	r3, [pc, #736]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 800929a:	6a1a      	ldr	r2, [r3, #32]
 800929c:	4bb7      	ldr	r3, [pc, #732]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 800929e:	2104      	movs	r1, #4
 80092a0:	438a      	bics	r2, r1
 80092a2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d014      	beq.n	80092d6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80092ac:	f7ff fb46 	bl	800893c <HAL_GetTick>
 80092b0:	0003      	movs	r3, r0
 80092b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092b4:	e009      	b.n	80092ca <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092b6:	f7ff fb41 	bl	800893c <HAL_GetTick>
 80092ba:	0002      	movs	r2, r0
 80092bc:	69bb      	ldr	r3, [r7, #24]
 80092be:	1ad3      	subs	r3, r2, r3
 80092c0:	4aaf      	ldr	r2, [pc, #700]	; (8009580 <HAL_RCC_OscConfig+0x680>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d901      	bls.n	80092ca <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80092c6:	2303      	movs	r3, #3
 80092c8:	e19a      	b.n	8009600 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092ca:	4bac      	ldr	r3, [pc, #688]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 80092cc:	6a1b      	ldr	r3, [r3, #32]
 80092ce:	2202      	movs	r2, #2
 80092d0:	4013      	ands	r3, r2
 80092d2:	d0f0      	beq.n	80092b6 <HAL_RCC_OscConfig+0x3b6>
 80092d4:	e013      	b.n	80092fe <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80092d6:	f7ff fb31 	bl	800893c <HAL_GetTick>
 80092da:	0003      	movs	r3, r0
 80092dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092de:	e009      	b.n	80092f4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092e0:	f7ff fb2c 	bl	800893c <HAL_GetTick>
 80092e4:	0002      	movs	r2, r0
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	1ad3      	subs	r3, r2, r3
 80092ea:	4aa5      	ldr	r2, [pc, #660]	; (8009580 <HAL_RCC_OscConfig+0x680>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d901      	bls.n	80092f4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80092f0:	2303      	movs	r3, #3
 80092f2:	e185      	b.n	8009600 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092f4:	4ba1      	ldr	r3, [pc, #644]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 80092f6:	6a1b      	ldr	r3, [r3, #32]
 80092f8:	2202      	movs	r2, #2
 80092fa:	4013      	ands	r3, r2
 80092fc:	d1f0      	bne.n	80092e0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80092fe:	231f      	movs	r3, #31
 8009300:	18fb      	adds	r3, r7, r3
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	2b01      	cmp	r3, #1
 8009306:	d105      	bne.n	8009314 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009308:	4b9c      	ldr	r3, [pc, #624]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 800930a:	69da      	ldr	r2, [r3, #28]
 800930c:	4b9b      	ldr	r3, [pc, #620]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 800930e:	499d      	ldr	r1, [pc, #628]	; (8009584 <HAL_RCC_OscConfig+0x684>)
 8009310:	400a      	ands	r2, r1
 8009312:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2210      	movs	r2, #16
 800931a:	4013      	ands	r3, r2
 800931c:	d063      	beq.n	80093e6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	695b      	ldr	r3, [r3, #20]
 8009322:	2b01      	cmp	r3, #1
 8009324:	d12a      	bne.n	800937c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8009326:	4b95      	ldr	r3, [pc, #596]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 8009328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800932a:	4b94      	ldr	r3, [pc, #592]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 800932c:	2104      	movs	r1, #4
 800932e:	430a      	orrs	r2, r1
 8009330:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8009332:	4b92      	ldr	r3, [pc, #584]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 8009334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009336:	4b91      	ldr	r3, [pc, #580]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 8009338:	2101      	movs	r1, #1
 800933a:	430a      	orrs	r2, r1
 800933c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800933e:	f7ff fafd 	bl	800893c <HAL_GetTick>
 8009342:	0003      	movs	r3, r0
 8009344:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8009346:	e008      	b.n	800935a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8009348:	f7ff faf8 	bl	800893c <HAL_GetTick>
 800934c:	0002      	movs	r2, r0
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	2b02      	cmp	r3, #2
 8009354:	d901      	bls.n	800935a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8009356:	2303      	movs	r3, #3
 8009358:	e152      	b.n	8009600 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800935a:	4b88      	ldr	r3, [pc, #544]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 800935c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800935e:	2202      	movs	r2, #2
 8009360:	4013      	ands	r3, r2
 8009362:	d0f1      	beq.n	8009348 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8009364:	4b85      	ldr	r3, [pc, #532]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 8009366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009368:	22f8      	movs	r2, #248	; 0xf8
 800936a:	4393      	bics	r3, r2
 800936c:	0019      	movs	r1, r3
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	699b      	ldr	r3, [r3, #24]
 8009372:	00da      	lsls	r2, r3, #3
 8009374:	4b81      	ldr	r3, [pc, #516]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 8009376:	430a      	orrs	r2, r1
 8009378:	635a      	str	r2, [r3, #52]	; 0x34
 800937a:	e034      	b.n	80093e6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	695b      	ldr	r3, [r3, #20]
 8009380:	3305      	adds	r3, #5
 8009382:	d111      	bne.n	80093a8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8009384:	4b7d      	ldr	r3, [pc, #500]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 8009386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009388:	4b7c      	ldr	r3, [pc, #496]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 800938a:	2104      	movs	r1, #4
 800938c:	438a      	bics	r2, r1
 800938e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8009390:	4b7a      	ldr	r3, [pc, #488]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 8009392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009394:	22f8      	movs	r2, #248	; 0xf8
 8009396:	4393      	bics	r3, r2
 8009398:	0019      	movs	r1, r3
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	699b      	ldr	r3, [r3, #24]
 800939e:	00da      	lsls	r2, r3, #3
 80093a0:	4b76      	ldr	r3, [pc, #472]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 80093a2:	430a      	orrs	r2, r1
 80093a4:	635a      	str	r2, [r3, #52]	; 0x34
 80093a6:	e01e      	b.n	80093e6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80093a8:	4b74      	ldr	r3, [pc, #464]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 80093aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093ac:	4b73      	ldr	r3, [pc, #460]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 80093ae:	2104      	movs	r1, #4
 80093b0:	430a      	orrs	r2, r1
 80093b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80093b4:	4b71      	ldr	r3, [pc, #452]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 80093b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093b8:	4b70      	ldr	r3, [pc, #448]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 80093ba:	2101      	movs	r1, #1
 80093bc:	438a      	bics	r2, r1
 80093be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80093c0:	f7ff fabc 	bl	800893c <HAL_GetTick>
 80093c4:	0003      	movs	r3, r0
 80093c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80093c8:	e008      	b.n	80093dc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80093ca:	f7ff fab7 	bl	800893c <HAL_GetTick>
 80093ce:	0002      	movs	r2, r0
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	1ad3      	subs	r3, r2, r3
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	d901      	bls.n	80093dc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80093d8:	2303      	movs	r3, #3
 80093da:	e111      	b.n	8009600 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80093dc:	4b67      	ldr	r3, [pc, #412]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 80093de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e0:	2202      	movs	r2, #2
 80093e2:	4013      	ands	r3, r2
 80093e4:	d1f1      	bne.n	80093ca <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2220      	movs	r2, #32
 80093ec:	4013      	ands	r3, r2
 80093ee:	d05c      	beq.n	80094aa <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80093f0:	4b62      	ldr	r3, [pc, #392]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	220c      	movs	r2, #12
 80093f6:	4013      	ands	r3, r2
 80093f8:	2b0c      	cmp	r3, #12
 80093fa:	d00e      	beq.n	800941a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80093fc:	4b5f      	ldr	r3, [pc, #380]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	220c      	movs	r2, #12
 8009402:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8009404:	2b08      	cmp	r3, #8
 8009406:	d114      	bne.n	8009432 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8009408:	4b5c      	ldr	r3, [pc, #368]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 800940a:	685a      	ldr	r2, [r3, #4]
 800940c:	23c0      	movs	r3, #192	; 0xc0
 800940e:	025b      	lsls	r3, r3, #9
 8009410:	401a      	ands	r2, r3
 8009412:	23c0      	movs	r3, #192	; 0xc0
 8009414:	025b      	lsls	r3, r3, #9
 8009416:	429a      	cmp	r2, r3
 8009418:	d10b      	bne.n	8009432 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800941a:	4b58      	ldr	r3, [pc, #352]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 800941c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800941e:	2380      	movs	r3, #128	; 0x80
 8009420:	025b      	lsls	r3, r3, #9
 8009422:	4013      	ands	r3, r2
 8009424:	d040      	beq.n	80094a8 <HAL_RCC_OscConfig+0x5a8>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6a1b      	ldr	r3, [r3, #32]
 800942a:	2b01      	cmp	r3, #1
 800942c:	d03c      	beq.n	80094a8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	e0e6      	b.n	8009600 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a1b      	ldr	r3, [r3, #32]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d01b      	beq.n	8009472 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800943a:	4b50      	ldr	r3, [pc, #320]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 800943c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800943e:	4b4f      	ldr	r3, [pc, #316]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 8009440:	2180      	movs	r1, #128	; 0x80
 8009442:	0249      	lsls	r1, r1, #9
 8009444:	430a      	orrs	r2, r1
 8009446:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009448:	f7ff fa78 	bl	800893c <HAL_GetTick>
 800944c:	0003      	movs	r3, r0
 800944e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8009450:	e008      	b.n	8009464 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009452:	f7ff fa73 	bl	800893c <HAL_GetTick>
 8009456:	0002      	movs	r2, r0
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	1ad3      	subs	r3, r2, r3
 800945c:	2b02      	cmp	r3, #2
 800945e:	d901      	bls.n	8009464 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8009460:	2303      	movs	r3, #3
 8009462:	e0cd      	b.n	8009600 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8009464:	4b45      	ldr	r3, [pc, #276]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 8009466:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009468:	2380      	movs	r3, #128	; 0x80
 800946a:	025b      	lsls	r3, r3, #9
 800946c:	4013      	ands	r3, r2
 800946e:	d0f0      	beq.n	8009452 <HAL_RCC_OscConfig+0x552>
 8009470:	e01b      	b.n	80094aa <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8009472:	4b42      	ldr	r3, [pc, #264]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 8009474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009476:	4b41      	ldr	r3, [pc, #260]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 8009478:	4943      	ldr	r1, [pc, #268]	; (8009588 <HAL_RCC_OscConfig+0x688>)
 800947a:	400a      	ands	r2, r1
 800947c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800947e:	f7ff fa5d 	bl	800893c <HAL_GetTick>
 8009482:	0003      	movs	r3, r0
 8009484:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8009486:	e008      	b.n	800949a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009488:	f7ff fa58 	bl	800893c <HAL_GetTick>
 800948c:	0002      	movs	r2, r0
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	1ad3      	subs	r3, r2, r3
 8009492:	2b02      	cmp	r3, #2
 8009494:	d901      	bls.n	800949a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8009496:	2303      	movs	r3, #3
 8009498:	e0b2      	b.n	8009600 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800949a:	4b38      	ldr	r3, [pc, #224]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 800949c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800949e:	2380      	movs	r3, #128	; 0x80
 80094a0:	025b      	lsls	r3, r3, #9
 80094a2:	4013      	ands	r3, r2
 80094a4:	d1f0      	bne.n	8009488 <HAL_RCC_OscConfig+0x588>
 80094a6:	e000      	b.n	80094aa <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80094a8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d100      	bne.n	80094b4 <HAL_RCC_OscConfig+0x5b4>
 80094b2:	e0a4      	b.n	80095fe <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80094b4:	4b31      	ldr	r3, [pc, #196]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	220c      	movs	r2, #12
 80094ba:	4013      	ands	r3, r2
 80094bc:	2b08      	cmp	r3, #8
 80094be:	d100      	bne.n	80094c2 <HAL_RCC_OscConfig+0x5c2>
 80094c0:	e078      	b.n	80095b4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	d14c      	bne.n	8009564 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094ca:	4b2c      	ldr	r3, [pc, #176]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	4b2b      	ldr	r3, [pc, #172]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 80094d0:	492e      	ldr	r1, [pc, #184]	; (800958c <HAL_RCC_OscConfig+0x68c>)
 80094d2:	400a      	ands	r2, r1
 80094d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094d6:	f7ff fa31 	bl	800893c <HAL_GetTick>
 80094da:	0003      	movs	r3, r0
 80094dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80094de:	e008      	b.n	80094f2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80094e0:	f7ff fa2c 	bl	800893c <HAL_GetTick>
 80094e4:	0002      	movs	r2, r0
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	2b02      	cmp	r3, #2
 80094ec:	d901      	bls.n	80094f2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80094ee:	2303      	movs	r3, #3
 80094f0:	e086      	b.n	8009600 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80094f2:	4b22      	ldr	r3, [pc, #136]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	2380      	movs	r3, #128	; 0x80
 80094f8:	049b      	lsls	r3, r3, #18
 80094fa:	4013      	ands	r3, r2
 80094fc:	d1f0      	bne.n	80094e0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80094fe:	4b1f      	ldr	r3, [pc, #124]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 8009500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009502:	220f      	movs	r2, #15
 8009504:	4393      	bics	r3, r2
 8009506:	0019      	movs	r1, r3
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800950c:	4b1b      	ldr	r3, [pc, #108]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 800950e:	430a      	orrs	r2, r1
 8009510:	62da      	str	r2, [r3, #44]	; 0x2c
 8009512:	4b1a      	ldr	r3, [pc, #104]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	4a1e      	ldr	r2, [pc, #120]	; (8009590 <HAL_RCC_OscConfig+0x690>)
 8009518:	4013      	ands	r3, r2
 800951a:	0019      	movs	r1, r3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009524:	431a      	orrs	r2, r3
 8009526:	4b15      	ldr	r3, [pc, #84]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 8009528:	430a      	orrs	r2, r1
 800952a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800952c:	4b13      	ldr	r3, [pc, #76]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	4b12      	ldr	r3, [pc, #72]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 8009532:	2180      	movs	r1, #128	; 0x80
 8009534:	0449      	lsls	r1, r1, #17
 8009536:	430a      	orrs	r2, r1
 8009538:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800953a:	f7ff f9ff 	bl	800893c <HAL_GetTick>
 800953e:	0003      	movs	r3, r0
 8009540:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009542:	e008      	b.n	8009556 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009544:	f7ff f9fa 	bl	800893c <HAL_GetTick>
 8009548:	0002      	movs	r2, r0
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	1ad3      	subs	r3, r2, r3
 800954e:	2b02      	cmp	r3, #2
 8009550:	d901      	bls.n	8009556 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8009552:	2303      	movs	r3, #3
 8009554:	e054      	b.n	8009600 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009556:	4b09      	ldr	r3, [pc, #36]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	2380      	movs	r3, #128	; 0x80
 800955c:	049b      	lsls	r3, r3, #18
 800955e:	4013      	ands	r3, r2
 8009560:	d0f0      	beq.n	8009544 <HAL_RCC_OscConfig+0x644>
 8009562:	e04c      	b.n	80095fe <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009564:	4b05      	ldr	r3, [pc, #20]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	4b04      	ldr	r3, [pc, #16]	; (800957c <HAL_RCC_OscConfig+0x67c>)
 800956a:	4908      	ldr	r1, [pc, #32]	; (800958c <HAL_RCC_OscConfig+0x68c>)
 800956c:	400a      	ands	r2, r1
 800956e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009570:	f7ff f9e4 	bl	800893c <HAL_GetTick>
 8009574:	0003      	movs	r3, r0
 8009576:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009578:	e015      	b.n	80095a6 <HAL_RCC_OscConfig+0x6a6>
 800957a:	46c0      	nop			; (mov r8, r8)
 800957c:	40021000 	.word	0x40021000
 8009580:	00001388 	.word	0x00001388
 8009584:	efffffff 	.word	0xefffffff
 8009588:	fffeffff 	.word	0xfffeffff
 800958c:	feffffff 	.word	0xfeffffff
 8009590:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009594:	f7ff f9d2 	bl	800893c <HAL_GetTick>
 8009598:	0002      	movs	r2, r0
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	2b02      	cmp	r3, #2
 80095a0:	d901      	bls.n	80095a6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80095a2:	2303      	movs	r3, #3
 80095a4:	e02c      	b.n	8009600 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80095a6:	4b18      	ldr	r3, [pc, #96]	; (8009608 <HAL_RCC_OscConfig+0x708>)
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	2380      	movs	r3, #128	; 0x80
 80095ac:	049b      	lsls	r3, r3, #18
 80095ae:	4013      	ands	r3, r2
 80095b0:	d1f0      	bne.n	8009594 <HAL_RCC_OscConfig+0x694>
 80095b2:	e024      	b.n	80095fe <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d101      	bne.n	80095c0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	e01f      	b.n	8009600 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80095c0:	4b11      	ldr	r3, [pc, #68]	; (8009608 <HAL_RCC_OscConfig+0x708>)
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80095c6:	4b10      	ldr	r3, [pc, #64]	; (8009608 <HAL_RCC_OscConfig+0x708>)
 80095c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ca:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80095cc:	697a      	ldr	r2, [r7, #20]
 80095ce:	23c0      	movs	r3, #192	; 0xc0
 80095d0:	025b      	lsls	r3, r3, #9
 80095d2:	401a      	ands	r2, r3
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d8:	429a      	cmp	r2, r3
 80095da:	d10e      	bne.n	80095fa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	220f      	movs	r2, #15
 80095e0:	401a      	ands	r2, r3
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d107      	bne.n	80095fa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80095ea:	697a      	ldr	r2, [r7, #20]
 80095ec:	23f0      	movs	r3, #240	; 0xf0
 80095ee:	039b      	lsls	r3, r3, #14
 80095f0:	401a      	ands	r2, r3
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d001      	beq.n	80095fe <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	e000      	b.n	8009600 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80095fe:	2300      	movs	r3, #0
}
 8009600:	0018      	movs	r0, r3
 8009602:	46bd      	mov	sp, r7
 8009604:	b008      	add	sp, #32
 8009606:	bd80      	pop	{r7, pc}
 8009608:	40021000 	.word	0x40021000

0800960c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d101      	bne.n	8009620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800961c:	2301      	movs	r3, #1
 800961e:	e0bf      	b.n	80097a0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009620:	4b61      	ldr	r3, [pc, #388]	; (80097a8 <HAL_RCC_ClockConfig+0x19c>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2201      	movs	r2, #1
 8009626:	4013      	ands	r3, r2
 8009628:	683a      	ldr	r2, [r7, #0]
 800962a:	429a      	cmp	r2, r3
 800962c:	d911      	bls.n	8009652 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800962e:	4b5e      	ldr	r3, [pc, #376]	; (80097a8 <HAL_RCC_ClockConfig+0x19c>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2201      	movs	r2, #1
 8009634:	4393      	bics	r3, r2
 8009636:	0019      	movs	r1, r3
 8009638:	4b5b      	ldr	r3, [pc, #364]	; (80097a8 <HAL_RCC_ClockConfig+0x19c>)
 800963a:	683a      	ldr	r2, [r7, #0]
 800963c:	430a      	orrs	r2, r1
 800963e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009640:	4b59      	ldr	r3, [pc, #356]	; (80097a8 <HAL_RCC_ClockConfig+0x19c>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2201      	movs	r2, #1
 8009646:	4013      	ands	r3, r2
 8009648:	683a      	ldr	r2, [r7, #0]
 800964a:	429a      	cmp	r2, r3
 800964c:	d001      	beq.n	8009652 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	e0a6      	b.n	80097a0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2202      	movs	r2, #2
 8009658:	4013      	ands	r3, r2
 800965a:	d015      	beq.n	8009688 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2204      	movs	r2, #4
 8009662:	4013      	ands	r3, r2
 8009664:	d006      	beq.n	8009674 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8009666:	4b51      	ldr	r3, [pc, #324]	; (80097ac <HAL_RCC_ClockConfig+0x1a0>)
 8009668:	685a      	ldr	r2, [r3, #4]
 800966a:	4b50      	ldr	r3, [pc, #320]	; (80097ac <HAL_RCC_ClockConfig+0x1a0>)
 800966c:	21e0      	movs	r1, #224	; 0xe0
 800966e:	00c9      	lsls	r1, r1, #3
 8009670:	430a      	orrs	r2, r1
 8009672:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009674:	4b4d      	ldr	r3, [pc, #308]	; (80097ac <HAL_RCC_ClockConfig+0x1a0>)
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	22f0      	movs	r2, #240	; 0xf0
 800967a:	4393      	bics	r3, r2
 800967c:	0019      	movs	r1, r3
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	689a      	ldr	r2, [r3, #8]
 8009682:	4b4a      	ldr	r3, [pc, #296]	; (80097ac <HAL_RCC_ClockConfig+0x1a0>)
 8009684:	430a      	orrs	r2, r1
 8009686:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2201      	movs	r2, #1
 800968e:	4013      	ands	r3, r2
 8009690:	d04c      	beq.n	800972c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	2b01      	cmp	r3, #1
 8009698:	d107      	bne.n	80096aa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800969a:	4b44      	ldr	r3, [pc, #272]	; (80097ac <HAL_RCC_ClockConfig+0x1a0>)
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	2380      	movs	r3, #128	; 0x80
 80096a0:	029b      	lsls	r3, r3, #10
 80096a2:	4013      	ands	r3, r2
 80096a4:	d120      	bne.n	80096e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80096a6:	2301      	movs	r3, #1
 80096a8:	e07a      	b.n	80097a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	2b02      	cmp	r3, #2
 80096b0:	d107      	bne.n	80096c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80096b2:	4b3e      	ldr	r3, [pc, #248]	; (80097ac <HAL_RCC_ClockConfig+0x1a0>)
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	2380      	movs	r3, #128	; 0x80
 80096b8:	049b      	lsls	r3, r3, #18
 80096ba:	4013      	ands	r3, r2
 80096bc:	d114      	bne.n	80096e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	e06e      	b.n	80097a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	2b03      	cmp	r3, #3
 80096c8:	d107      	bne.n	80096da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80096ca:	4b38      	ldr	r3, [pc, #224]	; (80097ac <HAL_RCC_ClockConfig+0x1a0>)
 80096cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096ce:	2380      	movs	r3, #128	; 0x80
 80096d0:	025b      	lsls	r3, r3, #9
 80096d2:	4013      	ands	r3, r2
 80096d4:	d108      	bne.n	80096e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	e062      	b.n	80097a0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80096da:	4b34      	ldr	r3, [pc, #208]	; (80097ac <HAL_RCC_ClockConfig+0x1a0>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2202      	movs	r2, #2
 80096e0:	4013      	ands	r3, r2
 80096e2:	d101      	bne.n	80096e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	e05b      	b.n	80097a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80096e8:	4b30      	ldr	r3, [pc, #192]	; (80097ac <HAL_RCC_ClockConfig+0x1a0>)
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	2203      	movs	r2, #3
 80096ee:	4393      	bics	r3, r2
 80096f0:	0019      	movs	r1, r3
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	685a      	ldr	r2, [r3, #4]
 80096f6:	4b2d      	ldr	r3, [pc, #180]	; (80097ac <HAL_RCC_ClockConfig+0x1a0>)
 80096f8:	430a      	orrs	r2, r1
 80096fa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80096fc:	f7ff f91e 	bl	800893c <HAL_GetTick>
 8009700:	0003      	movs	r3, r0
 8009702:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009704:	e009      	b.n	800971a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009706:	f7ff f919 	bl	800893c <HAL_GetTick>
 800970a:	0002      	movs	r2, r0
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	1ad3      	subs	r3, r2, r3
 8009710:	4a27      	ldr	r2, [pc, #156]	; (80097b0 <HAL_RCC_ClockConfig+0x1a4>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d901      	bls.n	800971a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009716:	2303      	movs	r3, #3
 8009718:	e042      	b.n	80097a0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800971a:	4b24      	ldr	r3, [pc, #144]	; (80097ac <HAL_RCC_ClockConfig+0x1a0>)
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	220c      	movs	r2, #12
 8009720:	401a      	ands	r2, r3
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	429a      	cmp	r2, r3
 800972a:	d1ec      	bne.n	8009706 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800972c:	4b1e      	ldr	r3, [pc, #120]	; (80097a8 <HAL_RCC_ClockConfig+0x19c>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2201      	movs	r2, #1
 8009732:	4013      	ands	r3, r2
 8009734:	683a      	ldr	r2, [r7, #0]
 8009736:	429a      	cmp	r2, r3
 8009738:	d211      	bcs.n	800975e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800973a:	4b1b      	ldr	r3, [pc, #108]	; (80097a8 <HAL_RCC_ClockConfig+0x19c>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2201      	movs	r2, #1
 8009740:	4393      	bics	r3, r2
 8009742:	0019      	movs	r1, r3
 8009744:	4b18      	ldr	r3, [pc, #96]	; (80097a8 <HAL_RCC_ClockConfig+0x19c>)
 8009746:	683a      	ldr	r2, [r7, #0]
 8009748:	430a      	orrs	r2, r1
 800974a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800974c:	4b16      	ldr	r3, [pc, #88]	; (80097a8 <HAL_RCC_ClockConfig+0x19c>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2201      	movs	r2, #1
 8009752:	4013      	ands	r3, r2
 8009754:	683a      	ldr	r2, [r7, #0]
 8009756:	429a      	cmp	r2, r3
 8009758:	d001      	beq.n	800975e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e020      	b.n	80097a0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2204      	movs	r2, #4
 8009764:	4013      	ands	r3, r2
 8009766:	d009      	beq.n	800977c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8009768:	4b10      	ldr	r3, [pc, #64]	; (80097ac <HAL_RCC_ClockConfig+0x1a0>)
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	4a11      	ldr	r2, [pc, #68]	; (80097b4 <HAL_RCC_ClockConfig+0x1a8>)
 800976e:	4013      	ands	r3, r2
 8009770:	0019      	movs	r1, r3
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	68da      	ldr	r2, [r3, #12]
 8009776:	4b0d      	ldr	r3, [pc, #52]	; (80097ac <HAL_RCC_ClockConfig+0x1a0>)
 8009778:	430a      	orrs	r2, r1
 800977a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800977c:	f000 f820 	bl	80097c0 <HAL_RCC_GetSysClockFreq>
 8009780:	0001      	movs	r1, r0
 8009782:	4b0a      	ldr	r3, [pc, #40]	; (80097ac <HAL_RCC_ClockConfig+0x1a0>)
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	091b      	lsrs	r3, r3, #4
 8009788:	220f      	movs	r2, #15
 800978a:	4013      	ands	r3, r2
 800978c:	4a0a      	ldr	r2, [pc, #40]	; (80097b8 <HAL_RCC_ClockConfig+0x1ac>)
 800978e:	5cd3      	ldrb	r3, [r2, r3]
 8009790:	000a      	movs	r2, r1
 8009792:	40da      	lsrs	r2, r3
 8009794:	4b09      	ldr	r3, [pc, #36]	; (80097bc <HAL_RCC_ClockConfig+0x1b0>)
 8009796:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8009798:	2000      	movs	r0, #0
 800979a:	f7ff f889 	bl	80088b0 <HAL_InitTick>
  
  return HAL_OK;
 800979e:	2300      	movs	r3, #0
}
 80097a0:	0018      	movs	r0, r3
 80097a2:	46bd      	mov	sp, r7
 80097a4:	b004      	add	sp, #16
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	40022000 	.word	0x40022000
 80097ac:	40021000 	.word	0x40021000
 80097b0:	00001388 	.word	0x00001388
 80097b4:	fffff8ff 	.word	0xfffff8ff
 80097b8:	0800af28 	.word	0x0800af28
 80097bc:	200000c0 	.word	0x200000c0

080097c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80097c0:	b590      	push	{r4, r7, lr}
 80097c2:	b08f      	sub	sp, #60	; 0x3c
 80097c4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80097c6:	2314      	movs	r3, #20
 80097c8:	18fb      	adds	r3, r7, r3
 80097ca:	4a38      	ldr	r2, [pc, #224]	; (80098ac <HAL_RCC_GetSysClockFreq+0xec>)
 80097cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80097ce:	c313      	stmia	r3!, {r0, r1, r4}
 80097d0:	6812      	ldr	r2, [r2, #0]
 80097d2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80097d4:	1d3b      	adds	r3, r7, #4
 80097d6:	4a36      	ldr	r2, [pc, #216]	; (80098b0 <HAL_RCC_GetSysClockFreq+0xf0>)
 80097d8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80097da:	c313      	stmia	r3!, {r0, r1, r4}
 80097dc:	6812      	ldr	r2, [r2, #0]
 80097de:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80097e0:	2300      	movs	r3, #0
 80097e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097e4:	2300      	movs	r3, #0
 80097e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80097e8:	2300      	movs	r3, #0
 80097ea:	637b      	str	r3, [r7, #52]	; 0x34
 80097ec:	2300      	movs	r3, #0
 80097ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80097f0:	2300      	movs	r3, #0
 80097f2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80097f4:	4b2f      	ldr	r3, [pc, #188]	; (80098b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80097fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097fc:	220c      	movs	r2, #12
 80097fe:	4013      	ands	r3, r2
 8009800:	2b0c      	cmp	r3, #12
 8009802:	d047      	beq.n	8009894 <HAL_RCC_GetSysClockFreq+0xd4>
 8009804:	d849      	bhi.n	800989a <HAL_RCC_GetSysClockFreq+0xda>
 8009806:	2b04      	cmp	r3, #4
 8009808:	d002      	beq.n	8009810 <HAL_RCC_GetSysClockFreq+0x50>
 800980a:	2b08      	cmp	r3, #8
 800980c:	d003      	beq.n	8009816 <HAL_RCC_GetSysClockFreq+0x56>
 800980e:	e044      	b.n	800989a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009810:	4b29      	ldr	r3, [pc, #164]	; (80098b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009812:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8009814:	e044      	b.n	80098a0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8009816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009818:	0c9b      	lsrs	r3, r3, #18
 800981a:	220f      	movs	r2, #15
 800981c:	4013      	ands	r3, r2
 800981e:	2214      	movs	r2, #20
 8009820:	18ba      	adds	r2, r7, r2
 8009822:	5cd3      	ldrb	r3, [r2, r3]
 8009824:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8009826:	4b23      	ldr	r3, [pc, #140]	; (80098b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8009828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982a:	220f      	movs	r2, #15
 800982c:	4013      	ands	r3, r2
 800982e:	1d3a      	adds	r2, r7, #4
 8009830:	5cd3      	ldrb	r3, [r2, r3]
 8009832:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009836:	23c0      	movs	r3, #192	; 0xc0
 8009838:	025b      	lsls	r3, r3, #9
 800983a:	401a      	ands	r2, r3
 800983c:	2380      	movs	r3, #128	; 0x80
 800983e:	025b      	lsls	r3, r3, #9
 8009840:	429a      	cmp	r2, r3
 8009842:	d109      	bne.n	8009858 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8009844:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009846:	481c      	ldr	r0, [pc, #112]	; (80098b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009848:	f7fe fc5c 	bl	8008104 <__udivsi3>
 800984c:	0003      	movs	r3, r0
 800984e:	001a      	movs	r2, r3
 8009850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009852:	4353      	muls	r3, r2
 8009854:	637b      	str	r3, [r7, #52]	; 0x34
 8009856:	e01a      	b.n	800988e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8009858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800985a:	23c0      	movs	r3, #192	; 0xc0
 800985c:	025b      	lsls	r3, r3, #9
 800985e:	401a      	ands	r2, r3
 8009860:	23c0      	movs	r3, #192	; 0xc0
 8009862:	025b      	lsls	r3, r3, #9
 8009864:	429a      	cmp	r2, r3
 8009866:	d109      	bne.n	800987c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8009868:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800986a:	4814      	ldr	r0, [pc, #80]	; (80098bc <HAL_RCC_GetSysClockFreq+0xfc>)
 800986c:	f7fe fc4a 	bl	8008104 <__udivsi3>
 8009870:	0003      	movs	r3, r0
 8009872:	001a      	movs	r2, r3
 8009874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009876:	4353      	muls	r3, r2
 8009878:	637b      	str	r3, [r7, #52]	; 0x34
 800987a:	e008      	b.n	800988e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800987c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800987e:	480e      	ldr	r0, [pc, #56]	; (80098b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009880:	f7fe fc40 	bl	8008104 <__udivsi3>
 8009884:	0003      	movs	r3, r0
 8009886:	001a      	movs	r2, r3
 8009888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988a:	4353      	muls	r3, r2
 800988c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800988e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009890:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8009892:	e005      	b.n	80098a0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8009894:	4b09      	ldr	r3, [pc, #36]	; (80098bc <HAL_RCC_GetSysClockFreq+0xfc>)
 8009896:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8009898:	e002      	b.n	80098a0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800989a:	4b07      	ldr	r3, [pc, #28]	; (80098b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800989c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800989e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80098a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80098a2:	0018      	movs	r0, r3
 80098a4:	46bd      	mov	sp, r7
 80098a6:	b00f      	add	sp, #60	; 0x3c
 80098a8:	bd90      	pop	{r4, r7, pc}
 80098aa:	46c0      	nop			; (mov r8, r8)
 80098ac:	0800af08 	.word	0x0800af08
 80098b0:	0800af18 	.word	0x0800af18
 80098b4:	40021000 	.word	0x40021000
 80098b8:	007a1200 	.word	0x007a1200
 80098bc:	02dc6c00 	.word	0x02dc6c00

080098c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80098c4:	4b02      	ldr	r3, [pc, #8]	; (80098d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80098c6:	681b      	ldr	r3, [r3, #0]
}
 80098c8:	0018      	movs	r0, r3
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	46c0      	nop			; (mov r8, r8)
 80098d0:	200000c0 	.word	0x200000c0

080098d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80098d8:	f7ff fff2 	bl	80098c0 <HAL_RCC_GetHCLKFreq>
 80098dc:	0001      	movs	r1, r0
 80098de:	4b06      	ldr	r3, [pc, #24]	; (80098f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	0a1b      	lsrs	r3, r3, #8
 80098e4:	2207      	movs	r2, #7
 80098e6:	4013      	ands	r3, r2
 80098e8:	4a04      	ldr	r2, [pc, #16]	; (80098fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80098ea:	5cd3      	ldrb	r3, [r2, r3]
 80098ec:	40d9      	lsrs	r1, r3
 80098ee:	000b      	movs	r3, r1
}    
 80098f0:	0018      	movs	r0, r3
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	46c0      	nop			; (mov r8, r8)
 80098f8:	40021000 	.word	0x40021000
 80098fc:	0800af38 	.word	0x0800af38

08009900 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b086      	sub	sp, #24
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009908:	2300      	movs	r3, #0
 800990a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800990c:	2300      	movs	r3, #0
 800990e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	2380      	movs	r3, #128	; 0x80
 8009916:	025b      	lsls	r3, r3, #9
 8009918:	4013      	ands	r3, r2
 800991a:	d100      	bne.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800991c:	e08e      	b.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800991e:	2017      	movs	r0, #23
 8009920:	183b      	adds	r3, r7, r0
 8009922:	2200      	movs	r2, #0
 8009924:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009926:	4b6e      	ldr	r3, [pc, #440]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009928:	69da      	ldr	r2, [r3, #28]
 800992a:	2380      	movs	r3, #128	; 0x80
 800992c:	055b      	lsls	r3, r3, #21
 800992e:	4013      	ands	r3, r2
 8009930:	d110      	bne.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009932:	4b6b      	ldr	r3, [pc, #428]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009934:	69da      	ldr	r2, [r3, #28]
 8009936:	4b6a      	ldr	r3, [pc, #424]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009938:	2180      	movs	r1, #128	; 0x80
 800993a:	0549      	lsls	r1, r1, #21
 800993c:	430a      	orrs	r2, r1
 800993e:	61da      	str	r2, [r3, #28]
 8009940:	4b67      	ldr	r3, [pc, #412]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009942:	69da      	ldr	r2, [r3, #28]
 8009944:	2380      	movs	r3, #128	; 0x80
 8009946:	055b      	lsls	r3, r3, #21
 8009948:	4013      	ands	r3, r2
 800994a:	60bb      	str	r3, [r7, #8]
 800994c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800994e:	183b      	adds	r3, r7, r0
 8009950:	2201      	movs	r2, #1
 8009952:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009954:	4b63      	ldr	r3, [pc, #396]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009956:	681a      	ldr	r2, [r3, #0]
 8009958:	2380      	movs	r3, #128	; 0x80
 800995a:	005b      	lsls	r3, r3, #1
 800995c:	4013      	ands	r3, r2
 800995e:	d11a      	bne.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009960:	4b60      	ldr	r3, [pc, #384]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	4b5f      	ldr	r3, [pc, #380]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009966:	2180      	movs	r1, #128	; 0x80
 8009968:	0049      	lsls	r1, r1, #1
 800996a:	430a      	orrs	r2, r1
 800996c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800996e:	f7fe ffe5 	bl	800893c <HAL_GetTick>
 8009972:	0003      	movs	r3, r0
 8009974:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009976:	e008      	b.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009978:	f7fe ffe0 	bl	800893c <HAL_GetTick>
 800997c:	0002      	movs	r2, r0
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	1ad3      	subs	r3, r2, r3
 8009982:	2b64      	cmp	r3, #100	; 0x64
 8009984:	d901      	bls.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8009986:	2303      	movs	r3, #3
 8009988:	e0a6      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800998a:	4b56      	ldr	r3, [pc, #344]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	2380      	movs	r3, #128	; 0x80
 8009990:	005b      	lsls	r3, r3, #1
 8009992:	4013      	ands	r3, r2
 8009994:	d0f0      	beq.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009996:	4b52      	ldr	r3, [pc, #328]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009998:	6a1a      	ldr	r2, [r3, #32]
 800999a:	23c0      	movs	r3, #192	; 0xc0
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	4013      	ands	r3, r2
 80099a0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d034      	beq.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	685a      	ldr	r2, [r3, #4]
 80099ac:	23c0      	movs	r3, #192	; 0xc0
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	4013      	ands	r3, r2
 80099b2:	68fa      	ldr	r2, [r7, #12]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d02c      	beq.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80099b8:	4b49      	ldr	r3, [pc, #292]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80099ba:	6a1b      	ldr	r3, [r3, #32]
 80099bc:	4a4a      	ldr	r2, [pc, #296]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80099be:	4013      	ands	r3, r2
 80099c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80099c2:	4b47      	ldr	r3, [pc, #284]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80099c4:	6a1a      	ldr	r2, [r3, #32]
 80099c6:	4b46      	ldr	r3, [pc, #280]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80099c8:	2180      	movs	r1, #128	; 0x80
 80099ca:	0249      	lsls	r1, r1, #9
 80099cc:	430a      	orrs	r2, r1
 80099ce:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80099d0:	4b43      	ldr	r3, [pc, #268]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80099d2:	6a1a      	ldr	r2, [r3, #32]
 80099d4:	4b42      	ldr	r3, [pc, #264]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80099d6:	4945      	ldr	r1, [pc, #276]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80099d8:	400a      	ands	r2, r1
 80099da:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80099dc:	4b40      	ldr	r3, [pc, #256]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80099de:	68fa      	ldr	r2, [r7, #12]
 80099e0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2201      	movs	r2, #1
 80099e6:	4013      	ands	r3, r2
 80099e8:	d013      	beq.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099ea:	f7fe ffa7 	bl	800893c <HAL_GetTick>
 80099ee:	0003      	movs	r3, r0
 80099f0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099f2:	e009      	b.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099f4:	f7fe ffa2 	bl	800893c <HAL_GetTick>
 80099f8:	0002      	movs	r2, r0
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	1ad3      	subs	r3, r2, r3
 80099fe:	4a3c      	ldr	r2, [pc, #240]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d901      	bls.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8009a04:	2303      	movs	r3, #3
 8009a06:	e067      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a08:	4b35      	ldr	r3, [pc, #212]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009a0a:	6a1b      	ldr	r3, [r3, #32]
 8009a0c:	2202      	movs	r2, #2
 8009a0e:	4013      	ands	r3, r2
 8009a10:	d0f0      	beq.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009a12:	4b33      	ldr	r3, [pc, #204]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009a14:	6a1b      	ldr	r3, [r3, #32]
 8009a16:	4a34      	ldr	r2, [pc, #208]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8009a18:	4013      	ands	r3, r2
 8009a1a:	0019      	movs	r1, r3
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	685a      	ldr	r2, [r3, #4]
 8009a20:	4b2f      	ldr	r3, [pc, #188]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009a22:	430a      	orrs	r2, r1
 8009a24:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009a26:	2317      	movs	r3, #23
 8009a28:	18fb      	adds	r3, r7, r3
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d105      	bne.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a30:	4b2b      	ldr	r3, [pc, #172]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009a32:	69da      	ldr	r2, [r3, #28]
 8009a34:	4b2a      	ldr	r3, [pc, #168]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009a36:	492f      	ldr	r1, [pc, #188]	; (8009af4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8009a38:	400a      	ands	r2, r1
 8009a3a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2201      	movs	r2, #1
 8009a42:	4013      	ands	r3, r2
 8009a44:	d009      	beq.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009a46:	4b26      	ldr	r3, [pc, #152]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a4a:	2203      	movs	r2, #3
 8009a4c:	4393      	bics	r3, r2
 8009a4e:	0019      	movs	r1, r3
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	689a      	ldr	r2, [r3, #8]
 8009a54:	4b22      	ldr	r3, [pc, #136]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009a56:	430a      	orrs	r2, r1
 8009a58:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	2202      	movs	r2, #2
 8009a60:	4013      	ands	r3, r2
 8009a62:	d009      	beq.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009a64:	4b1e      	ldr	r3, [pc, #120]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a68:	4a23      	ldr	r2, [pc, #140]	; (8009af8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009a6a:	4013      	ands	r3, r2
 8009a6c:	0019      	movs	r1, r3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	68da      	ldr	r2, [r3, #12]
 8009a72:	4b1b      	ldr	r3, [pc, #108]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009a74:	430a      	orrs	r2, r1
 8009a76:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	2380      	movs	r3, #128	; 0x80
 8009a7e:	02db      	lsls	r3, r3, #11
 8009a80:	4013      	ands	r3, r2
 8009a82:	d009      	beq.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009a84:	4b16      	ldr	r3, [pc, #88]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a88:	4a1c      	ldr	r2, [pc, #112]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8009a8a:	4013      	ands	r3, r2
 8009a8c:	0019      	movs	r1, r3
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	691a      	ldr	r2, [r3, #16]
 8009a92:	4b13      	ldr	r3, [pc, #76]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009a94:	430a      	orrs	r2, r1
 8009a96:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2220      	movs	r2, #32
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	d009      	beq.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009aa2:	4b0f      	ldr	r3, [pc, #60]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aa6:	2210      	movs	r2, #16
 8009aa8:	4393      	bics	r3, r2
 8009aaa:	0019      	movs	r1, r3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	695a      	ldr	r2, [r3, #20]
 8009ab0:	4b0b      	ldr	r3, [pc, #44]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009ab2:	430a      	orrs	r2, r1
 8009ab4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	2380      	movs	r3, #128	; 0x80
 8009abc:	00db      	lsls	r3, r3, #3
 8009abe:	4013      	ands	r3, r2
 8009ac0:	d009      	beq.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009ac2:	4b07      	ldr	r3, [pc, #28]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ac6:	2240      	movs	r2, #64	; 0x40
 8009ac8:	4393      	bics	r3, r2
 8009aca:	0019      	movs	r1, r3
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	699a      	ldr	r2, [r3, #24]
 8009ad0:	4b03      	ldr	r3, [pc, #12]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009ad2:	430a      	orrs	r2, r1
 8009ad4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8009ad6:	2300      	movs	r3, #0
}
 8009ad8:	0018      	movs	r0, r3
 8009ada:	46bd      	mov	sp, r7
 8009adc:	b006      	add	sp, #24
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	40021000 	.word	0x40021000
 8009ae4:	40007000 	.word	0x40007000
 8009ae8:	fffffcff 	.word	0xfffffcff
 8009aec:	fffeffff 	.word	0xfffeffff
 8009af0:	00001388 	.word	0x00001388
 8009af4:	efffffff 	.word	0xefffffff
 8009af8:	fffcffff 	.word	0xfffcffff
 8009afc:	fff3ffff 	.word	0xfff3ffff

08009b00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d101      	bne.n	8009b12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	e044      	b.n	8009b9c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d107      	bne.n	8009b2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2274      	movs	r2, #116	; 0x74
 8009b1e:	2100      	movs	r1, #0
 8009b20:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	0018      	movs	r0, r3
 8009b26:	f7fe fd51 	bl	80085cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2224      	movs	r2, #36	; 0x24
 8009b2e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	2101      	movs	r1, #1
 8009b3c:	438a      	bics	r2, r1
 8009b3e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	0018      	movs	r0, r3
 8009b44:	f000 f8da 	bl	8009cfc <UART_SetConfig>
 8009b48:	0003      	movs	r3, r0
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d101      	bne.n	8009b52 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e024      	b.n	8009b9c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d003      	beq.n	8009b62 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	0018      	movs	r0, r3
 8009b5e:	f000 fab5 	bl	800a0cc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	685a      	ldr	r2, [r3, #4]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	490d      	ldr	r1, [pc, #52]	; (8009ba4 <HAL_UART_Init+0xa4>)
 8009b6e:	400a      	ands	r2, r1
 8009b70:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	689a      	ldr	r2, [r3, #8]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	212a      	movs	r1, #42	; 0x2a
 8009b7e:	438a      	bics	r2, r1
 8009b80:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2101      	movs	r1, #1
 8009b8e:	430a      	orrs	r2, r1
 8009b90:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	0018      	movs	r0, r3
 8009b96:	f000 fb4d 	bl	800a234 <UART_CheckIdleState>
 8009b9a:	0003      	movs	r3, r0
}
 8009b9c:	0018      	movs	r0, r3
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	b002      	add	sp, #8
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	ffffb7ff 	.word	0xffffb7ff

08009ba8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b08a      	sub	sp, #40	; 0x28
 8009bac:	af02      	add	r7, sp, #8
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	60b9      	str	r1, [r7, #8]
 8009bb2:	603b      	str	r3, [r7, #0]
 8009bb4:	1dbb      	adds	r3, r7, #6
 8009bb6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bbc:	2b20      	cmp	r3, #32
 8009bbe:	d000      	beq.n	8009bc2 <HAL_UART_Transmit+0x1a>
 8009bc0:	e096      	b.n	8009cf0 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d003      	beq.n	8009bd0 <HAL_UART_Transmit+0x28>
 8009bc8:	1dbb      	adds	r3, r7, #6
 8009bca:	881b      	ldrh	r3, [r3, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d101      	bne.n	8009bd4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	e08e      	b.n	8009cf2 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	689a      	ldr	r2, [r3, #8]
 8009bd8:	2380      	movs	r3, #128	; 0x80
 8009bda:	015b      	lsls	r3, r3, #5
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d109      	bne.n	8009bf4 <HAL_UART_Transmit+0x4c>
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d105      	bne.n	8009bf4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	2201      	movs	r2, #1
 8009bec:	4013      	ands	r3, r2
 8009bee:	d001      	beq.n	8009bf4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e07e      	b.n	8009cf2 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2274      	movs	r2, #116	; 0x74
 8009bf8:	5c9b      	ldrb	r3, [r3, r2]
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d101      	bne.n	8009c02 <HAL_UART_Transmit+0x5a>
 8009bfe:	2302      	movs	r3, #2
 8009c00:	e077      	b.n	8009cf2 <HAL_UART_Transmit+0x14a>
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2274      	movs	r2, #116	; 0x74
 8009c06:	2101      	movs	r1, #1
 8009c08:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2280      	movs	r2, #128	; 0x80
 8009c0e:	2100      	movs	r1, #0
 8009c10:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2221      	movs	r2, #33	; 0x21
 8009c16:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c18:	f7fe fe90 	bl	800893c <HAL_GetTick>
 8009c1c:	0003      	movs	r3, r0
 8009c1e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	1dba      	adds	r2, r7, #6
 8009c24:	2150      	movs	r1, #80	; 0x50
 8009c26:	8812      	ldrh	r2, [r2, #0]
 8009c28:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	1dba      	adds	r2, r7, #6
 8009c2e:	2152      	movs	r1, #82	; 0x52
 8009c30:	8812      	ldrh	r2, [r2, #0]
 8009c32:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	689a      	ldr	r2, [r3, #8]
 8009c38:	2380      	movs	r3, #128	; 0x80
 8009c3a:	015b      	lsls	r3, r3, #5
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d108      	bne.n	8009c52 <HAL_UART_Transmit+0xaa>
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	691b      	ldr	r3, [r3, #16]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d104      	bne.n	8009c52 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	61bb      	str	r3, [r7, #24]
 8009c50:	e003      	b.n	8009c5a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c56:	2300      	movs	r3, #0
 8009c58:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2274      	movs	r2, #116	; 0x74
 8009c5e:	2100      	movs	r1, #0
 8009c60:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8009c62:	e02d      	b.n	8009cc0 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c64:	697a      	ldr	r2, [r7, #20]
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	9300      	str	r3, [sp, #0]
 8009c6c:	0013      	movs	r3, r2
 8009c6e:	2200      	movs	r2, #0
 8009c70:	2180      	movs	r1, #128	; 0x80
 8009c72:	f000 fb27 	bl	800a2c4 <UART_WaitOnFlagUntilTimeout>
 8009c76:	1e03      	subs	r3, r0, #0
 8009c78:	d001      	beq.n	8009c7e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8009c7a:	2303      	movs	r3, #3
 8009c7c:	e039      	b.n	8009cf2 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d10b      	bne.n	8009c9c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	881a      	ldrh	r2, [r3, #0]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	05d2      	lsls	r2, r2, #23
 8009c8e:	0dd2      	lsrs	r2, r2, #23
 8009c90:	b292      	uxth	r2, r2
 8009c92:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	3302      	adds	r3, #2
 8009c98:	61bb      	str	r3, [r7, #24]
 8009c9a:	e008      	b.n	8009cae <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	781a      	ldrb	r2, [r3, #0]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	b292      	uxth	r2, r2
 8009ca6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	3301      	adds	r3, #1
 8009cac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2252      	movs	r2, #82	; 0x52
 8009cb2:	5a9b      	ldrh	r3, [r3, r2]
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	3b01      	subs	r3, #1
 8009cb8:	b299      	uxth	r1, r3
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2252      	movs	r2, #82	; 0x52
 8009cbe:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2252      	movs	r2, #82	; 0x52
 8009cc4:	5a9b      	ldrh	r3, [r3, r2]
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d1cb      	bne.n	8009c64 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009ccc:	697a      	ldr	r2, [r7, #20]
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	9300      	str	r3, [sp, #0]
 8009cd4:	0013      	movs	r3, r2
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	2140      	movs	r1, #64	; 0x40
 8009cda:	f000 faf3 	bl	800a2c4 <UART_WaitOnFlagUntilTimeout>
 8009cde:	1e03      	subs	r3, r0, #0
 8009ce0:	d001      	beq.n	8009ce6 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8009ce2:	2303      	movs	r3, #3
 8009ce4:	e005      	b.n	8009cf2 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2220      	movs	r2, #32
 8009cea:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009cec:	2300      	movs	r3, #0
 8009cee:	e000      	b.n	8009cf2 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8009cf0:	2302      	movs	r3, #2
  }
}
 8009cf2:	0018      	movs	r0, r3
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	b008      	add	sp, #32
 8009cf8:	bd80      	pop	{r7, pc}
	...

08009cfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b088      	sub	sp, #32
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009d04:	231e      	movs	r3, #30
 8009d06:	18fb      	adds	r3, r7, r3
 8009d08:	2200      	movs	r2, #0
 8009d0a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	689a      	ldr	r2, [r3, #8]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	691b      	ldr	r3, [r3, #16]
 8009d14:	431a      	orrs	r2, r3
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	695b      	ldr	r3, [r3, #20]
 8009d1a:	431a      	orrs	r2, r3
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	69db      	ldr	r3, [r3, #28]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4abe      	ldr	r2, [pc, #760]	; (800a024 <UART_SetConfig+0x328>)
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	0019      	movs	r1, r3
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	697a      	ldr	r2, [r7, #20]
 8009d36:	430a      	orrs	r2, r1
 8009d38:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	4ab9      	ldr	r2, [pc, #740]	; (800a028 <UART_SetConfig+0x32c>)
 8009d42:	4013      	ands	r3, r2
 8009d44:	0019      	movs	r1, r3
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	68da      	ldr	r2, [r3, #12]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	430a      	orrs	r2, r1
 8009d50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	699b      	ldr	r3, [r3, #24]
 8009d56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6a1b      	ldr	r3, [r3, #32]
 8009d5c:	697a      	ldr	r2, [r7, #20]
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	689b      	ldr	r3, [r3, #8]
 8009d68:	4ab0      	ldr	r2, [pc, #704]	; (800a02c <UART_SetConfig+0x330>)
 8009d6a:	4013      	ands	r3, r2
 8009d6c:	0019      	movs	r1, r3
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	697a      	ldr	r2, [r7, #20]
 8009d74:	430a      	orrs	r2, r1
 8009d76:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4aac      	ldr	r2, [pc, #688]	; (800a030 <UART_SetConfig+0x334>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d127      	bne.n	8009dd2 <UART_SetConfig+0xd6>
 8009d82:	4bac      	ldr	r3, [pc, #688]	; (800a034 <UART_SetConfig+0x338>)
 8009d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d86:	2203      	movs	r2, #3
 8009d88:	4013      	ands	r3, r2
 8009d8a:	2b03      	cmp	r3, #3
 8009d8c:	d00d      	beq.n	8009daa <UART_SetConfig+0xae>
 8009d8e:	d81b      	bhi.n	8009dc8 <UART_SetConfig+0xcc>
 8009d90:	2b02      	cmp	r3, #2
 8009d92:	d014      	beq.n	8009dbe <UART_SetConfig+0xc2>
 8009d94:	d818      	bhi.n	8009dc8 <UART_SetConfig+0xcc>
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d002      	beq.n	8009da0 <UART_SetConfig+0xa4>
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d00a      	beq.n	8009db4 <UART_SetConfig+0xb8>
 8009d9e:	e013      	b.n	8009dc8 <UART_SetConfig+0xcc>
 8009da0:	231f      	movs	r3, #31
 8009da2:	18fb      	adds	r3, r7, r3
 8009da4:	2200      	movs	r2, #0
 8009da6:	701a      	strb	r2, [r3, #0]
 8009da8:	e0bd      	b.n	8009f26 <UART_SetConfig+0x22a>
 8009daa:	231f      	movs	r3, #31
 8009dac:	18fb      	adds	r3, r7, r3
 8009dae:	2202      	movs	r2, #2
 8009db0:	701a      	strb	r2, [r3, #0]
 8009db2:	e0b8      	b.n	8009f26 <UART_SetConfig+0x22a>
 8009db4:	231f      	movs	r3, #31
 8009db6:	18fb      	adds	r3, r7, r3
 8009db8:	2204      	movs	r2, #4
 8009dba:	701a      	strb	r2, [r3, #0]
 8009dbc:	e0b3      	b.n	8009f26 <UART_SetConfig+0x22a>
 8009dbe:	231f      	movs	r3, #31
 8009dc0:	18fb      	adds	r3, r7, r3
 8009dc2:	2208      	movs	r2, #8
 8009dc4:	701a      	strb	r2, [r3, #0]
 8009dc6:	e0ae      	b.n	8009f26 <UART_SetConfig+0x22a>
 8009dc8:	231f      	movs	r3, #31
 8009dca:	18fb      	adds	r3, r7, r3
 8009dcc:	2210      	movs	r2, #16
 8009dce:	701a      	strb	r2, [r3, #0]
 8009dd0:	e0a9      	b.n	8009f26 <UART_SetConfig+0x22a>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a98      	ldr	r2, [pc, #608]	; (800a038 <UART_SetConfig+0x33c>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d134      	bne.n	8009e46 <UART_SetConfig+0x14a>
 8009ddc:	4b95      	ldr	r3, [pc, #596]	; (800a034 <UART_SetConfig+0x338>)
 8009dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009de0:	23c0      	movs	r3, #192	; 0xc0
 8009de2:	029b      	lsls	r3, r3, #10
 8009de4:	4013      	ands	r3, r2
 8009de6:	22c0      	movs	r2, #192	; 0xc0
 8009de8:	0292      	lsls	r2, r2, #10
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d017      	beq.n	8009e1e <UART_SetConfig+0x122>
 8009dee:	22c0      	movs	r2, #192	; 0xc0
 8009df0:	0292      	lsls	r2, r2, #10
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d822      	bhi.n	8009e3c <UART_SetConfig+0x140>
 8009df6:	2280      	movs	r2, #128	; 0x80
 8009df8:	0292      	lsls	r2, r2, #10
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d019      	beq.n	8009e32 <UART_SetConfig+0x136>
 8009dfe:	2280      	movs	r2, #128	; 0x80
 8009e00:	0292      	lsls	r2, r2, #10
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d81a      	bhi.n	8009e3c <UART_SetConfig+0x140>
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d004      	beq.n	8009e14 <UART_SetConfig+0x118>
 8009e0a:	2280      	movs	r2, #128	; 0x80
 8009e0c:	0252      	lsls	r2, r2, #9
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d00a      	beq.n	8009e28 <UART_SetConfig+0x12c>
 8009e12:	e013      	b.n	8009e3c <UART_SetConfig+0x140>
 8009e14:	231f      	movs	r3, #31
 8009e16:	18fb      	adds	r3, r7, r3
 8009e18:	2200      	movs	r2, #0
 8009e1a:	701a      	strb	r2, [r3, #0]
 8009e1c:	e083      	b.n	8009f26 <UART_SetConfig+0x22a>
 8009e1e:	231f      	movs	r3, #31
 8009e20:	18fb      	adds	r3, r7, r3
 8009e22:	2202      	movs	r2, #2
 8009e24:	701a      	strb	r2, [r3, #0]
 8009e26:	e07e      	b.n	8009f26 <UART_SetConfig+0x22a>
 8009e28:	231f      	movs	r3, #31
 8009e2a:	18fb      	adds	r3, r7, r3
 8009e2c:	2204      	movs	r2, #4
 8009e2e:	701a      	strb	r2, [r3, #0]
 8009e30:	e079      	b.n	8009f26 <UART_SetConfig+0x22a>
 8009e32:	231f      	movs	r3, #31
 8009e34:	18fb      	adds	r3, r7, r3
 8009e36:	2208      	movs	r2, #8
 8009e38:	701a      	strb	r2, [r3, #0]
 8009e3a:	e074      	b.n	8009f26 <UART_SetConfig+0x22a>
 8009e3c:	231f      	movs	r3, #31
 8009e3e:	18fb      	adds	r3, r7, r3
 8009e40:	2210      	movs	r2, #16
 8009e42:	701a      	strb	r2, [r3, #0]
 8009e44:	e06f      	b.n	8009f26 <UART_SetConfig+0x22a>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a7c      	ldr	r2, [pc, #496]	; (800a03c <UART_SetConfig+0x340>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d134      	bne.n	8009eba <UART_SetConfig+0x1be>
 8009e50:	4b78      	ldr	r3, [pc, #480]	; (800a034 <UART_SetConfig+0x338>)
 8009e52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e54:	23c0      	movs	r3, #192	; 0xc0
 8009e56:	031b      	lsls	r3, r3, #12
 8009e58:	4013      	ands	r3, r2
 8009e5a:	22c0      	movs	r2, #192	; 0xc0
 8009e5c:	0312      	lsls	r2, r2, #12
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d017      	beq.n	8009e92 <UART_SetConfig+0x196>
 8009e62:	22c0      	movs	r2, #192	; 0xc0
 8009e64:	0312      	lsls	r2, r2, #12
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d822      	bhi.n	8009eb0 <UART_SetConfig+0x1b4>
 8009e6a:	2280      	movs	r2, #128	; 0x80
 8009e6c:	0312      	lsls	r2, r2, #12
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d019      	beq.n	8009ea6 <UART_SetConfig+0x1aa>
 8009e72:	2280      	movs	r2, #128	; 0x80
 8009e74:	0312      	lsls	r2, r2, #12
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d81a      	bhi.n	8009eb0 <UART_SetConfig+0x1b4>
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d004      	beq.n	8009e88 <UART_SetConfig+0x18c>
 8009e7e:	2280      	movs	r2, #128	; 0x80
 8009e80:	02d2      	lsls	r2, r2, #11
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d00a      	beq.n	8009e9c <UART_SetConfig+0x1a0>
 8009e86:	e013      	b.n	8009eb0 <UART_SetConfig+0x1b4>
 8009e88:	231f      	movs	r3, #31
 8009e8a:	18fb      	adds	r3, r7, r3
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	701a      	strb	r2, [r3, #0]
 8009e90:	e049      	b.n	8009f26 <UART_SetConfig+0x22a>
 8009e92:	231f      	movs	r3, #31
 8009e94:	18fb      	adds	r3, r7, r3
 8009e96:	2202      	movs	r2, #2
 8009e98:	701a      	strb	r2, [r3, #0]
 8009e9a:	e044      	b.n	8009f26 <UART_SetConfig+0x22a>
 8009e9c:	231f      	movs	r3, #31
 8009e9e:	18fb      	adds	r3, r7, r3
 8009ea0:	2204      	movs	r2, #4
 8009ea2:	701a      	strb	r2, [r3, #0]
 8009ea4:	e03f      	b.n	8009f26 <UART_SetConfig+0x22a>
 8009ea6:	231f      	movs	r3, #31
 8009ea8:	18fb      	adds	r3, r7, r3
 8009eaa:	2208      	movs	r2, #8
 8009eac:	701a      	strb	r2, [r3, #0]
 8009eae:	e03a      	b.n	8009f26 <UART_SetConfig+0x22a>
 8009eb0:	231f      	movs	r3, #31
 8009eb2:	18fb      	adds	r3, r7, r3
 8009eb4:	2210      	movs	r2, #16
 8009eb6:	701a      	strb	r2, [r3, #0]
 8009eb8:	e035      	b.n	8009f26 <UART_SetConfig+0x22a>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a60      	ldr	r2, [pc, #384]	; (800a040 <UART_SetConfig+0x344>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d104      	bne.n	8009ece <UART_SetConfig+0x1d2>
 8009ec4:	231f      	movs	r3, #31
 8009ec6:	18fb      	adds	r3, r7, r3
 8009ec8:	2200      	movs	r2, #0
 8009eca:	701a      	strb	r2, [r3, #0]
 8009ecc:	e02b      	b.n	8009f26 <UART_SetConfig+0x22a>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a5c      	ldr	r2, [pc, #368]	; (800a044 <UART_SetConfig+0x348>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d104      	bne.n	8009ee2 <UART_SetConfig+0x1e6>
 8009ed8:	231f      	movs	r3, #31
 8009eda:	18fb      	adds	r3, r7, r3
 8009edc:	2200      	movs	r2, #0
 8009ede:	701a      	strb	r2, [r3, #0]
 8009ee0:	e021      	b.n	8009f26 <UART_SetConfig+0x22a>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4a58      	ldr	r2, [pc, #352]	; (800a048 <UART_SetConfig+0x34c>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d104      	bne.n	8009ef6 <UART_SetConfig+0x1fa>
 8009eec:	231f      	movs	r3, #31
 8009eee:	18fb      	adds	r3, r7, r3
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	701a      	strb	r2, [r3, #0]
 8009ef4:	e017      	b.n	8009f26 <UART_SetConfig+0x22a>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a54      	ldr	r2, [pc, #336]	; (800a04c <UART_SetConfig+0x350>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d104      	bne.n	8009f0a <UART_SetConfig+0x20e>
 8009f00:	231f      	movs	r3, #31
 8009f02:	18fb      	adds	r3, r7, r3
 8009f04:	2200      	movs	r2, #0
 8009f06:	701a      	strb	r2, [r3, #0]
 8009f08:	e00d      	b.n	8009f26 <UART_SetConfig+0x22a>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4a50      	ldr	r2, [pc, #320]	; (800a050 <UART_SetConfig+0x354>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d104      	bne.n	8009f1e <UART_SetConfig+0x222>
 8009f14:	231f      	movs	r3, #31
 8009f16:	18fb      	adds	r3, r7, r3
 8009f18:	2200      	movs	r2, #0
 8009f1a:	701a      	strb	r2, [r3, #0]
 8009f1c:	e003      	b.n	8009f26 <UART_SetConfig+0x22a>
 8009f1e:	231f      	movs	r3, #31
 8009f20:	18fb      	adds	r3, r7, r3
 8009f22:	2210      	movs	r2, #16
 8009f24:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	69da      	ldr	r2, [r3, #28]
 8009f2a:	2380      	movs	r3, #128	; 0x80
 8009f2c:	021b      	lsls	r3, r3, #8
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d15d      	bne.n	8009fee <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 8009f32:	231f      	movs	r3, #31
 8009f34:	18fb      	adds	r3, r7, r3
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	2b08      	cmp	r3, #8
 8009f3a:	d015      	beq.n	8009f68 <UART_SetConfig+0x26c>
 8009f3c:	dc18      	bgt.n	8009f70 <UART_SetConfig+0x274>
 8009f3e:	2b04      	cmp	r3, #4
 8009f40:	d00d      	beq.n	8009f5e <UART_SetConfig+0x262>
 8009f42:	dc15      	bgt.n	8009f70 <UART_SetConfig+0x274>
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d002      	beq.n	8009f4e <UART_SetConfig+0x252>
 8009f48:	2b02      	cmp	r3, #2
 8009f4a:	d005      	beq.n	8009f58 <UART_SetConfig+0x25c>
 8009f4c:	e010      	b.n	8009f70 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f4e:	f7ff fcc1 	bl	80098d4 <HAL_RCC_GetPCLK1Freq>
 8009f52:	0003      	movs	r3, r0
 8009f54:	61bb      	str	r3, [r7, #24]
        break;
 8009f56:	e012      	b.n	8009f7e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f58:	4b3e      	ldr	r3, [pc, #248]	; (800a054 <UART_SetConfig+0x358>)
 8009f5a:	61bb      	str	r3, [r7, #24]
        break;
 8009f5c:	e00f      	b.n	8009f7e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f5e:	f7ff fc2f 	bl	80097c0 <HAL_RCC_GetSysClockFreq>
 8009f62:	0003      	movs	r3, r0
 8009f64:	61bb      	str	r3, [r7, #24]
        break;
 8009f66:	e00a      	b.n	8009f7e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f68:	2380      	movs	r3, #128	; 0x80
 8009f6a:	021b      	lsls	r3, r3, #8
 8009f6c:	61bb      	str	r3, [r7, #24]
        break;
 8009f6e:	e006      	b.n	8009f7e <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8009f70:	2300      	movs	r3, #0
 8009f72:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009f74:	231e      	movs	r3, #30
 8009f76:	18fb      	adds	r3, r7, r3
 8009f78:	2201      	movs	r2, #1
 8009f7a:	701a      	strb	r2, [r3, #0]
        break;
 8009f7c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f7e:	69bb      	ldr	r3, [r7, #24]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d100      	bne.n	8009f86 <UART_SetConfig+0x28a>
 8009f84:	e095      	b.n	800a0b2 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	005a      	lsls	r2, r3, #1
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	085b      	lsrs	r3, r3, #1
 8009f90:	18d2      	adds	r2, r2, r3
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	0019      	movs	r1, r3
 8009f98:	0010      	movs	r0, r2
 8009f9a:	f7fe f8b3 	bl	8008104 <__udivsi3>
 8009f9e:	0003      	movs	r3, r0
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	2b0f      	cmp	r3, #15
 8009fa8:	d91c      	bls.n	8009fe4 <UART_SetConfig+0x2e8>
 8009faa:	693a      	ldr	r2, [r7, #16]
 8009fac:	2380      	movs	r3, #128	; 0x80
 8009fae:	025b      	lsls	r3, r3, #9
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d217      	bcs.n	8009fe4 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	b29a      	uxth	r2, r3
 8009fb8:	200e      	movs	r0, #14
 8009fba:	183b      	adds	r3, r7, r0
 8009fbc:	210f      	movs	r1, #15
 8009fbe:	438a      	bics	r2, r1
 8009fc0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	085b      	lsrs	r3, r3, #1
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	2207      	movs	r2, #7
 8009fca:	4013      	ands	r3, r2
 8009fcc:	b299      	uxth	r1, r3
 8009fce:	183b      	adds	r3, r7, r0
 8009fd0:	183a      	adds	r2, r7, r0
 8009fd2:	8812      	ldrh	r2, [r2, #0]
 8009fd4:	430a      	orrs	r2, r1
 8009fd6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	183a      	adds	r2, r7, r0
 8009fde:	8812      	ldrh	r2, [r2, #0]
 8009fe0:	60da      	str	r2, [r3, #12]
 8009fe2:	e066      	b.n	800a0b2 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8009fe4:	231e      	movs	r3, #30
 8009fe6:	18fb      	adds	r3, r7, r3
 8009fe8:	2201      	movs	r2, #1
 8009fea:	701a      	strb	r2, [r3, #0]
 8009fec:	e061      	b.n	800a0b2 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009fee:	231f      	movs	r3, #31
 8009ff0:	18fb      	adds	r3, r7, r3
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	2b08      	cmp	r3, #8
 8009ff6:	d02f      	beq.n	800a058 <UART_SetConfig+0x35c>
 8009ff8:	dc32      	bgt.n	800a060 <UART_SetConfig+0x364>
 8009ffa:	2b04      	cmp	r3, #4
 8009ffc:	d00d      	beq.n	800a01a <UART_SetConfig+0x31e>
 8009ffe:	dc2f      	bgt.n	800a060 <UART_SetConfig+0x364>
 800a000:	2b00      	cmp	r3, #0
 800a002:	d002      	beq.n	800a00a <UART_SetConfig+0x30e>
 800a004:	2b02      	cmp	r3, #2
 800a006:	d005      	beq.n	800a014 <UART_SetConfig+0x318>
 800a008:	e02a      	b.n	800a060 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a00a:	f7ff fc63 	bl	80098d4 <HAL_RCC_GetPCLK1Freq>
 800a00e:	0003      	movs	r3, r0
 800a010:	61bb      	str	r3, [r7, #24]
        break;
 800a012:	e02c      	b.n	800a06e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a014:	4b0f      	ldr	r3, [pc, #60]	; (800a054 <UART_SetConfig+0x358>)
 800a016:	61bb      	str	r3, [r7, #24]
        break;
 800a018:	e029      	b.n	800a06e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a01a:	f7ff fbd1 	bl	80097c0 <HAL_RCC_GetSysClockFreq>
 800a01e:	0003      	movs	r3, r0
 800a020:	61bb      	str	r3, [r7, #24]
        break;
 800a022:	e024      	b.n	800a06e <UART_SetConfig+0x372>
 800a024:	efff69f3 	.word	0xefff69f3
 800a028:	ffffcfff 	.word	0xffffcfff
 800a02c:	fffff4ff 	.word	0xfffff4ff
 800a030:	40013800 	.word	0x40013800
 800a034:	40021000 	.word	0x40021000
 800a038:	40004400 	.word	0x40004400
 800a03c:	40004800 	.word	0x40004800
 800a040:	40004c00 	.word	0x40004c00
 800a044:	40005000 	.word	0x40005000
 800a048:	40011400 	.word	0x40011400
 800a04c:	40011800 	.word	0x40011800
 800a050:	40011c00 	.word	0x40011c00
 800a054:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a058:	2380      	movs	r3, #128	; 0x80
 800a05a:	021b      	lsls	r3, r3, #8
 800a05c:	61bb      	str	r3, [r7, #24]
        break;
 800a05e:	e006      	b.n	800a06e <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 800a060:	2300      	movs	r3, #0
 800a062:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a064:	231e      	movs	r3, #30
 800a066:	18fb      	adds	r3, r7, r3
 800a068:	2201      	movs	r2, #1
 800a06a:	701a      	strb	r2, [r3, #0]
        break;
 800a06c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d01e      	beq.n	800a0b2 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	085a      	lsrs	r2, r3, #1
 800a07a:	69bb      	ldr	r3, [r7, #24]
 800a07c:	18d2      	adds	r2, r2, r3
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	0019      	movs	r1, r3
 800a084:	0010      	movs	r0, r2
 800a086:	f7fe f83d 	bl	8008104 <__udivsi3>
 800a08a:	0003      	movs	r3, r0
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	2b0f      	cmp	r3, #15
 800a094:	d909      	bls.n	800a0aa <UART_SetConfig+0x3ae>
 800a096:	693a      	ldr	r2, [r7, #16]
 800a098:	2380      	movs	r3, #128	; 0x80
 800a09a:	025b      	lsls	r3, r3, #9
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d204      	bcs.n	800a0aa <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	693a      	ldr	r2, [r7, #16]
 800a0a6:	60da      	str	r2, [r3, #12]
 800a0a8:	e003      	b.n	800a0b2 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800a0aa:	231e      	movs	r3, #30
 800a0ac:	18fb      	adds	r3, r7, r3
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a0be:	231e      	movs	r3, #30
 800a0c0:	18fb      	adds	r3, r7, r3
 800a0c2:	781b      	ldrb	r3, [r3, #0]
}
 800a0c4:	0018      	movs	r0, r3
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	b008      	add	sp, #32
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d8:	2201      	movs	r2, #1
 800a0da:	4013      	ands	r3, r2
 800a0dc:	d00b      	beq.n	800a0f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	4a4a      	ldr	r2, [pc, #296]	; (800a210 <UART_AdvFeatureConfig+0x144>)
 800a0e6:	4013      	ands	r3, r2
 800a0e8:	0019      	movs	r1, r3
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	430a      	orrs	r2, r1
 800a0f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fa:	2202      	movs	r2, #2
 800a0fc:	4013      	ands	r3, r2
 800a0fe:	d00b      	beq.n	800a118 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	4a43      	ldr	r2, [pc, #268]	; (800a214 <UART_AdvFeatureConfig+0x148>)
 800a108:	4013      	ands	r3, r2
 800a10a:	0019      	movs	r1, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	430a      	orrs	r2, r1
 800a116:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a11c:	2204      	movs	r2, #4
 800a11e:	4013      	ands	r3, r2
 800a120:	d00b      	beq.n	800a13a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	4a3b      	ldr	r2, [pc, #236]	; (800a218 <UART_AdvFeatureConfig+0x14c>)
 800a12a:	4013      	ands	r3, r2
 800a12c:	0019      	movs	r1, r3
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	430a      	orrs	r2, r1
 800a138:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13e:	2208      	movs	r2, #8
 800a140:	4013      	ands	r3, r2
 800a142:	d00b      	beq.n	800a15c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	4a34      	ldr	r2, [pc, #208]	; (800a21c <UART_AdvFeatureConfig+0x150>)
 800a14c:	4013      	ands	r3, r2
 800a14e:	0019      	movs	r1, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	430a      	orrs	r2, r1
 800a15a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a160:	2210      	movs	r2, #16
 800a162:	4013      	ands	r3, r2
 800a164:	d00b      	beq.n	800a17e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	4a2c      	ldr	r2, [pc, #176]	; (800a220 <UART_AdvFeatureConfig+0x154>)
 800a16e:	4013      	ands	r3, r2
 800a170:	0019      	movs	r1, r3
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	430a      	orrs	r2, r1
 800a17c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a182:	2220      	movs	r2, #32
 800a184:	4013      	ands	r3, r2
 800a186:	d00b      	beq.n	800a1a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	4a25      	ldr	r2, [pc, #148]	; (800a224 <UART_AdvFeatureConfig+0x158>)
 800a190:	4013      	ands	r3, r2
 800a192:	0019      	movs	r1, r3
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	430a      	orrs	r2, r1
 800a19e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a4:	2240      	movs	r2, #64	; 0x40
 800a1a6:	4013      	ands	r3, r2
 800a1a8:	d01d      	beq.n	800a1e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	4a1d      	ldr	r2, [pc, #116]	; (800a228 <UART_AdvFeatureConfig+0x15c>)
 800a1b2:	4013      	ands	r3, r2
 800a1b4:	0019      	movs	r1, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	430a      	orrs	r2, r1
 800a1c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a1c6:	2380      	movs	r3, #128	; 0x80
 800a1c8:	035b      	lsls	r3, r3, #13
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d10b      	bne.n	800a1e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	4a15      	ldr	r2, [pc, #84]	; (800a22c <UART_AdvFeatureConfig+0x160>)
 800a1d6:	4013      	ands	r3, r2
 800a1d8:	0019      	movs	r1, r3
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	430a      	orrs	r2, r1
 800a1e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ea:	2280      	movs	r2, #128	; 0x80
 800a1ec:	4013      	ands	r3, r2
 800a1ee:	d00b      	beq.n	800a208 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	4a0e      	ldr	r2, [pc, #56]	; (800a230 <UART_AdvFeatureConfig+0x164>)
 800a1f8:	4013      	ands	r3, r2
 800a1fa:	0019      	movs	r1, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	430a      	orrs	r2, r1
 800a206:	605a      	str	r2, [r3, #4]
  }
}
 800a208:	46c0      	nop			; (mov r8, r8)
 800a20a:	46bd      	mov	sp, r7
 800a20c:	b002      	add	sp, #8
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	fffdffff 	.word	0xfffdffff
 800a214:	fffeffff 	.word	0xfffeffff
 800a218:	fffbffff 	.word	0xfffbffff
 800a21c:	ffff7fff 	.word	0xffff7fff
 800a220:	ffffefff 	.word	0xffffefff
 800a224:	ffffdfff 	.word	0xffffdfff
 800a228:	ffefffff 	.word	0xffefffff
 800a22c:	ff9fffff 	.word	0xff9fffff
 800a230:	fff7ffff 	.word	0xfff7ffff

0800a234 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b086      	sub	sp, #24
 800a238:	af02      	add	r7, sp, #8
 800a23a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2280      	movs	r2, #128	; 0x80
 800a240:	2100      	movs	r1, #0
 800a242:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a244:	f7fe fb7a 	bl	800893c <HAL_GetTick>
 800a248:	0003      	movs	r3, r0
 800a24a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2208      	movs	r2, #8
 800a254:	4013      	ands	r3, r2
 800a256:	2b08      	cmp	r3, #8
 800a258:	d10c      	bne.n	800a274 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2280      	movs	r2, #128	; 0x80
 800a25e:	0391      	lsls	r1, r2, #14
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	4a17      	ldr	r2, [pc, #92]	; (800a2c0 <UART_CheckIdleState+0x8c>)
 800a264:	9200      	str	r2, [sp, #0]
 800a266:	2200      	movs	r2, #0
 800a268:	f000 f82c 	bl	800a2c4 <UART_WaitOnFlagUntilTimeout>
 800a26c:	1e03      	subs	r3, r0, #0
 800a26e:	d001      	beq.n	800a274 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a270:	2303      	movs	r3, #3
 800a272:	e021      	b.n	800a2b8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	2204      	movs	r2, #4
 800a27c:	4013      	ands	r3, r2
 800a27e:	2b04      	cmp	r3, #4
 800a280:	d10c      	bne.n	800a29c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2280      	movs	r2, #128	; 0x80
 800a286:	03d1      	lsls	r1, r2, #15
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	4a0d      	ldr	r2, [pc, #52]	; (800a2c0 <UART_CheckIdleState+0x8c>)
 800a28c:	9200      	str	r2, [sp, #0]
 800a28e:	2200      	movs	r2, #0
 800a290:	f000 f818 	bl	800a2c4 <UART_WaitOnFlagUntilTimeout>
 800a294:	1e03      	subs	r3, r0, #0
 800a296:	d001      	beq.n	800a29c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a298:	2303      	movs	r3, #3
 800a29a:	e00d      	b.n	800a2b8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2220      	movs	r2, #32
 800a2a0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2220      	movs	r2, #32
 800a2a6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2274      	movs	r2, #116	; 0x74
 800a2b2:	2100      	movs	r1, #0
 800a2b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a2b6:	2300      	movs	r3, #0
}
 800a2b8:	0018      	movs	r0, r3
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	b004      	add	sp, #16
 800a2be:	bd80      	pop	{r7, pc}
 800a2c0:	01ffffff 	.word	0x01ffffff

0800a2c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b094      	sub	sp, #80	; 0x50
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	603b      	str	r3, [r7, #0]
 800a2d0:	1dfb      	adds	r3, r7, #7
 800a2d2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2d4:	e0a3      	b.n	800a41e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a2d8:	3301      	adds	r3, #1
 800a2da:	d100      	bne.n	800a2de <UART_WaitOnFlagUntilTimeout+0x1a>
 800a2dc:	e09f      	b.n	800a41e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2de:	f7fe fb2d 	bl	800893c <HAL_GetTick>
 800a2e2:	0002      	movs	r2, r0
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	1ad3      	subs	r3, r2, r3
 800a2e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d302      	bcc.n	800a2f4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a2ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d13d      	bne.n	800a370 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2f4:	f3ef 8310 	mrs	r3, PRIMASK
 800a2f8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800a2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a2fc:	647b      	str	r3, [r7, #68]	; 0x44
 800a2fe:	2301      	movs	r3, #1
 800a300:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a304:	f383 8810 	msr	PRIMASK, r3
}
 800a308:	46c0      	nop			; (mov r8, r8)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	681a      	ldr	r2, [r3, #0]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	494c      	ldr	r1, [pc, #304]	; (800a448 <UART_WaitOnFlagUntilTimeout+0x184>)
 800a316:	400a      	ands	r2, r1
 800a318:	601a      	str	r2, [r3, #0]
 800a31a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a31c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a320:	f383 8810 	msr	PRIMASK, r3
}
 800a324:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a326:	f3ef 8310 	mrs	r3, PRIMASK
 800a32a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800a32c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a32e:	643b      	str	r3, [r7, #64]	; 0x40
 800a330:	2301      	movs	r3, #1
 800a332:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a336:	f383 8810 	msr	PRIMASK, r3
}
 800a33a:	46c0      	nop			; (mov r8, r8)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	689a      	ldr	r2, [r3, #8]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2101      	movs	r1, #1
 800a348:	438a      	bics	r2, r1
 800a34a:	609a      	str	r2, [r3, #8]
 800a34c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a34e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a352:	f383 8810 	msr	PRIMASK, r3
}
 800a356:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2220      	movs	r2, #32
 800a35c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2220      	movs	r2, #32
 800a362:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2274      	movs	r2, #116	; 0x74
 800a368:	2100      	movs	r1, #0
 800a36a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a36c:	2303      	movs	r3, #3
 800a36e:	e067      	b.n	800a440 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	2204      	movs	r2, #4
 800a378:	4013      	ands	r3, r2
 800a37a:	d050      	beq.n	800a41e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	69da      	ldr	r2, [r3, #28]
 800a382:	2380      	movs	r3, #128	; 0x80
 800a384:	011b      	lsls	r3, r3, #4
 800a386:	401a      	ands	r2, r3
 800a388:	2380      	movs	r3, #128	; 0x80
 800a38a:	011b      	lsls	r3, r3, #4
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d146      	bne.n	800a41e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	2280      	movs	r2, #128	; 0x80
 800a396:	0112      	lsls	r2, r2, #4
 800a398:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a39a:	f3ef 8310 	mrs	r3, PRIMASK
 800a39e:	613b      	str	r3, [r7, #16]
  return(result);
 800a3a0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a3a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	f383 8810 	msr	PRIMASK, r3
}
 800a3ae:	46c0      	nop			; (mov r8, r8)
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4923      	ldr	r1, [pc, #140]	; (800a448 <UART_WaitOnFlagUntilTimeout+0x184>)
 800a3bc:	400a      	ands	r2, r1
 800a3be:	601a      	str	r2, [r3, #0]
 800a3c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	f383 8810 	msr	PRIMASK, r3
}
 800a3ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3cc:	f3ef 8310 	mrs	r3, PRIMASK
 800a3d0:	61fb      	str	r3, [r7, #28]
  return(result);
 800a3d2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3da:	6a3b      	ldr	r3, [r7, #32]
 800a3dc:	f383 8810 	msr	PRIMASK, r3
}
 800a3e0:	46c0      	nop			; (mov r8, r8)
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	689a      	ldr	r2, [r3, #8]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	2101      	movs	r1, #1
 800a3ee:	438a      	bics	r2, r1
 800a3f0:	609a      	str	r2, [r3, #8]
 800a3f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3f4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f8:	f383 8810 	msr	PRIMASK, r3
}
 800a3fc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2220      	movs	r2, #32
 800a402:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2220      	movs	r2, #32
 800a408:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2280      	movs	r2, #128	; 0x80
 800a40e:	2120      	movs	r1, #32
 800a410:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2274      	movs	r2, #116	; 0x74
 800a416:	2100      	movs	r1, #0
 800a418:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a41a:	2303      	movs	r3, #3
 800a41c:	e010      	b.n	800a440 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	69db      	ldr	r3, [r3, #28]
 800a424:	68ba      	ldr	r2, [r7, #8]
 800a426:	4013      	ands	r3, r2
 800a428:	68ba      	ldr	r2, [r7, #8]
 800a42a:	1ad3      	subs	r3, r2, r3
 800a42c:	425a      	negs	r2, r3
 800a42e:	4153      	adcs	r3, r2
 800a430:	b2db      	uxtb	r3, r3
 800a432:	001a      	movs	r2, r3
 800a434:	1dfb      	adds	r3, r7, #7
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	429a      	cmp	r2, r3
 800a43a:	d100      	bne.n	800a43e <UART_WaitOnFlagUntilTimeout+0x17a>
 800a43c:	e74b      	b.n	800a2d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	0018      	movs	r0, r3
 800a442:	46bd      	mov	sp, r7
 800a444:	b014      	add	sp, #80	; 0x50
 800a446:	bd80      	pop	{r7, pc}
 800a448:	fffffe5f 	.word	0xfffffe5f

0800a44c <__errno>:
 800a44c:	4b01      	ldr	r3, [pc, #4]	; (800a454 <__errno+0x8>)
 800a44e:	6818      	ldr	r0, [r3, #0]
 800a450:	4770      	bx	lr
 800a452:	46c0      	nop			; (mov r8, r8)
 800a454:	200000cc 	.word	0x200000cc

0800a458 <__libc_init_array>:
 800a458:	b570      	push	{r4, r5, r6, lr}
 800a45a:	2600      	movs	r6, #0
 800a45c:	4d0c      	ldr	r5, [pc, #48]	; (800a490 <__libc_init_array+0x38>)
 800a45e:	4c0d      	ldr	r4, [pc, #52]	; (800a494 <__libc_init_array+0x3c>)
 800a460:	1b64      	subs	r4, r4, r5
 800a462:	10a4      	asrs	r4, r4, #2
 800a464:	42a6      	cmp	r6, r4
 800a466:	d109      	bne.n	800a47c <__libc_init_array+0x24>
 800a468:	2600      	movs	r6, #0
 800a46a:	f000 fd31 	bl	800aed0 <_init>
 800a46e:	4d0a      	ldr	r5, [pc, #40]	; (800a498 <__libc_init_array+0x40>)
 800a470:	4c0a      	ldr	r4, [pc, #40]	; (800a49c <__libc_init_array+0x44>)
 800a472:	1b64      	subs	r4, r4, r5
 800a474:	10a4      	asrs	r4, r4, #2
 800a476:	42a6      	cmp	r6, r4
 800a478:	d105      	bne.n	800a486 <__libc_init_array+0x2e>
 800a47a:	bd70      	pop	{r4, r5, r6, pc}
 800a47c:	00b3      	lsls	r3, r6, #2
 800a47e:	58eb      	ldr	r3, [r5, r3]
 800a480:	4798      	blx	r3
 800a482:	3601      	adds	r6, #1
 800a484:	e7ee      	b.n	800a464 <__libc_init_array+0xc>
 800a486:	00b3      	lsls	r3, r6, #2
 800a488:	58eb      	ldr	r3, [r5, r3]
 800a48a:	4798      	blx	r3
 800a48c:	3601      	adds	r6, #1
 800a48e:	e7f2      	b.n	800a476 <__libc_init_array+0x1e>
 800a490:	0800afa4 	.word	0x0800afa4
 800a494:	0800afa4 	.word	0x0800afa4
 800a498:	0800afa4 	.word	0x0800afa4
 800a49c:	0800afa8 	.word	0x0800afa8

0800a4a0 <memset>:
 800a4a0:	0003      	movs	r3, r0
 800a4a2:	1882      	adds	r2, r0, r2
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d100      	bne.n	800a4aa <memset+0xa>
 800a4a8:	4770      	bx	lr
 800a4aa:	7019      	strb	r1, [r3, #0]
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	e7f9      	b.n	800a4a4 <memset+0x4>

0800a4b0 <_puts_r>:
 800a4b0:	b570      	push	{r4, r5, r6, lr}
 800a4b2:	0005      	movs	r5, r0
 800a4b4:	000e      	movs	r6, r1
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	d004      	beq.n	800a4c4 <_puts_r+0x14>
 800a4ba:	6983      	ldr	r3, [r0, #24]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d101      	bne.n	800a4c4 <_puts_r+0x14>
 800a4c0:	f000 fa6e 	bl	800a9a0 <__sinit>
 800a4c4:	69ab      	ldr	r3, [r5, #24]
 800a4c6:	68ac      	ldr	r4, [r5, #8]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d102      	bne.n	800a4d2 <_puts_r+0x22>
 800a4cc:	0028      	movs	r0, r5
 800a4ce:	f000 fa67 	bl	800a9a0 <__sinit>
 800a4d2:	4b2d      	ldr	r3, [pc, #180]	; (800a588 <_puts_r+0xd8>)
 800a4d4:	429c      	cmp	r4, r3
 800a4d6:	d122      	bne.n	800a51e <_puts_r+0x6e>
 800a4d8:	686c      	ldr	r4, [r5, #4]
 800a4da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4dc:	07db      	lsls	r3, r3, #31
 800a4de:	d405      	bmi.n	800a4ec <_puts_r+0x3c>
 800a4e0:	89a3      	ldrh	r3, [r4, #12]
 800a4e2:	059b      	lsls	r3, r3, #22
 800a4e4:	d402      	bmi.n	800a4ec <_puts_r+0x3c>
 800a4e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4e8:	f000 fafb 	bl	800aae2 <__retarget_lock_acquire_recursive>
 800a4ec:	89a3      	ldrh	r3, [r4, #12]
 800a4ee:	071b      	lsls	r3, r3, #28
 800a4f0:	d502      	bpl.n	800a4f8 <_puts_r+0x48>
 800a4f2:	6923      	ldr	r3, [r4, #16]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d129      	bne.n	800a54c <_puts_r+0x9c>
 800a4f8:	0021      	movs	r1, r4
 800a4fa:	0028      	movs	r0, r5
 800a4fc:	f000 f8aa 	bl	800a654 <__swsetup_r>
 800a500:	2800      	cmp	r0, #0
 800a502:	d023      	beq.n	800a54c <_puts_r+0x9c>
 800a504:	2501      	movs	r5, #1
 800a506:	426d      	negs	r5, r5
 800a508:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a50a:	07db      	lsls	r3, r3, #31
 800a50c:	d405      	bmi.n	800a51a <_puts_r+0x6a>
 800a50e:	89a3      	ldrh	r3, [r4, #12]
 800a510:	059b      	lsls	r3, r3, #22
 800a512:	d402      	bmi.n	800a51a <_puts_r+0x6a>
 800a514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a516:	f000 fae5 	bl	800aae4 <__retarget_lock_release_recursive>
 800a51a:	0028      	movs	r0, r5
 800a51c:	bd70      	pop	{r4, r5, r6, pc}
 800a51e:	4b1b      	ldr	r3, [pc, #108]	; (800a58c <_puts_r+0xdc>)
 800a520:	429c      	cmp	r4, r3
 800a522:	d101      	bne.n	800a528 <_puts_r+0x78>
 800a524:	68ac      	ldr	r4, [r5, #8]
 800a526:	e7d8      	b.n	800a4da <_puts_r+0x2a>
 800a528:	4b19      	ldr	r3, [pc, #100]	; (800a590 <_puts_r+0xe0>)
 800a52a:	429c      	cmp	r4, r3
 800a52c:	d1d5      	bne.n	800a4da <_puts_r+0x2a>
 800a52e:	68ec      	ldr	r4, [r5, #12]
 800a530:	e7d3      	b.n	800a4da <_puts_r+0x2a>
 800a532:	3601      	adds	r6, #1
 800a534:	60a3      	str	r3, [r4, #8]
 800a536:	2b00      	cmp	r3, #0
 800a538:	da04      	bge.n	800a544 <_puts_r+0x94>
 800a53a:	69a2      	ldr	r2, [r4, #24]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	dc16      	bgt.n	800a56e <_puts_r+0xbe>
 800a540:	290a      	cmp	r1, #10
 800a542:	d014      	beq.n	800a56e <_puts_r+0xbe>
 800a544:	6823      	ldr	r3, [r4, #0]
 800a546:	1c5a      	adds	r2, r3, #1
 800a548:	6022      	str	r2, [r4, #0]
 800a54a:	7019      	strb	r1, [r3, #0]
 800a54c:	68a3      	ldr	r3, [r4, #8]
 800a54e:	7831      	ldrb	r1, [r6, #0]
 800a550:	3b01      	subs	r3, #1
 800a552:	2900      	cmp	r1, #0
 800a554:	d1ed      	bne.n	800a532 <_puts_r+0x82>
 800a556:	60a3      	str	r3, [r4, #8]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	da0f      	bge.n	800a57c <_puts_r+0xcc>
 800a55c:	0028      	movs	r0, r5
 800a55e:	0022      	movs	r2, r4
 800a560:	310a      	adds	r1, #10
 800a562:	f000 f821 	bl	800a5a8 <__swbuf_r>
 800a566:	250a      	movs	r5, #10
 800a568:	1c43      	adds	r3, r0, #1
 800a56a:	d1cd      	bne.n	800a508 <_puts_r+0x58>
 800a56c:	e7ca      	b.n	800a504 <_puts_r+0x54>
 800a56e:	0022      	movs	r2, r4
 800a570:	0028      	movs	r0, r5
 800a572:	f000 f819 	bl	800a5a8 <__swbuf_r>
 800a576:	1c43      	adds	r3, r0, #1
 800a578:	d1e8      	bne.n	800a54c <_puts_r+0x9c>
 800a57a:	e7c3      	b.n	800a504 <_puts_r+0x54>
 800a57c:	250a      	movs	r5, #10
 800a57e:	6823      	ldr	r3, [r4, #0]
 800a580:	1c5a      	adds	r2, r3, #1
 800a582:	6022      	str	r2, [r4, #0]
 800a584:	701d      	strb	r5, [r3, #0]
 800a586:	e7bf      	b.n	800a508 <_puts_r+0x58>
 800a588:	0800af64 	.word	0x0800af64
 800a58c:	0800af84 	.word	0x0800af84
 800a590:	0800af44 	.word	0x0800af44

0800a594 <puts>:
 800a594:	b510      	push	{r4, lr}
 800a596:	4b03      	ldr	r3, [pc, #12]	; (800a5a4 <puts+0x10>)
 800a598:	0001      	movs	r1, r0
 800a59a:	6818      	ldr	r0, [r3, #0]
 800a59c:	f7ff ff88 	bl	800a4b0 <_puts_r>
 800a5a0:	bd10      	pop	{r4, pc}
 800a5a2:	46c0      	nop			; (mov r8, r8)
 800a5a4:	200000cc 	.word	0x200000cc

0800a5a8 <__swbuf_r>:
 800a5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5aa:	0005      	movs	r5, r0
 800a5ac:	000e      	movs	r6, r1
 800a5ae:	0014      	movs	r4, r2
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	d004      	beq.n	800a5be <__swbuf_r+0x16>
 800a5b4:	6983      	ldr	r3, [r0, #24]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d101      	bne.n	800a5be <__swbuf_r+0x16>
 800a5ba:	f000 f9f1 	bl	800a9a0 <__sinit>
 800a5be:	4b22      	ldr	r3, [pc, #136]	; (800a648 <__swbuf_r+0xa0>)
 800a5c0:	429c      	cmp	r4, r3
 800a5c2:	d12e      	bne.n	800a622 <__swbuf_r+0x7a>
 800a5c4:	686c      	ldr	r4, [r5, #4]
 800a5c6:	69a3      	ldr	r3, [r4, #24]
 800a5c8:	60a3      	str	r3, [r4, #8]
 800a5ca:	89a3      	ldrh	r3, [r4, #12]
 800a5cc:	071b      	lsls	r3, r3, #28
 800a5ce:	d532      	bpl.n	800a636 <__swbuf_r+0x8e>
 800a5d0:	6923      	ldr	r3, [r4, #16]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d02f      	beq.n	800a636 <__swbuf_r+0x8e>
 800a5d6:	6823      	ldr	r3, [r4, #0]
 800a5d8:	6922      	ldr	r2, [r4, #16]
 800a5da:	b2f7      	uxtb	r7, r6
 800a5dc:	1a98      	subs	r0, r3, r2
 800a5de:	6963      	ldr	r3, [r4, #20]
 800a5e0:	b2f6      	uxtb	r6, r6
 800a5e2:	4283      	cmp	r3, r0
 800a5e4:	dc05      	bgt.n	800a5f2 <__swbuf_r+0x4a>
 800a5e6:	0021      	movs	r1, r4
 800a5e8:	0028      	movs	r0, r5
 800a5ea:	f000 f937 	bl	800a85c <_fflush_r>
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	d127      	bne.n	800a642 <__swbuf_r+0x9a>
 800a5f2:	68a3      	ldr	r3, [r4, #8]
 800a5f4:	3001      	adds	r0, #1
 800a5f6:	3b01      	subs	r3, #1
 800a5f8:	60a3      	str	r3, [r4, #8]
 800a5fa:	6823      	ldr	r3, [r4, #0]
 800a5fc:	1c5a      	adds	r2, r3, #1
 800a5fe:	6022      	str	r2, [r4, #0]
 800a600:	701f      	strb	r7, [r3, #0]
 800a602:	6963      	ldr	r3, [r4, #20]
 800a604:	4283      	cmp	r3, r0
 800a606:	d004      	beq.n	800a612 <__swbuf_r+0x6a>
 800a608:	89a3      	ldrh	r3, [r4, #12]
 800a60a:	07db      	lsls	r3, r3, #31
 800a60c:	d507      	bpl.n	800a61e <__swbuf_r+0x76>
 800a60e:	2e0a      	cmp	r6, #10
 800a610:	d105      	bne.n	800a61e <__swbuf_r+0x76>
 800a612:	0021      	movs	r1, r4
 800a614:	0028      	movs	r0, r5
 800a616:	f000 f921 	bl	800a85c <_fflush_r>
 800a61a:	2800      	cmp	r0, #0
 800a61c:	d111      	bne.n	800a642 <__swbuf_r+0x9a>
 800a61e:	0030      	movs	r0, r6
 800a620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a622:	4b0a      	ldr	r3, [pc, #40]	; (800a64c <__swbuf_r+0xa4>)
 800a624:	429c      	cmp	r4, r3
 800a626:	d101      	bne.n	800a62c <__swbuf_r+0x84>
 800a628:	68ac      	ldr	r4, [r5, #8]
 800a62a:	e7cc      	b.n	800a5c6 <__swbuf_r+0x1e>
 800a62c:	4b08      	ldr	r3, [pc, #32]	; (800a650 <__swbuf_r+0xa8>)
 800a62e:	429c      	cmp	r4, r3
 800a630:	d1c9      	bne.n	800a5c6 <__swbuf_r+0x1e>
 800a632:	68ec      	ldr	r4, [r5, #12]
 800a634:	e7c7      	b.n	800a5c6 <__swbuf_r+0x1e>
 800a636:	0021      	movs	r1, r4
 800a638:	0028      	movs	r0, r5
 800a63a:	f000 f80b 	bl	800a654 <__swsetup_r>
 800a63e:	2800      	cmp	r0, #0
 800a640:	d0c9      	beq.n	800a5d6 <__swbuf_r+0x2e>
 800a642:	2601      	movs	r6, #1
 800a644:	4276      	negs	r6, r6
 800a646:	e7ea      	b.n	800a61e <__swbuf_r+0x76>
 800a648:	0800af64 	.word	0x0800af64
 800a64c:	0800af84 	.word	0x0800af84
 800a650:	0800af44 	.word	0x0800af44

0800a654 <__swsetup_r>:
 800a654:	4b37      	ldr	r3, [pc, #220]	; (800a734 <__swsetup_r+0xe0>)
 800a656:	b570      	push	{r4, r5, r6, lr}
 800a658:	681d      	ldr	r5, [r3, #0]
 800a65a:	0006      	movs	r6, r0
 800a65c:	000c      	movs	r4, r1
 800a65e:	2d00      	cmp	r5, #0
 800a660:	d005      	beq.n	800a66e <__swsetup_r+0x1a>
 800a662:	69ab      	ldr	r3, [r5, #24]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d102      	bne.n	800a66e <__swsetup_r+0x1a>
 800a668:	0028      	movs	r0, r5
 800a66a:	f000 f999 	bl	800a9a0 <__sinit>
 800a66e:	4b32      	ldr	r3, [pc, #200]	; (800a738 <__swsetup_r+0xe4>)
 800a670:	429c      	cmp	r4, r3
 800a672:	d10f      	bne.n	800a694 <__swsetup_r+0x40>
 800a674:	686c      	ldr	r4, [r5, #4]
 800a676:	230c      	movs	r3, #12
 800a678:	5ee2      	ldrsh	r2, [r4, r3]
 800a67a:	b293      	uxth	r3, r2
 800a67c:	0711      	lsls	r1, r2, #28
 800a67e:	d42d      	bmi.n	800a6dc <__swsetup_r+0x88>
 800a680:	06d9      	lsls	r1, r3, #27
 800a682:	d411      	bmi.n	800a6a8 <__swsetup_r+0x54>
 800a684:	2309      	movs	r3, #9
 800a686:	2001      	movs	r0, #1
 800a688:	6033      	str	r3, [r6, #0]
 800a68a:	3337      	adds	r3, #55	; 0x37
 800a68c:	4313      	orrs	r3, r2
 800a68e:	81a3      	strh	r3, [r4, #12]
 800a690:	4240      	negs	r0, r0
 800a692:	bd70      	pop	{r4, r5, r6, pc}
 800a694:	4b29      	ldr	r3, [pc, #164]	; (800a73c <__swsetup_r+0xe8>)
 800a696:	429c      	cmp	r4, r3
 800a698:	d101      	bne.n	800a69e <__swsetup_r+0x4a>
 800a69a:	68ac      	ldr	r4, [r5, #8]
 800a69c:	e7eb      	b.n	800a676 <__swsetup_r+0x22>
 800a69e:	4b28      	ldr	r3, [pc, #160]	; (800a740 <__swsetup_r+0xec>)
 800a6a0:	429c      	cmp	r4, r3
 800a6a2:	d1e8      	bne.n	800a676 <__swsetup_r+0x22>
 800a6a4:	68ec      	ldr	r4, [r5, #12]
 800a6a6:	e7e6      	b.n	800a676 <__swsetup_r+0x22>
 800a6a8:	075b      	lsls	r3, r3, #29
 800a6aa:	d513      	bpl.n	800a6d4 <__swsetup_r+0x80>
 800a6ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6ae:	2900      	cmp	r1, #0
 800a6b0:	d008      	beq.n	800a6c4 <__swsetup_r+0x70>
 800a6b2:	0023      	movs	r3, r4
 800a6b4:	3344      	adds	r3, #68	; 0x44
 800a6b6:	4299      	cmp	r1, r3
 800a6b8:	d002      	beq.n	800a6c0 <__swsetup_r+0x6c>
 800a6ba:	0030      	movs	r0, r6
 800a6bc:	f000 fa80 	bl	800abc0 <_free_r>
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	6363      	str	r3, [r4, #52]	; 0x34
 800a6c4:	2224      	movs	r2, #36	; 0x24
 800a6c6:	89a3      	ldrh	r3, [r4, #12]
 800a6c8:	4393      	bics	r3, r2
 800a6ca:	81a3      	strh	r3, [r4, #12]
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	6063      	str	r3, [r4, #4]
 800a6d0:	6923      	ldr	r3, [r4, #16]
 800a6d2:	6023      	str	r3, [r4, #0]
 800a6d4:	2308      	movs	r3, #8
 800a6d6:	89a2      	ldrh	r2, [r4, #12]
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	81a3      	strh	r3, [r4, #12]
 800a6dc:	6923      	ldr	r3, [r4, #16]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d10b      	bne.n	800a6fa <__swsetup_r+0xa6>
 800a6e2:	21a0      	movs	r1, #160	; 0xa0
 800a6e4:	2280      	movs	r2, #128	; 0x80
 800a6e6:	89a3      	ldrh	r3, [r4, #12]
 800a6e8:	0089      	lsls	r1, r1, #2
 800a6ea:	0092      	lsls	r2, r2, #2
 800a6ec:	400b      	ands	r3, r1
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d003      	beq.n	800a6fa <__swsetup_r+0xa6>
 800a6f2:	0021      	movs	r1, r4
 800a6f4:	0030      	movs	r0, r6
 800a6f6:	f000 fa1f 	bl	800ab38 <__smakebuf_r>
 800a6fa:	220c      	movs	r2, #12
 800a6fc:	5ea3      	ldrsh	r3, [r4, r2]
 800a6fe:	2001      	movs	r0, #1
 800a700:	001a      	movs	r2, r3
 800a702:	b299      	uxth	r1, r3
 800a704:	4002      	ands	r2, r0
 800a706:	4203      	tst	r3, r0
 800a708:	d00f      	beq.n	800a72a <__swsetup_r+0xd6>
 800a70a:	2200      	movs	r2, #0
 800a70c:	60a2      	str	r2, [r4, #8]
 800a70e:	6962      	ldr	r2, [r4, #20]
 800a710:	4252      	negs	r2, r2
 800a712:	61a2      	str	r2, [r4, #24]
 800a714:	2000      	movs	r0, #0
 800a716:	6922      	ldr	r2, [r4, #16]
 800a718:	4282      	cmp	r2, r0
 800a71a:	d1ba      	bne.n	800a692 <__swsetup_r+0x3e>
 800a71c:	060a      	lsls	r2, r1, #24
 800a71e:	d5b8      	bpl.n	800a692 <__swsetup_r+0x3e>
 800a720:	2240      	movs	r2, #64	; 0x40
 800a722:	4313      	orrs	r3, r2
 800a724:	81a3      	strh	r3, [r4, #12]
 800a726:	3801      	subs	r0, #1
 800a728:	e7b3      	b.n	800a692 <__swsetup_r+0x3e>
 800a72a:	0788      	lsls	r0, r1, #30
 800a72c:	d400      	bmi.n	800a730 <__swsetup_r+0xdc>
 800a72e:	6962      	ldr	r2, [r4, #20]
 800a730:	60a2      	str	r2, [r4, #8]
 800a732:	e7ef      	b.n	800a714 <__swsetup_r+0xc0>
 800a734:	200000cc 	.word	0x200000cc
 800a738:	0800af64 	.word	0x0800af64
 800a73c:	0800af84 	.word	0x0800af84
 800a740:	0800af44 	.word	0x0800af44

0800a744 <__sflush_r>:
 800a744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a746:	898b      	ldrh	r3, [r1, #12]
 800a748:	0005      	movs	r5, r0
 800a74a:	000c      	movs	r4, r1
 800a74c:	071a      	lsls	r2, r3, #28
 800a74e:	d45f      	bmi.n	800a810 <__sflush_r+0xcc>
 800a750:	684a      	ldr	r2, [r1, #4]
 800a752:	2a00      	cmp	r2, #0
 800a754:	dc04      	bgt.n	800a760 <__sflush_r+0x1c>
 800a756:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a758:	2a00      	cmp	r2, #0
 800a75a:	dc01      	bgt.n	800a760 <__sflush_r+0x1c>
 800a75c:	2000      	movs	r0, #0
 800a75e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a760:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a762:	2f00      	cmp	r7, #0
 800a764:	d0fa      	beq.n	800a75c <__sflush_r+0x18>
 800a766:	2200      	movs	r2, #0
 800a768:	2180      	movs	r1, #128	; 0x80
 800a76a:	682e      	ldr	r6, [r5, #0]
 800a76c:	602a      	str	r2, [r5, #0]
 800a76e:	001a      	movs	r2, r3
 800a770:	0149      	lsls	r1, r1, #5
 800a772:	400a      	ands	r2, r1
 800a774:	420b      	tst	r3, r1
 800a776:	d034      	beq.n	800a7e2 <__sflush_r+0x9e>
 800a778:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a77a:	89a3      	ldrh	r3, [r4, #12]
 800a77c:	075b      	lsls	r3, r3, #29
 800a77e:	d506      	bpl.n	800a78e <__sflush_r+0x4a>
 800a780:	6863      	ldr	r3, [r4, #4]
 800a782:	1ac0      	subs	r0, r0, r3
 800a784:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a786:	2b00      	cmp	r3, #0
 800a788:	d001      	beq.n	800a78e <__sflush_r+0x4a>
 800a78a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a78c:	1ac0      	subs	r0, r0, r3
 800a78e:	0002      	movs	r2, r0
 800a790:	6a21      	ldr	r1, [r4, #32]
 800a792:	2300      	movs	r3, #0
 800a794:	0028      	movs	r0, r5
 800a796:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a798:	47b8      	blx	r7
 800a79a:	89a1      	ldrh	r1, [r4, #12]
 800a79c:	1c43      	adds	r3, r0, #1
 800a79e:	d106      	bne.n	800a7ae <__sflush_r+0x6a>
 800a7a0:	682b      	ldr	r3, [r5, #0]
 800a7a2:	2b1d      	cmp	r3, #29
 800a7a4:	d831      	bhi.n	800a80a <__sflush_r+0xc6>
 800a7a6:	4a2c      	ldr	r2, [pc, #176]	; (800a858 <__sflush_r+0x114>)
 800a7a8:	40da      	lsrs	r2, r3
 800a7aa:	07d3      	lsls	r3, r2, #31
 800a7ac:	d52d      	bpl.n	800a80a <__sflush_r+0xc6>
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	6063      	str	r3, [r4, #4]
 800a7b2:	6923      	ldr	r3, [r4, #16]
 800a7b4:	6023      	str	r3, [r4, #0]
 800a7b6:	04cb      	lsls	r3, r1, #19
 800a7b8:	d505      	bpl.n	800a7c6 <__sflush_r+0x82>
 800a7ba:	1c43      	adds	r3, r0, #1
 800a7bc:	d102      	bne.n	800a7c4 <__sflush_r+0x80>
 800a7be:	682b      	ldr	r3, [r5, #0]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d100      	bne.n	800a7c6 <__sflush_r+0x82>
 800a7c4:	6560      	str	r0, [r4, #84]	; 0x54
 800a7c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7c8:	602e      	str	r6, [r5, #0]
 800a7ca:	2900      	cmp	r1, #0
 800a7cc:	d0c6      	beq.n	800a75c <__sflush_r+0x18>
 800a7ce:	0023      	movs	r3, r4
 800a7d0:	3344      	adds	r3, #68	; 0x44
 800a7d2:	4299      	cmp	r1, r3
 800a7d4:	d002      	beq.n	800a7dc <__sflush_r+0x98>
 800a7d6:	0028      	movs	r0, r5
 800a7d8:	f000 f9f2 	bl	800abc0 <_free_r>
 800a7dc:	2000      	movs	r0, #0
 800a7de:	6360      	str	r0, [r4, #52]	; 0x34
 800a7e0:	e7bd      	b.n	800a75e <__sflush_r+0x1a>
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	0028      	movs	r0, r5
 800a7e6:	6a21      	ldr	r1, [r4, #32]
 800a7e8:	47b8      	blx	r7
 800a7ea:	1c43      	adds	r3, r0, #1
 800a7ec:	d1c5      	bne.n	800a77a <__sflush_r+0x36>
 800a7ee:	682b      	ldr	r3, [r5, #0]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d0c2      	beq.n	800a77a <__sflush_r+0x36>
 800a7f4:	2b1d      	cmp	r3, #29
 800a7f6:	d001      	beq.n	800a7fc <__sflush_r+0xb8>
 800a7f8:	2b16      	cmp	r3, #22
 800a7fa:	d101      	bne.n	800a800 <__sflush_r+0xbc>
 800a7fc:	602e      	str	r6, [r5, #0]
 800a7fe:	e7ad      	b.n	800a75c <__sflush_r+0x18>
 800a800:	2340      	movs	r3, #64	; 0x40
 800a802:	89a2      	ldrh	r2, [r4, #12]
 800a804:	4313      	orrs	r3, r2
 800a806:	81a3      	strh	r3, [r4, #12]
 800a808:	e7a9      	b.n	800a75e <__sflush_r+0x1a>
 800a80a:	2340      	movs	r3, #64	; 0x40
 800a80c:	430b      	orrs	r3, r1
 800a80e:	e7fa      	b.n	800a806 <__sflush_r+0xc2>
 800a810:	690f      	ldr	r7, [r1, #16]
 800a812:	2f00      	cmp	r7, #0
 800a814:	d0a2      	beq.n	800a75c <__sflush_r+0x18>
 800a816:	680a      	ldr	r2, [r1, #0]
 800a818:	600f      	str	r7, [r1, #0]
 800a81a:	1bd2      	subs	r2, r2, r7
 800a81c:	9201      	str	r2, [sp, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	079b      	lsls	r3, r3, #30
 800a822:	d100      	bne.n	800a826 <__sflush_r+0xe2>
 800a824:	694a      	ldr	r2, [r1, #20]
 800a826:	60a2      	str	r2, [r4, #8]
 800a828:	9b01      	ldr	r3, [sp, #4]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	dc00      	bgt.n	800a830 <__sflush_r+0xec>
 800a82e:	e795      	b.n	800a75c <__sflush_r+0x18>
 800a830:	003a      	movs	r2, r7
 800a832:	0028      	movs	r0, r5
 800a834:	9b01      	ldr	r3, [sp, #4]
 800a836:	6a21      	ldr	r1, [r4, #32]
 800a838:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a83a:	47b0      	blx	r6
 800a83c:	2800      	cmp	r0, #0
 800a83e:	dc06      	bgt.n	800a84e <__sflush_r+0x10a>
 800a840:	2340      	movs	r3, #64	; 0x40
 800a842:	2001      	movs	r0, #1
 800a844:	89a2      	ldrh	r2, [r4, #12]
 800a846:	4240      	negs	r0, r0
 800a848:	4313      	orrs	r3, r2
 800a84a:	81a3      	strh	r3, [r4, #12]
 800a84c:	e787      	b.n	800a75e <__sflush_r+0x1a>
 800a84e:	9b01      	ldr	r3, [sp, #4]
 800a850:	183f      	adds	r7, r7, r0
 800a852:	1a1b      	subs	r3, r3, r0
 800a854:	9301      	str	r3, [sp, #4]
 800a856:	e7e7      	b.n	800a828 <__sflush_r+0xe4>
 800a858:	20400001 	.word	0x20400001

0800a85c <_fflush_r>:
 800a85c:	690b      	ldr	r3, [r1, #16]
 800a85e:	b570      	push	{r4, r5, r6, lr}
 800a860:	0005      	movs	r5, r0
 800a862:	000c      	movs	r4, r1
 800a864:	2b00      	cmp	r3, #0
 800a866:	d102      	bne.n	800a86e <_fflush_r+0x12>
 800a868:	2500      	movs	r5, #0
 800a86a:	0028      	movs	r0, r5
 800a86c:	bd70      	pop	{r4, r5, r6, pc}
 800a86e:	2800      	cmp	r0, #0
 800a870:	d004      	beq.n	800a87c <_fflush_r+0x20>
 800a872:	6983      	ldr	r3, [r0, #24]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d101      	bne.n	800a87c <_fflush_r+0x20>
 800a878:	f000 f892 	bl	800a9a0 <__sinit>
 800a87c:	4b14      	ldr	r3, [pc, #80]	; (800a8d0 <_fflush_r+0x74>)
 800a87e:	429c      	cmp	r4, r3
 800a880:	d11b      	bne.n	800a8ba <_fflush_r+0x5e>
 800a882:	686c      	ldr	r4, [r5, #4]
 800a884:	220c      	movs	r2, #12
 800a886:	5ea3      	ldrsh	r3, [r4, r2]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d0ed      	beq.n	800a868 <_fflush_r+0xc>
 800a88c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a88e:	07d2      	lsls	r2, r2, #31
 800a890:	d404      	bmi.n	800a89c <_fflush_r+0x40>
 800a892:	059b      	lsls	r3, r3, #22
 800a894:	d402      	bmi.n	800a89c <_fflush_r+0x40>
 800a896:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a898:	f000 f923 	bl	800aae2 <__retarget_lock_acquire_recursive>
 800a89c:	0028      	movs	r0, r5
 800a89e:	0021      	movs	r1, r4
 800a8a0:	f7ff ff50 	bl	800a744 <__sflush_r>
 800a8a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8a6:	0005      	movs	r5, r0
 800a8a8:	07db      	lsls	r3, r3, #31
 800a8aa:	d4de      	bmi.n	800a86a <_fflush_r+0xe>
 800a8ac:	89a3      	ldrh	r3, [r4, #12]
 800a8ae:	059b      	lsls	r3, r3, #22
 800a8b0:	d4db      	bmi.n	800a86a <_fflush_r+0xe>
 800a8b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8b4:	f000 f916 	bl	800aae4 <__retarget_lock_release_recursive>
 800a8b8:	e7d7      	b.n	800a86a <_fflush_r+0xe>
 800a8ba:	4b06      	ldr	r3, [pc, #24]	; (800a8d4 <_fflush_r+0x78>)
 800a8bc:	429c      	cmp	r4, r3
 800a8be:	d101      	bne.n	800a8c4 <_fflush_r+0x68>
 800a8c0:	68ac      	ldr	r4, [r5, #8]
 800a8c2:	e7df      	b.n	800a884 <_fflush_r+0x28>
 800a8c4:	4b04      	ldr	r3, [pc, #16]	; (800a8d8 <_fflush_r+0x7c>)
 800a8c6:	429c      	cmp	r4, r3
 800a8c8:	d1dc      	bne.n	800a884 <_fflush_r+0x28>
 800a8ca:	68ec      	ldr	r4, [r5, #12]
 800a8cc:	e7da      	b.n	800a884 <_fflush_r+0x28>
 800a8ce:	46c0      	nop			; (mov r8, r8)
 800a8d0:	0800af64 	.word	0x0800af64
 800a8d4:	0800af84 	.word	0x0800af84
 800a8d8:	0800af44 	.word	0x0800af44

0800a8dc <std>:
 800a8dc:	2300      	movs	r3, #0
 800a8de:	b510      	push	{r4, lr}
 800a8e0:	0004      	movs	r4, r0
 800a8e2:	6003      	str	r3, [r0, #0]
 800a8e4:	6043      	str	r3, [r0, #4]
 800a8e6:	6083      	str	r3, [r0, #8]
 800a8e8:	8181      	strh	r1, [r0, #12]
 800a8ea:	6643      	str	r3, [r0, #100]	; 0x64
 800a8ec:	0019      	movs	r1, r3
 800a8ee:	81c2      	strh	r2, [r0, #14]
 800a8f0:	6103      	str	r3, [r0, #16]
 800a8f2:	6143      	str	r3, [r0, #20]
 800a8f4:	6183      	str	r3, [r0, #24]
 800a8f6:	2208      	movs	r2, #8
 800a8f8:	305c      	adds	r0, #92	; 0x5c
 800a8fa:	f7ff fdd1 	bl	800a4a0 <memset>
 800a8fe:	4b05      	ldr	r3, [pc, #20]	; (800a914 <std+0x38>)
 800a900:	6263      	str	r3, [r4, #36]	; 0x24
 800a902:	4b05      	ldr	r3, [pc, #20]	; (800a918 <std+0x3c>)
 800a904:	6224      	str	r4, [r4, #32]
 800a906:	62a3      	str	r3, [r4, #40]	; 0x28
 800a908:	4b04      	ldr	r3, [pc, #16]	; (800a91c <std+0x40>)
 800a90a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a90c:	4b04      	ldr	r3, [pc, #16]	; (800a920 <std+0x44>)
 800a90e:	6323      	str	r3, [r4, #48]	; 0x30
 800a910:	bd10      	pop	{r4, pc}
 800a912:	46c0      	nop			; (mov r8, r8)
 800a914:	0800ad35 	.word	0x0800ad35
 800a918:	0800ad5d 	.word	0x0800ad5d
 800a91c:	0800ad95 	.word	0x0800ad95
 800a920:	0800adc1 	.word	0x0800adc1

0800a924 <_cleanup_r>:
 800a924:	b510      	push	{r4, lr}
 800a926:	4902      	ldr	r1, [pc, #8]	; (800a930 <_cleanup_r+0xc>)
 800a928:	f000 f8ba 	bl	800aaa0 <_fwalk_reent>
 800a92c:	bd10      	pop	{r4, pc}
 800a92e:	46c0      	nop			; (mov r8, r8)
 800a930:	0800a85d 	.word	0x0800a85d

0800a934 <__sfmoreglue>:
 800a934:	b570      	push	{r4, r5, r6, lr}
 800a936:	2568      	movs	r5, #104	; 0x68
 800a938:	1e4a      	subs	r2, r1, #1
 800a93a:	4355      	muls	r5, r2
 800a93c:	000e      	movs	r6, r1
 800a93e:	0029      	movs	r1, r5
 800a940:	3174      	adds	r1, #116	; 0x74
 800a942:	f000 f987 	bl	800ac54 <_malloc_r>
 800a946:	1e04      	subs	r4, r0, #0
 800a948:	d008      	beq.n	800a95c <__sfmoreglue+0x28>
 800a94a:	2100      	movs	r1, #0
 800a94c:	002a      	movs	r2, r5
 800a94e:	6001      	str	r1, [r0, #0]
 800a950:	6046      	str	r6, [r0, #4]
 800a952:	300c      	adds	r0, #12
 800a954:	60a0      	str	r0, [r4, #8]
 800a956:	3268      	adds	r2, #104	; 0x68
 800a958:	f7ff fda2 	bl	800a4a0 <memset>
 800a95c:	0020      	movs	r0, r4
 800a95e:	bd70      	pop	{r4, r5, r6, pc}

0800a960 <__sfp_lock_acquire>:
 800a960:	b510      	push	{r4, lr}
 800a962:	4802      	ldr	r0, [pc, #8]	; (800a96c <__sfp_lock_acquire+0xc>)
 800a964:	f000 f8bd 	bl	800aae2 <__retarget_lock_acquire_recursive>
 800a968:	bd10      	pop	{r4, pc}
 800a96a:	46c0      	nop			; (mov r8, r8)
 800a96c:	2000026c 	.word	0x2000026c

0800a970 <__sfp_lock_release>:
 800a970:	b510      	push	{r4, lr}
 800a972:	4802      	ldr	r0, [pc, #8]	; (800a97c <__sfp_lock_release+0xc>)
 800a974:	f000 f8b6 	bl	800aae4 <__retarget_lock_release_recursive>
 800a978:	bd10      	pop	{r4, pc}
 800a97a:	46c0      	nop			; (mov r8, r8)
 800a97c:	2000026c 	.word	0x2000026c

0800a980 <__sinit_lock_acquire>:
 800a980:	b510      	push	{r4, lr}
 800a982:	4802      	ldr	r0, [pc, #8]	; (800a98c <__sinit_lock_acquire+0xc>)
 800a984:	f000 f8ad 	bl	800aae2 <__retarget_lock_acquire_recursive>
 800a988:	bd10      	pop	{r4, pc}
 800a98a:	46c0      	nop			; (mov r8, r8)
 800a98c:	20000267 	.word	0x20000267

0800a990 <__sinit_lock_release>:
 800a990:	b510      	push	{r4, lr}
 800a992:	4802      	ldr	r0, [pc, #8]	; (800a99c <__sinit_lock_release+0xc>)
 800a994:	f000 f8a6 	bl	800aae4 <__retarget_lock_release_recursive>
 800a998:	bd10      	pop	{r4, pc}
 800a99a:	46c0      	nop			; (mov r8, r8)
 800a99c:	20000267 	.word	0x20000267

0800a9a0 <__sinit>:
 800a9a0:	b513      	push	{r0, r1, r4, lr}
 800a9a2:	0004      	movs	r4, r0
 800a9a4:	f7ff ffec 	bl	800a980 <__sinit_lock_acquire>
 800a9a8:	69a3      	ldr	r3, [r4, #24]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d002      	beq.n	800a9b4 <__sinit+0x14>
 800a9ae:	f7ff ffef 	bl	800a990 <__sinit_lock_release>
 800a9b2:	bd13      	pop	{r0, r1, r4, pc}
 800a9b4:	64a3      	str	r3, [r4, #72]	; 0x48
 800a9b6:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a9b8:	6523      	str	r3, [r4, #80]	; 0x50
 800a9ba:	4b13      	ldr	r3, [pc, #76]	; (800aa08 <__sinit+0x68>)
 800a9bc:	4a13      	ldr	r2, [pc, #76]	; (800aa0c <__sinit+0x6c>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a9c2:	9301      	str	r3, [sp, #4]
 800a9c4:	42a3      	cmp	r3, r4
 800a9c6:	d101      	bne.n	800a9cc <__sinit+0x2c>
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	61a3      	str	r3, [r4, #24]
 800a9cc:	0020      	movs	r0, r4
 800a9ce:	f000 f81f 	bl	800aa10 <__sfp>
 800a9d2:	6060      	str	r0, [r4, #4]
 800a9d4:	0020      	movs	r0, r4
 800a9d6:	f000 f81b 	bl	800aa10 <__sfp>
 800a9da:	60a0      	str	r0, [r4, #8]
 800a9dc:	0020      	movs	r0, r4
 800a9de:	f000 f817 	bl	800aa10 <__sfp>
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	2104      	movs	r1, #4
 800a9e6:	60e0      	str	r0, [r4, #12]
 800a9e8:	6860      	ldr	r0, [r4, #4]
 800a9ea:	f7ff ff77 	bl	800a8dc <std>
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	2109      	movs	r1, #9
 800a9f2:	68a0      	ldr	r0, [r4, #8]
 800a9f4:	f7ff ff72 	bl	800a8dc <std>
 800a9f8:	2202      	movs	r2, #2
 800a9fa:	2112      	movs	r1, #18
 800a9fc:	68e0      	ldr	r0, [r4, #12]
 800a9fe:	f7ff ff6d 	bl	800a8dc <std>
 800aa02:	2301      	movs	r3, #1
 800aa04:	61a3      	str	r3, [r4, #24]
 800aa06:	e7d2      	b.n	800a9ae <__sinit+0xe>
 800aa08:	0800af40 	.word	0x0800af40
 800aa0c:	0800a925 	.word	0x0800a925

0800aa10 <__sfp>:
 800aa10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa12:	0007      	movs	r7, r0
 800aa14:	f7ff ffa4 	bl	800a960 <__sfp_lock_acquire>
 800aa18:	4b1f      	ldr	r3, [pc, #124]	; (800aa98 <__sfp+0x88>)
 800aa1a:	681e      	ldr	r6, [r3, #0]
 800aa1c:	69b3      	ldr	r3, [r6, #24]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d102      	bne.n	800aa28 <__sfp+0x18>
 800aa22:	0030      	movs	r0, r6
 800aa24:	f7ff ffbc 	bl	800a9a0 <__sinit>
 800aa28:	3648      	adds	r6, #72	; 0x48
 800aa2a:	68b4      	ldr	r4, [r6, #8]
 800aa2c:	6873      	ldr	r3, [r6, #4]
 800aa2e:	3b01      	subs	r3, #1
 800aa30:	d504      	bpl.n	800aa3c <__sfp+0x2c>
 800aa32:	6833      	ldr	r3, [r6, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d022      	beq.n	800aa7e <__sfp+0x6e>
 800aa38:	6836      	ldr	r6, [r6, #0]
 800aa3a:	e7f6      	b.n	800aa2a <__sfp+0x1a>
 800aa3c:	220c      	movs	r2, #12
 800aa3e:	5ea5      	ldrsh	r5, [r4, r2]
 800aa40:	2d00      	cmp	r5, #0
 800aa42:	d11a      	bne.n	800aa7a <__sfp+0x6a>
 800aa44:	0020      	movs	r0, r4
 800aa46:	4b15      	ldr	r3, [pc, #84]	; (800aa9c <__sfp+0x8c>)
 800aa48:	3058      	adds	r0, #88	; 0x58
 800aa4a:	60e3      	str	r3, [r4, #12]
 800aa4c:	6665      	str	r5, [r4, #100]	; 0x64
 800aa4e:	f000 f847 	bl	800aae0 <__retarget_lock_init_recursive>
 800aa52:	f7ff ff8d 	bl	800a970 <__sfp_lock_release>
 800aa56:	0020      	movs	r0, r4
 800aa58:	2208      	movs	r2, #8
 800aa5a:	0029      	movs	r1, r5
 800aa5c:	6025      	str	r5, [r4, #0]
 800aa5e:	60a5      	str	r5, [r4, #8]
 800aa60:	6065      	str	r5, [r4, #4]
 800aa62:	6125      	str	r5, [r4, #16]
 800aa64:	6165      	str	r5, [r4, #20]
 800aa66:	61a5      	str	r5, [r4, #24]
 800aa68:	305c      	adds	r0, #92	; 0x5c
 800aa6a:	f7ff fd19 	bl	800a4a0 <memset>
 800aa6e:	6365      	str	r5, [r4, #52]	; 0x34
 800aa70:	63a5      	str	r5, [r4, #56]	; 0x38
 800aa72:	64a5      	str	r5, [r4, #72]	; 0x48
 800aa74:	64e5      	str	r5, [r4, #76]	; 0x4c
 800aa76:	0020      	movs	r0, r4
 800aa78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa7a:	3468      	adds	r4, #104	; 0x68
 800aa7c:	e7d7      	b.n	800aa2e <__sfp+0x1e>
 800aa7e:	2104      	movs	r1, #4
 800aa80:	0038      	movs	r0, r7
 800aa82:	f7ff ff57 	bl	800a934 <__sfmoreglue>
 800aa86:	1e04      	subs	r4, r0, #0
 800aa88:	6030      	str	r0, [r6, #0]
 800aa8a:	d1d5      	bne.n	800aa38 <__sfp+0x28>
 800aa8c:	f7ff ff70 	bl	800a970 <__sfp_lock_release>
 800aa90:	230c      	movs	r3, #12
 800aa92:	603b      	str	r3, [r7, #0]
 800aa94:	e7ef      	b.n	800aa76 <__sfp+0x66>
 800aa96:	46c0      	nop			; (mov r8, r8)
 800aa98:	0800af40 	.word	0x0800af40
 800aa9c:	ffff0001 	.word	0xffff0001

0800aaa0 <_fwalk_reent>:
 800aaa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aaa2:	0004      	movs	r4, r0
 800aaa4:	0006      	movs	r6, r0
 800aaa6:	2700      	movs	r7, #0
 800aaa8:	9101      	str	r1, [sp, #4]
 800aaaa:	3448      	adds	r4, #72	; 0x48
 800aaac:	6863      	ldr	r3, [r4, #4]
 800aaae:	68a5      	ldr	r5, [r4, #8]
 800aab0:	9300      	str	r3, [sp, #0]
 800aab2:	9b00      	ldr	r3, [sp, #0]
 800aab4:	3b01      	subs	r3, #1
 800aab6:	9300      	str	r3, [sp, #0]
 800aab8:	d504      	bpl.n	800aac4 <_fwalk_reent+0x24>
 800aaba:	6824      	ldr	r4, [r4, #0]
 800aabc:	2c00      	cmp	r4, #0
 800aabe:	d1f5      	bne.n	800aaac <_fwalk_reent+0xc>
 800aac0:	0038      	movs	r0, r7
 800aac2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aac4:	89ab      	ldrh	r3, [r5, #12]
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d908      	bls.n	800aadc <_fwalk_reent+0x3c>
 800aaca:	220e      	movs	r2, #14
 800aacc:	5eab      	ldrsh	r3, [r5, r2]
 800aace:	3301      	adds	r3, #1
 800aad0:	d004      	beq.n	800aadc <_fwalk_reent+0x3c>
 800aad2:	0029      	movs	r1, r5
 800aad4:	0030      	movs	r0, r6
 800aad6:	9b01      	ldr	r3, [sp, #4]
 800aad8:	4798      	blx	r3
 800aada:	4307      	orrs	r7, r0
 800aadc:	3568      	adds	r5, #104	; 0x68
 800aade:	e7e8      	b.n	800aab2 <_fwalk_reent+0x12>

0800aae0 <__retarget_lock_init_recursive>:
 800aae0:	4770      	bx	lr

0800aae2 <__retarget_lock_acquire_recursive>:
 800aae2:	4770      	bx	lr

0800aae4 <__retarget_lock_release_recursive>:
 800aae4:	4770      	bx	lr
	...

0800aae8 <__swhatbuf_r>:
 800aae8:	b570      	push	{r4, r5, r6, lr}
 800aaea:	000e      	movs	r6, r1
 800aaec:	001d      	movs	r5, r3
 800aaee:	230e      	movs	r3, #14
 800aaf0:	5ec9      	ldrsh	r1, [r1, r3]
 800aaf2:	0014      	movs	r4, r2
 800aaf4:	b096      	sub	sp, #88	; 0x58
 800aaf6:	2900      	cmp	r1, #0
 800aaf8:	da07      	bge.n	800ab0a <__swhatbuf_r+0x22>
 800aafa:	2300      	movs	r3, #0
 800aafc:	602b      	str	r3, [r5, #0]
 800aafe:	89b3      	ldrh	r3, [r6, #12]
 800ab00:	061b      	lsls	r3, r3, #24
 800ab02:	d411      	bmi.n	800ab28 <__swhatbuf_r+0x40>
 800ab04:	2380      	movs	r3, #128	; 0x80
 800ab06:	00db      	lsls	r3, r3, #3
 800ab08:	e00f      	b.n	800ab2a <__swhatbuf_r+0x42>
 800ab0a:	466a      	mov	r2, sp
 800ab0c:	f000 f984 	bl	800ae18 <_fstat_r>
 800ab10:	2800      	cmp	r0, #0
 800ab12:	dbf2      	blt.n	800aafa <__swhatbuf_r+0x12>
 800ab14:	23f0      	movs	r3, #240	; 0xf0
 800ab16:	9901      	ldr	r1, [sp, #4]
 800ab18:	021b      	lsls	r3, r3, #8
 800ab1a:	4019      	ands	r1, r3
 800ab1c:	4b05      	ldr	r3, [pc, #20]	; (800ab34 <__swhatbuf_r+0x4c>)
 800ab1e:	18c9      	adds	r1, r1, r3
 800ab20:	424b      	negs	r3, r1
 800ab22:	4159      	adcs	r1, r3
 800ab24:	6029      	str	r1, [r5, #0]
 800ab26:	e7ed      	b.n	800ab04 <__swhatbuf_r+0x1c>
 800ab28:	2340      	movs	r3, #64	; 0x40
 800ab2a:	2000      	movs	r0, #0
 800ab2c:	6023      	str	r3, [r4, #0]
 800ab2e:	b016      	add	sp, #88	; 0x58
 800ab30:	bd70      	pop	{r4, r5, r6, pc}
 800ab32:	46c0      	nop			; (mov r8, r8)
 800ab34:	ffffe000 	.word	0xffffe000

0800ab38 <__smakebuf_r>:
 800ab38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab3a:	2602      	movs	r6, #2
 800ab3c:	898b      	ldrh	r3, [r1, #12]
 800ab3e:	0005      	movs	r5, r0
 800ab40:	000c      	movs	r4, r1
 800ab42:	4233      	tst	r3, r6
 800ab44:	d006      	beq.n	800ab54 <__smakebuf_r+0x1c>
 800ab46:	0023      	movs	r3, r4
 800ab48:	3347      	adds	r3, #71	; 0x47
 800ab4a:	6023      	str	r3, [r4, #0]
 800ab4c:	6123      	str	r3, [r4, #16]
 800ab4e:	2301      	movs	r3, #1
 800ab50:	6163      	str	r3, [r4, #20]
 800ab52:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ab54:	466a      	mov	r2, sp
 800ab56:	ab01      	add	r3, sp, #4
 800ab58:	f7ff ffc6 	bl	800aae8 <__swhatbuf_r>
 800ab5c:	9900      	ldr	r1, [sp, #0]
 800ab5e:	0007      	movs	r7, r0
 800ab60:	0028      	movs	r0, r5
 800ab62:	f000 f877 	bl	800ac54 <_malloc_r>
 800ab66:	2800      	cmp	r0, #0
 800ab68:	d108      	bne.n	800ab7c <__smakebuf_r+0x44>
 800ab6a:	220c      	movs	r2, #12
 800ab6c:	5ea3      	ldrsh	r3, [r4, r2]
 800ab6e:	059a      	lsls	r2, r3, #22
 800ab70:	d4ef      	bmi.n	800ab52 <__smakebuf_r+0x1a>
 800ab72:	2203      	movs	r2, #3
 800ab74:	4393      	bics	r3, r2
 800ab76:	431e      	orrs	r6, r3
 800ab78:	81a6      	strh	r6, [r4, #12]
 800ab7a:	e7e4      	b.n	800ab46 <__smakebuf_r+0xe>
 800ab7c:	4b0f      	ldr	r3, [pc, #60]	; (800abbc <__smakebuf_r+0x84>)
 800ab7e:	62ab      	str	r3, [r5, #40]	; 0x28
 800ab80:	2380      	movs	r3, #128	; 0x80
 800ab82:	89a2      	ldrh	r2, [r4, #12]
 800ab84:	6020      	str	r0, [r4, #0]
 800ab86:	4313      	orrs	r3, r2
 800ab88:	81a3      	strh	r3, [r4, #12]
 800ab8a:	9b00      	ldr	r3, [sp, #0]
 800ab8c:	6120      	str	r0, [r4, #16]
 800ab8e:	6163      	str	r3, [r4, #20]
 800ab90:	9b01      	ldr	r3, [sp, #4]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d00d      	beq.n	800abb2 <__smakebuf_r+0x7a>
 800ab96:	0028      	movs	r0, r5
 800ab98:	230e      	movs	r3, #14
 800ab9a:	5ee1      	ldrsh	r1, [r4, r3]
 800ab9c:	f000 f94e 	bl	800ae3c <_isatty_r>
 800aba0:	2800      	cmp	r0, #0
 800aba2:	d006      	beq.n	800abb2 <__smakebuf_r+0x7a>
 800aba4:	2203      	movs	r2, #3
 800aba6:	89a3      	ldrh	r3, [r4, #12]
 800aba8:	4393      	bics	r3, r2
 800abaa:	001a      	movs	r2, r3
 800abac:	2301      	movs	r3, #1
 800abae:	4313      	orrs	r3, r2
 800abb0:	81a3      	strh	r3, [r4, #12]
 800abb2:	89a0      	ldrh	r0, [r4, #12]
 800abb4:	4307      	orrs	r7, r0
 800abb6:	81a7      	strh	r7, [r4, #12]
 800abb8:	e7cb      	b.n	800ab52 <__smakebuf_r+0x1a>
 800abba:	46c0      	nop			; (mov r8, r8)
 800abbc:	0800a925 	.word	0x0800a925

0800abc0 <_free_r>:
 800abc0:	b570      	push	{r4, r5, r6, lr}
 800abc2:	0005      	movs	r5, r0
 800abc4:	2900      	cmp	r1, #0
 800abc6:	d010      	beq.n	800abea <_free_r+0x2a>
 800abc8:	1f0c      	subs	r4, r1, #4
 800abca:	6823      	ldr	r3, [r4, #0]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	da00      	bge.n	800abd2 <_free_r+0x12>
 800abd0:	18e4      	adds	r4, r4, r3
 800abd2:	0028      	movs	r0, r5
 800abd4:	f000 f958 	bl	800ae88 <__malloc_lock>
 800abd8:	4a1d      	ldr	r2, [pc, #116]	; (800ac50 <_free_r+0x90>)
 800abda:	6813      	ldr	r3, [r2, #0]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d105      	bne.n	800abec <_free_r+0x2c>
 800abe0:	6063      	str	r3, [r4, #4]
 800abe2:	6014      	str	r4, [r2, #0]
 800abe4:	0028      	movs	r0, r5
 800abe6:	f000 f957 	bl	800ae98 <__malloc_unlock>
 800abea:	bd70      	pop	{r4, r5, r6, pc}
 800abec:	42a3      	cmp	r3, r4
 800abee:	d908      	bls.n	800ac02 <_free_r+0x42>
 800abf0:	6821      	ldr	r1, [r4, #0]
 800abf2:	1860      	adds	r0, r4, r1
 800abf4:	4283      	cmp	r3, r0
 800abf6:	d1f3      	bne.n	800abe0 <_free_r+0x20>
 800abf8:	6818      	ldr	r0, [r3, #0]
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	1841      	adds	r1, r0, r1
 800abfe:	6021      	str	r1, [r4, #0]
 800ac00:	e7ee      	b.n	800abe0 <_free_r+0x20>
 800ac02:	001a      	movs	r2, r3
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d001      	beq.n	800ac0e <_free_r+0x4e>
 800ac0a:	42a3      	cmp	r3, r4
 800ac0c:	d9f9      	bls.n	800ac02 <_free_r+0x42>
 800ac0e:	6811      	ldr	r1, [r2, #0]
 800ac10:	1850      	adds	r0, r2, r1
 800ac12:	42a0      	cmp	r0, r4
 800ac14:	d10b      	bne.n	800ac2e <_free_r+0x6e>
 800ac16:	6820      	ldr	r0, [r4, #0]
 800ac18:	1809      	adds	r1, r1, r0
 800ac1a:	1850      	adds	r0, r2, r1
 800ac1c:	6011      	str	r1, [r2, #0]
 800ac1e:	4283      	cmp	r3, r0
 800ac20:	d1e0      	bne.n	800abe4 <_free_r+0x24>
 800ac22:	6818      	ldr	r0, [r3, #0]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	1841      	adds	r1, r0, r1
 800ac28:	6011      	str	r1, [r2, #0]
 800ac2a:	6053      	str	r3, [r2, #4]
 800ac2c:	e7da      	b.n	800abe4 <_free_r+0x24>
 800ac2e:	42a0      	cmp	r0, r4
 800ac30:	d902      	bls.n	800ac38 <_free_r+0x78>
 800ac32:	230c      	movs	r3, #12
 800ac34:	602b      	str	r3, [r5, #0]
 800ac36:	e7d5      	b.n	800abe4 <_free_r+0x24>
 800ac38:	6821      	ldr	r1, [r4, #0]
 800ac3a:	1860      	adds	r0, r4, r1
 800ac3c:	4283      	cmp	r3, r0
 800ac3e:	d103      	bne.n	800ac48 <_free_r+0x88>
 800ac40:	6818      	ldr	r0, [r3, #0]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	1841      	adds	r1, r0, r1
 800ac46:	6021      	str	r1, [r4, #0]
 800ac48:	6063      	str	r3, [r4, #4]
 800ac4a:	6054      	str	r4, [r2, #4]
 800ac4c:	e7ca      	b.n	800abe4 <_free_r+0x24>
 800ac4e:	46c0      	nop			; (mov r8, r8)
 800ac50:	20000150 	.word	0x20000150

0800ac54 <_malloc_r>:
 800ac54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac56:	2303      	movs	r3, #3
 800ac58:	1ccd      	adds	r5, r1, #3
 800ac5a:	439d      	bics	r5, r3
 800ac5c:	3508      	adds	r5, #8
 800ac5e:	0006      	movs	r6, r0
 800ac60:	2d0c      	cmp	r5, #12
 800ac62:	d21f      	bcs.n	800aca4 <_malloc_r+0x50>
 800ac64:	250c      	movs	r5, #12
 800ac66:	42a9      	cmp	r1, r5
 800ac68:	d81e      	bhi.n	800aca8 <_malloc_r+0x54>
 800ac6a:	0030      	movs	r0, r6
 800ac6c:	f000 f90c 	bl	800ae88 <__malloc_lock>
 800ac70:	4925      	ldr	r1, [pc, #148]	; (800ad08 <_malloc_r+0xb4>)
 800ac72:	680a      	ldr	r2, [r1, #0]
 800ac74:	0014      	movs	r4, r2
 800ac76:	2c00      	cmp	r4, #0
 800ac78:	d11a      	bne.n	800acb0 <_malloc_r+0x5c>
 800ac7a:	4f24      	ldr	r7, [pc, #144]	; (800ad0c <_malloc_r+0xb8>)
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d104      	bne.n	800ac8c <_malloc_r+0x38>
 800ac82:	0021      	movs	r1, r4
 800ac84:	0030      	movs	r0, r6
 800ac86:	f000 f843 	bl	800ad10 <_sbrk_r>
 800ac8a:	6038      	str	r0, [r7, #0]
 800ac8c:	0029      	movs	r1, r5
 800ac8e:	0030      	movs	r0, r6
 800ac90:	f000 f83e 	bl	800ad10 <_sbrk_r>
 800ac94:	1c43      	adds	r3, r0, #1
 800ac96:	d12b      	bne.n	800acf0 <_malloc_r+0x9c>
 800ac98:	230c      	movs	r3, #12
 800ac9a:	0030      	movs	r0, r6
 800ac9c:	6033      	str	r3, [r6, #0]
 800ac9e:	f000 f8fb 	bl	800ae98 <__malloc_unlock>
 800aca2:	e003      	b.n	800acac <_malloc_r+0x58>
 800aca4:	2d00      	cmp	r5, #0
 800aca6:	dade      	bge.n	800ac66 <_malloc_r+0x12>
 800aca8:	230c      	movs	r3, #12
 800acaa:	6033      	str	r3, [r6, #0]
 800acac:	2000      	movs	r0, #0
 800acae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acb0:	6823      	ldr	r3, [r4, #0]
 800acb2:	1b5b      	subs	r3, r3, r5
 800acb4:	d419      	bmi.n	800acea <_malloc_r+0x96>
 800acb6:	2b0b      	cmp	r3, #11
 800acb8:	d903      	bls.n	800acc2 <_malloc_r+0x6e>
 800acba:	6023      	str	r3, [r4, #0]
 800acbc:	18e4      	adds	r4, r4, r3
 800acbe:	6025      	str	r5, [r4, #0]
 800acc0:	e003      	b.n	800acca <_malloc_r+0x76>
 800acc2:	6863      	ldr	r3, [r4, #4]
 800acc4:	42a2      	cmp	r2, r4
 800acc6:	d10e      	bne.n	800ace6 <_malloc_r+0x92>
 800acc8:	600b      	str	r3, [r1, #0]
 800acca:	0030      	movs	r0, r6
 800accc:	f000 f8e4 	bl	800ae98 <__malloc_unlock>
 800acd0:	0020      	movs	r0, r4
 800acd2:	2207      	movs	r2, #7
 800acd4:	300b      	adds	r0, #11
 800acd6:	1d23      	adds	r3, r4, #4
 800acd8:	4390      	bics	r0, r2
 800acda:	1ac2      	subs	r2, r0, r3
 800acdc:	4298      	cmp	r0, r3
 800acde:	d0e6      	beq.n	800acae <_malloc_r+0x5a>
 800ace0:	1a1b      	subs	r3, r3, r0
 800ace2:	50a3      	str	r3, [r4, r2]
 800ace4:	e7e3      	b.n	800acae <_malloc_r+0x5a>
 800ace6:	6053      	str	r3, [r2, #4]
 800ace8:	e7ef      	b.n	800acca <_malloc_r+0x76>
 800acea:	0022      	movs	r2, r4
 800acec:	6864      	ldr	r4, [r4, #4]
 800acee:	e7c2      	b.n	800ac76 <_malloc_r+0x22>
 800acf0:	2303      	movs	r3, #3
 800acf2:	1cc4      	adds	r4, r0, #3
 800acf4:	439c      	bics	r4, r3
 800acf6:	42a0      	cmp	r0, r4
 800acf8:	d0e1      	beq.n	800acbe <_malloc_r+0x6a>
 800acfa:	1a21      	subs	r1, r4, r0
 800acfc:	0030      	movs	r0, r6
 800acfe:	f000 f807 	bl	800ad10 <_sbrk_r>
 800ad02:	1c43      	adds	r3, r0, #1
 800ad04:	d1db      	bne.n	800acbe <_malloc_r+0x6a>
 800ad06:	e7c7      	b.n	800ac98 <_malloc_r+0x44>
 800ad08:	20000150 	.word	0x20000150
 800ad0c:	20000154 	.word	0x20000154

0800ad10 <_sbrk_r>:
 800ad10:	2300      	movs	r3, #0
 800ad12:	b570      	push	{r4, r5, r6, lr}
 800ad14:	4d06      	ldr	r5, [pc, #24]	; (800ad30 <_sbrk_r+0x20>)
 800ad16:	0004      	movs	r4, r0
 800ad18:	0008      	movs	r0, r1
 800ad1a:	602b      	str	r3, [r5, #0]
 800ad1c:	f7fd fd4e 	bl	80087bc <_sbrk>
 800ad20:	1c43      	adds	r3, r0, #1
 800ad22:	d103      	bne.n	800ad2c <_sbrk_r+0x1c>
 800ad24:	682b      	ldr	r3, [r5, #0]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d000      	beq.n	800ad2c <_sbrk_r+0x1c>
 800ad2a:	6023      	str	r3, [r4, #0]
 800ad2c:	bd70      	pop	{r4, r5, r6, pc}
 800ad2e:	46c0      	nop			; (mov r8, r8)
 800ad30:	20000270 	.word	0x20000270

0800ad34 <__sread>:
 800ad34:	b570      	push	{r4, r5, r6, lr}
 800ad36:	000c      	movs	r4, r1
 800ad38:	250e      	movs	r5, #14
 800ad3a:	5f49      	ldrsh	r1, [r1, r5]
 800ad3c:	f000 f8b4 	bl	800aea8 <_read_r>
 800ad40:	2800      	cmp	r0, #0
 800ad42:	db03      	blt.n	800ad4c <__sread+0x18>
 800ad44:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ad46:	181b      	adds	r3, r3, r0
 800ad48:	6563      	str	r3, [r4, #84]	; 0x54
 800ad4a:	bd70      	pop	{r4, r5, r6, pc}
 800ad4c:	89a3      	ldrh	r3, [r4, #12]
 800ad4e:	4a02      	ldr	r2, [pc, #8]	; (800ad58 <__sread+0x24>)
 800ad50:	4013      	ands	r3, r2
 800ad52:	81a3      	strh	r3, [r4, #12]
 800ad54:	e7f9      	b.n	800ad4a <__sread+0x16>
 800ad56:	46c0      	nop			; (mov r8, r8)
 800ad58:	ffffefff 	.word	0xffffefff

0800ad5c <__swrite>:
 800ad5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad5e:	001f      	movs	r7, r3
 800ad60:	898b      	ldrh	r3, [r1, #12]
 800ad62:	0005      	movs	r5, r0
 800ad64:	000c      	movs	r4, r1
 800ad66:	0016      	movs	r6, r2
 800ad68:	05db      	lsls	r3, r3, #23
 800ad6a:	d505      	bpl.n	800ad78 <__swrite+0x1c>
 800ad6c:	230e      	movs	r3, #14
 800ad6e:	5ec9      	ldrsh	r1, [r1, r3]
 800ad70:	2200      	movs	r2, #0
 800ad72:	2302      	movs	r3, #2
 800ad74:	f000 f874 	bl	800ae60 <_lseek_r>
 800ad78:	89a3      	ldrh	r3, [r4, #12]
 800ad7a:	4a05      	ldr	r2, [pc, #20]	; (800ad90 <__swrite+0x34>)
 800ad7c:	0028      	movs	r0, r5
 800ad7e:	4013      	ands	r3, r2
 800ad80:	81a3      	strh	r3, [r4, #12]
 800ad82:	0032      	movs	r2, r6
 800ad84:	230e      	movs	r3, #14
 800ad86:	5ee1      	ldrsh	r1, [r4, r3]
 800ad88:	003b      	movs	r3, r7
 800ad8a:	f000 f81f 	bl	800adcc <_write_r>
 800ad8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad90:	ffffefff 	.word	0xffffefff

0800ad94 <__sseek>:
 800ad94:	b570      	push	{r4, r5, r6, lr}
 800ad96:	000c      	movs	r4, r1
 800ad98:	250e      	movs	r5, #14
 800ad9a:	5f49      	ldrsh	r1, [r1, r5]
 800ad9c:	f000 f860 	bl	800ae60 <_lseek_r>
 800ada0:	89a3      	ldrh	r3, [r4, #12]
 800ada2:	1c42      	adds	r2, r0, #1
 800ada4:	d103      	bne.n	800adae <__sseek+0x1a>
 800ada6:	4a05      	ldr	r2, [pc, #20]	; (800adbc <__sseek+0x28>)
 800ada8:	4013      	ands	r3, r2
 800adaa:	81a3      	strh	r3, [r4, #12]
 800adac:	bd70      	pop	{r4, r5, r6, pc}
 800adae:	2280      	movs	r2, #128	; 0x80
 800adb0:	0152      	lsls	r2, r2, #5
 800adb2:	4313      	orrs	r3, r2
 800adb4:	81a3      	strh	r3, [r4, #12]
 800adb6:	6560      	str	r0, [r4, #84]	; 0x54
 800adb8:	e7f8      	b.n	800adac <__sseek+0x18>
 800adba:	46c0      	nop			; (mov r8, r8)
 800adbc:	ffffefff 	.word	0xffffefff

0800adc0 <__sclose>:
 800adc0:	b510      	push	{r4, lr}
 800adc2:	230e      	movs	r3, #14
 800adc4:	5ec9      	ldrsh	r1, [r1, r3]
 800adc6:	f000 f815 	bl	800adf4 <_close_r>
 800adca:	bd10      	pop	{r4, pc}

0800adcc <_write_r>:
 800adcc:	b570      	push	{r4, r5, r6, lr}
 800adce:	0004      	movs	r4, r0
 800add0:	0008      	movs	r0, r1
 800add2:	0011      	movs	r1, r2
 800add4:	001a      	movs	r2, r3
 800add6:	2300      	movs	r3, #0
 800add8:	4d05      	ldr	r5, [pc, #20]	; (800adf0 <_write_r+0x24>)
 800adda:	602b      	str	r3, [r5, #0]
 800addc:	f7fd fa72 	bl	80082c4 <_write>
 800ade0:	1c43      	adds	r3, r0, #1
 800ade2:	d103      	bne.n	800adec <_write_r+0x20>
 800ade4:	682b      	ldr	r3, [r5, #0]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d000      	beq.n	800adec <_write_r+0x20>
 800adea:	6023      	str	r3, [r4, #0]
 800adec:	bd70      	pop	{r4, r5, r6, pc}
 800adee:	46c0      	nop			; (mov r8, r8)
 800adf0:	20000270 	.word	0x20000270

0800adf4 <_close_r>:
 800adf4:	2300      	movs	r3, #0
 800adf6:	b570      	push	{r4, r5, r6, lr}
 800adf8:	4d06      	ldr	r5, [pc, #24]	; (800ae14 <_close_r+0x20>)
 800adfa:	0004      	movs	r4, r0
 800adfc:	0008      	movs	r0, r1
 800adfe:	602b      	str	r3, [r5, #0]
 800ae00:	f7fd fcb0 	bl	8008764 <_close>
 800ae04:	1c43      	adds	r3, r0, #1
 800ae06:	d103      	bne.n	800ae10 <_close_r+0x1c>
 800ae08:	682b      	ldr	r3, [r5, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d000      	beq.n	800ae10 <_close_r+0x1c>
 800ae0e:	6023      	str	r3, [r4, #0]
 800ae10:	bd70      	pop	{r4, r5, r6, pc}
 800ae12:	46c0      	nop			; (mov r8, r8)
 800ae14:	20000270 	.word	0x20000270

0800ae18 <_fstat_r>:
 800ae18:	2300      	movs	r3, #0
 800ae1a:	b570      	push	{r4, r5, r6, lr}
 800ae1c:	4d06      	ldr	r5, [pc, #24]	; (800ae38 <_fstat_r+0x20>)
 800ae1e:	0004      	movs	r4, r0
 800ae20:	0008      	movs	r0, r1
 800ae22:	0011      	movs	r1, r2
 800ae24:	602b      	str	r3, [r5, #0]
 800ae26:	f7fd fca7 	bl	8008778 <_fstat>
 800ae2a:	1c43      	adds	r3, r0, #1
 800ae2c:	d103      	bne.n	800ae36 <_fstat_r+0x1e>
 800ae2e:	682b      	ldr	r3, [r5, #0]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d000      	beq.n	800ae36 <_fstat_r+0x1e>
 800ae34:	6023      	str	r3, [r4, #0]
 800ae36:	bd70      	pop	{r4, r5, r6, pc}
 800ae38:	20000270 	.word	0x20000270

0800ae3c <_isatty_r>:
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	b570      	push	{r4, r5, r6, lr}
 800ae40:	4d06      	ldr	r5, [pc, #24]	; (800ae5c <_isatty_r+0x20>)
 800ae42:	0004      	movs	r4, r0
 800ae44:	0008      	movs	r0, r1
 800ae46:	602b      	str	r3, [r5, #0]
 800ae48:	f7fd fca4 	bl	8008794 <_isatty>
 800ae4c:	1c43      	adds	r3, r0, #1
 800ae4e:	d103      	bne.n	800ae58 <_isatty_r+0x1c>
 800ae50:	682b      	ldr	r3, [r5, #0]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d000      	beq.n	800ae58 <_isatty_r+0x1c>
 800ae56:	6023      	str	r3, [r4, #0]
 800ae58:	bd70      	pop	{r4, r5, r6, pc}
 800ae5a:	46c0      	nop			; (mov r8, r8)
 800ae5c:	20000270 	.word	0x20000270

0800ae60 <_lseek_r>:
 800ae60:	b570      	push	{r4, r5, r6, lr}
 800ae62:	0004      	movs	r4, r0
 800ae64:	0008      	movs	r0, r1
 800ae66:	0011      	movs	r1, r2
 800ae68:	001a      	movs	r2, r3
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	4d05      	ldr	r5, [pc, #20]	; (800ae84 <_lseek_r+0x24>)
 800ae6e:	602b      	str	r3, [r5, #0]
 800ae70:	f7fd fc99 	bl	80087a6 <_lseek>
 800ae74:	1c43      	adds	r3, r0, #1
 800ae76:	d103      	bne.n	800ae80 <_lseek_r+0x20>
 800ae78:	682b      	ldr	r3, [r5, #0]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d000      	beq.n	800ae80 <_lseek_r+0x20>
 800ae7e:	6023      	str	r3, [r4, #0]
 800ae80:	bd70      	pop	{r4, r5, r6, pc}
 800ae82:	46c0      	nop			; (mov r8, r8)
 800ae84:	20000270 	.word	0x20000270

0800ae88 <__malloc_lock>:
 800ae88:	b510      	push	{r4, lr}
 800ae8a:	4802      	ldr	r0, [pc, #8]	; (800ae94 <__malloc_lock+0xc>)
 800ae8c:	f7ff fe29 	bl	800aae2 <__retarget_lock_acquire_recursive>
 800ae90:	bd10      	pop	{r4, pc}
 800ae92:	46c0      	nop			; (mov r8, r8)
 800ae94:	20000268 	.word	0x20000268

0800ae98 <__malloc_unlock>:
 800ae98:	b510      	push	{r4, lr}
 800ae9a:	4802      	ldr	r0, [pc, #8]	; (800aea4 <__malloc_unlock+0xc>)
 800ae9c:	f7ff fe22 	bl	800aae4 <__retarget_lock_release_recursive>
 800aea0:	bd10      	pop	{r4, pc}
 800aea2:	46c0      	nop			; (mov r8, r8)
 800aea4:	20000268 	.word	0x20000268

0800aea8 <_read_r>:
 800aea8:	b570      	push	{r4, r5, r6, lr}
 800aeaa:	0004      	movs	r4, r0
 800aeac:	0008      	movs	r0, r1
 800aeae:	0011      	movs	r1, r2
 800aeb0:	001a      	movs	r2, r3
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	4d05      	ldr	r5, [pc, #20]	; (800aecc <_read_r+0x24>)
 800aeb6:	602b      	str	r3, [r5, #0]
 800aeb8:	f7fd fc37 	bl	800872a <_read>
 800aebc:	1c43      	adds	r3, r0, #1
 800aebe:	d103      	bne.n	800aec8 <_read_r+0x20>
 800aec0:	682b      	ldr	r3, [r5, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d000      	beq.n	800aec8 <_read_r+0x20>
 800aec6:	6023      	str	r3, [r4, #0]
 800aec8:	bd70      	pop	{r4, r5, r6, pc}
 800aeca:	46c0      	nop			; (mov r8, r8)
 800aecc:	20000270 	.word	0x20000270

0800aed0 <_init>:
 800aed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aed2:	46c0      	nop			; (mov r8, r8)
 800aed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aed6:	bc08      	pop	{r3}
 800aed8:	469e      	mov	lr, r3
 800aeda:	4770      	bx	lr

0800aedc <_fini>:
 800aedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aede:	46c0      	nop			; (mov r8, r8)
 800aee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aee2:	bc08      	pop	{r3}
 800aee4:	469e      	mov	lr, r3
 800aee6:	4770      	bx	lr
