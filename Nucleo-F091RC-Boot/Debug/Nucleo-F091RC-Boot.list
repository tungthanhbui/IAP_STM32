
Nucleo-F091RC-Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fa4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08003060  08003060  00013060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003160  08003160  00020130  2**0
                  CONTENTS
  4 .ARM          00000000  08003160  08003160  00020130  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003160  08003160  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003160  08003160  00013160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003164  08003164  00013164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  200000c0  08003168  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000130  080031d8  00020130  2**2
                  ALLOC
 10 .rsvd.data    00000004  2000029c  080031d8  0002029c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002a0  080031d8  000202a0  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a5e9  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bb7  00000000  00000000  0002a741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000790  00000000  00000000  0002c2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006d8  00000000  00000000  0002ca88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b6f5  00000000  00000000  0002d160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a351  00000000  00000000  00048855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a2a60  00000000  00000000  00052ba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000f5606  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001fa4  00000000  00000000  000f565c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000130 	.word	0x20000130
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003048 	.word	0x08003048

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000134 	.word	0x20000134
 8000100:	08003048 	.word	0x08003048

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b088      	sub	sp, #32
 8000220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t str_uart2[] = "UART2...\r\n";
 8000222:	2310      	movs	r3, #16
 8000224:	18fb      	adds	r3, r7, r3
 8000226:	4a24      	ldr	r2, [pc, #144]	; (80002b8 <main+0x9c>)
 8000228:	ca03      	ldmia	r2!, {r0, r1}
 800022a:	c303      	stmia	r3!, {r0, r1}
 800022c:	8811      	ldrh	r1, [r2, #0]
 800022e:	8019      	strh	r1, [r3, #0]
 8000230:	7892      	ldrb	r2, [r2, #2]
 8000232:	709a      	strb	r2, [r3, #2]
	uint8_t str_uart3[] = "UART3...\r\n";
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	4a21      	ldr	r2, [pc, #132]	; (80002bc <main+0xa0>)
 8000238:	ca03      	ldmia	r2!, {r0, r1}
 800023a:	c303      	stmia	r3!, {r0, r1}
 800023c:	8811      	ldrh	r1, [r2, #0]
 800023e:	8019      	strh	r1, [r3, #0]
 8000240:	7892      	ldrb	r2, [r2, #2]
 8000242:	709a      	strb	r2, [r3, #2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000244:	f000 fb56 	bl	80008f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000248:	f000 f868 	bl	800031c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024c:	f000 f952 	bl	80004f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000250:	f000 f8f0 	bl	8000434 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000254:	f000 f91e 	bl	8000494 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8000258:	f000 f8c8 	bl	80003ec <MX_CRC_Init>
  /* USER CODE BEGIN WHILE */
//  while (1)
//  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  if(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 800025c:	2380      	movs	r3, #128	; 0x80
 800025e:	019b      	lsls	r3, r3, #6
 8000260:	4a17      	ldr	r2, [pc, #92]	; (80002c0 <main+0xa4>)
 8000262:	0019      	movs	r1, r3
 8000264:	0010      	movs	r0, r2
 8000266:	f000 fecd 	bl	8001004 <HAL_GPIO_ReadPin>
 800026a:	1e03      	subs	r3, r0, #0
 800026c:	d113      	bne.n	8000296 <main+0x7a>
		  printf("Blue button is  pressed. jump to Application\r\n");
 800026e:	4b15      	ldr	r3, [pc, #84]	; (80002c4 <main+0xa8>)
 8000270:	0018      	movs	r0, r3
 8000272:	f002 fa4b 	bl	800270c <puts>
		  __set_MSP(*(uint32_t*) 0x08008000);
 8000276:	4b14      	ldr	r3, [pc, #80]	; (80002c8 <main+0xac>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	61fb      	str	r3, [r7, #28]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800027c:	69fb      	ldr	r3, [r7, #28]
 800027e:	f383 8808 	msr	MSP, r3
}
 8000282:	46c0      	nop			; (mov r8, r8)
		  Jump2App = *(uint32_t *)(0x08008000 + 4);
 8000284:	4b11      	ldr	r3, [pc, #68]	; (80002cc <main+0xb0>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	001a      	movs	r2, r3
 800028a:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <main+0xb4>)
 800028c:	601a      	str	r2, [r3, #0]
		  Jump2App();
 800028e:	4b10      	ldr	r3, [pc, #64]	; (80002d0 <main+0xb4>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4798      	blx	r3
 8000294:	e003      	b.n	800029e <main+0x82>
	  }
	  else{
		  printf("Blue button is not pressed\r\n");
 8000296:	4b0f      	ldr	r3, [pc, #60]	; (80002d4 <main+0xb8>)
 8000298:	0018      	movs	r0, r3
 800029a:	f002 fa37 	bl	800270c <puts>
	  }
	  HAL_Delay(2000);
 800029e:	23fa      	movs	r3, #250	; 0xfa
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	0018      	movs	r0, r3
 80002a4:	f000 fb8a 	bl	80009bc <HAL_Delay>
//  }
  /* USER CODE END 3 */
	  bootloader_vtor = 0;
 80002a8:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <main+0xbc>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	2300      	movs	r3, #0
}
 80002b0:	0018      	movs	r0, r3
 80002b2:	46bd      	mov	sp, r7
 80002b4:	b008      	add	sp, #32
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	080030ac 	.word	0x080030ac
 80002bc:	080030b8 	.word	0x080030b8
 80002c0:	48000800 	.word	0x48000800
 80002c4:	08003060 	.word	0x08003060
 80002c8:	08008000 	.word	0x08008000
 80002cc:	08008004 	.word	0x08008004
 80002d0:	20000284 	.word	0x20000284
 80002d4:	08003090 	.word	0x08003090
 80002d8:	2000029c 	.word	0x2000029c

080002dc <_write>:

int _write(int file, char *ptr, int len){
 80002dc:	b580      	push	{r7, lr}
 80002de:	b086      	sub	sp, #24
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	60f8      	str	r0, [r7, #12]
 80002e4:	60b9      	str	r1, [r7, #8]
 80002e6:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++){
 80002e8:	2300      	movs	r3, #0
 80002ea:	617b      	str	r3, [r7, #20]
 80002ec:	e00a      	b.n	8000304 <_write+0x28>
		HAL_UART_Transmit(&huart3, (uint8_t *)ptr++, 1, 100);
 80002ee:	68b9      	ldr	r1, [r7, #8]
 80002f0:	1c4b      	adds	r3, r1, #1
 80002f2:	60bb      	str	r3, [r7, #8]
 80002f4:	4808      	ldr	r0, [pc, #32]	; (8000318 <_write+0x3c>)
 80002f6:	2364      	movs	r3, #100	; 0x64
 80002f8:	2201      	movs	r2, #1
 80002fa:	f001 fd11 	bl	8001d20 <HAL_UART_Transmit>
	for(DataIdx=0; DataIdx<len; DataIdx++){
 80002fe:	697b      	ldr	r3, [r7, #20]
 8000300:	3301      	adds	r3, #1
 8000302:	617b      	str	r3, [r7, #20]
 8000304:	697a      	ldr	r2, [r7, #20]
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	429a      	cmp	r2, r3
 800030a:	dbf0      	blt.n	80002ee <_write+0x12>
	}
	return len;
 800030c:	687b      	ldr	r3, [r7, #4]
}
 800030e:	0018      	movs	r0, r3
 8000310:	46bd      	mov	sp, r7
 8000312:	b006      	add	sp, #24
 8000314:	bd80      	pop	{r7, pc}
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	20000158 	.word	0x20000158

0800031c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800031c:	b590      	push	{r4, r7, lr}
 800031e:	b099      	sub	sp, #100	; 0x64
 8000320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000322:	242c      	movs	r4, #44	; 0x2c
 8000324:	193b      	adds	r3, r7, r4
 8000326:	0018      	movs	r0, r3
 8000328:	2334      	movs	r3, #52	; 0x34
 800032a:	001a      	movs	r2, r3
 800032c:	2100      	movs	r1, #0
 800032e:	f002 f973 	bl	8002618 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000332:	231c      	movs	r3, #28
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	0018      	movs	r0, r3
 8000338:	2310      	movs	r3, #16
 800033a:	001a      	movs	r2, r3
 800033c:	2100      	movs	r1, #0
 800033e:	f002 f96b 	bl	8002618 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000342:	003b      	movs	r3, r7
 8000344:	0018      	movs	r0, r3
 8000346:	231c      	movs	r3, #28
 8000348:	001a      	movs	r2, r3
 800034a:	2100      	movs	r1, #0
 800034c:	f002 f964 	bl	8002618 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000350:	0021      	movs	r1, r4
 8000352:	187b      	adds	r3, r7, r1
 8000354:	2202      	movs	r2, #2
 8000356:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000358:	187b      	adds	r3, r7, r1
 800035a:	2201      	movs	r2, #1
 800035c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800035e:	187b      	adds	r3, r7, r1
 8000360:	2210      	movs	r2, #16
 8000362:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000364:	187b      	adds	r3, r7, r1
 8000366:	2202      	movs	r2, #2
 8000368:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800036a:	187b      	adds	r3, r7, r1
 800036c:	2280      	movs	r2, #128	; 0x80
 800036e:	0212      	lsls	r2, r2, #8
 8000370:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000372:	187b      	adds	r3, r7, r1
 8000374:	22a0      	movs	r2, #160	; 0xa0
 8000376:	0392      	lsls	r2, r2, #14
 8000378:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2201      	movs	r2, #1
 800037e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000380:	187b      	adds	r3, r7, r1
 8000382:	0018      	movs	r0, r3
 8000384:	f000 fe78 	bl	8001078 <HAL_RCC_OscConfig>
 8000388:	1e03      	subs	r3, r0, #0
 800038a:	d001      	beq.n	8000390 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800038c:	f000 f91c 	bl	80005c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000390:	211c      	movs	r1, #28
 8000392:	187b      	adds	r3, r7, r1
 8000394:	2207      	movs	r2, #7
 8000396:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000398:	187b      	adds	r3, r7, r1
 800039a:	2202      	movs	r2, #2
 800039c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2200      	movs	r2, #0
 80003a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	2200      	movs	r2, #0
 80003a8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003aa:	187b      	adds	r3, r7, r1
 80003ac:	2101      	movs	r1, #1
 80003ae:	0018      	movs	r0, r3
 80003b0:	f001 f9e8 	bl	8001784 <HAL_RCC_ClockConfig>
 80003b4:	1e03      	subs	r3, r0, #0
 80003b6:	d001      	beq.n	80003bc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80003b8:	f000 f906 	bl	80005c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2;
 80003bc:	003b      	movs	r3, r7
 80003be:	4a0a      	ldr	r2, [pc, #40]	; (80003e8 <SystemClock_Config+0xcc>)
 80003c0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003c2:	003b      	movs	r3, r7
 80003c4:	2200      	movs	r2, #0
 80003c6:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80003c8:	003b      	movs	r3, r7
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ce:	003b      	movs	r3, r7
 80003d0:	0018      	movs	r0, r3
 80003d2:	f001 fb51 	bl	8001a78 <HAL_RCCEx_PeriphCLKConfig>
 80003d6:	1e03      	subs	r3, r0, #0
 80003d8:	d001      	beq.n	80003de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80003da:	f000 f8f5 	bl	80005c8 <Error_Handler>
  }
}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	46bd      	mov	sp, r7
 80003e2:	b019      	add	sp, #100	; 0x64
 80003e4:	bd90      	pop	{r4, r7, pc}
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	00040002 	.word	0x00040002

080003ec <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80003f0:	4b0e      	ldr	r3, [pc, #56]	; (800042c <MX_CRC_Init+0x40>)
 80003f2:	4a0f      	ldr	r2, [pc, #60]	; (8000430 <MX_CRC_Init+0x44>)
 80003f4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80003f6:	4b0d      	ldr	r3, [pc, #52]	; (800042c <MX_CRC_Init+0x40>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80003fc:	4b0b      	ldr	r3, [pc, #44]	; (800042c <MX_CRC_Init+0x40>)
 80003fe:	2200      	movs	r2, #0
 8000400:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000402:	4b0a      	ldr	r3, [pc, #40]	; (800042c <MX_CRC_Init+0x40>)
 8000404:	2200      	movs	r2, #0
 8000406:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000408:	4b08      	ldr	r3, [pc, #32]	; (800042c <MX_CRC_Init+0x40>)
 800040a:	2200      	movs	r2, #0
 800040c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800040e:	4b07      	ldr	r3, [pc, #28]	; (800042c <MX_CRC_Init+0x40>)
 8000410:	2201      	movs	r2, #1
 8000412:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000414:	4b05      	ldr	r3, [pc, #20]	; (800042c <MX_CRC_Init+0x40>)
 8000416:	0018      	movs	r0, r3
 8000418:	f000 fba8 	bl	8000b6c <HAL_CRC_Init>
 800041c:	1e03      	subs	r3, r0, #0
 800041e:	d001      	beq.n	8000424 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000420:	f000 f8d2 	bl	80005c8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000424:	46c0      	nop			; (mov r8, r8)
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	200001dc 	.word	0x200001dc
 8000430:	40023000 	.word	0x40023000

08000434 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000438:	4b14      	ldr	r3, [pc, #80]	; (800048c <MX_USART2_UART_Init+0x58>)
 800043a:	4a15      	ldr	r2, [pc, #84]	; (8000490 <MX_USART2_UART_Init+0x5c>)
 800043c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800043e:	4b13      	ldr	r3, [pc, #76]	; (800048c <MX_USART2_UART_Init+0x58>)
 8000440:	22e1      	movs	r2, #225	; 0xe1
 8000442:	0252      	lsls	r2, r2, #9
 8000444:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000446:	4b11      	ldr	r3, [pc, #68]	; (800048c <MX_USART2_UART_Init+0x58>)
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800044c:	4b0f      	ldr	r3, [pc, #60]	; (800048c <MX_USART2_UART_Init+0x58>)
 800044e:	2200      	movs	r2, #0
 8000450:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <MX_USART2_UART_Init+0x58>)
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <MX_USART2_UART_Init+0x58>)
 800045a:	220c      	movs	r2, #12
 800045c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800045e:	4b0b      	ldr	r3, [pc, #44]	; (800048c <MX_USART2_UART_Init+0x58>)
 8000460:	2200      	movs	r2, #0
 8000462:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000464:	4b09      	ldr	r3, [pc, #36]	; (800048c <MX_USART2_UART_Init+0x58>)
 8000466:	2200      	movs	r2, #0
 8000468:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <MX_USART2_UART_Init+0x58>)
 800046c:	2200      	movs	r2, #0
 800046e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <MX_USART2_UART_Init+0x58>)
 8000472:	2200      	movs	r2, #0
 8000474:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000476:	4b05      	ldr	r3, [pc, #20]	; (800048c <MX_USART2_UART_Init+0x58>)
 8000478:	0018      	movs	r0, r3
 800047a:	f001 fbfd 	bl	8001c78 <HAL_UART_Init>
 800047e:	1e03      	subs	r3, r0, #0
 8000480:	d001      	beq.n	8000486 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000482:	f000 f8a1 	bl	80005c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	20000200 	.word	0x20000200
 8000490:	40004400 	.word	0x40004400

08000494 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000498:	4b14      	ldr	r3, [pc, #80]	; (80004ec <MX_USART3_UART_Init+0x58>)
 800049a:	4a15      	ldr	r2, [pc, #84]	; (80004f0 <MX_USART3_UART_Init+0x5c>)
 800049c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800049e:	4b13      	ldr	r3, [pc, #76]	; (80004ec <MX_USART3_UART_Init+0x58>)
 80004a0:	22e1      	movs	r2, #225	; 0xe1
 80004a2:	0252      	lsls	r2, r2, #9
 80004a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80004a6:	4b11      	ldr	r3, [pc, #68]	; (80004ec <MX_USART3_UART_Init+0x58>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <MX_USART3_UART_Init+0x58>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <MX_USART3_UART_Init+0x58>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <MX_USART3_UART_Init+0x58>)
 80004ba:	220c      	movs	r2, #12
 80004bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004be:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <MX_USART3_UART_Init+0x58>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c4:	4b09      	ldr	r3, [pc, #36]	; (80004ec <MX_USART3_UART_Init+0x58>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <MX_USART3_UART_Init+0x58>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <MX_USART3_UART_Init+0x58>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80004d6:	4b05      	ldr	r3, [pc, #20]	; (80004ec <MX_USART3_UART_Init+0x58>)
 80004d8:	0018      	movs	r0, r3
 80004da:	f001 fbcd 	bl	8001c78 <HAL_UART_Init>
 80004de:	1e03      	subs	r3, r0, #0
 80004e0:	d001      	beq.n	80004e6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80004e2:	f000 f871 	bl	80005c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000158 	.word	0x20000158
 80004f0:	40004800 	.word	0x40004800

080004f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f4:	b590      	push	{r4, r7, lr}
 80004f6:	b089      	sub	sp, #36	; 0x24
 80004f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	240c      	movs	r4, #12
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	0018      	movs	r0, r3
 8000500:	2314      	movs	r3, #20
 8000502:	001a      	movs	r2, r3
 8000504:	2100      	movs	r1, #0
 8000506:	f002 f887 	bl	8002618 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	4b2d      	ldr	r3, [pc, #180]	; (80005c0 <MX_GPIO_Init+0xcc>)
 800050c:	695a      	ldr	r2, [r3, #20]
 800050e:	4b2c      	ldr	r3, [pc, #176]	; (80005c0 <MX_GPIO_Init+0xcc>)
 8000510:	2180      	movs	r1, #128	; 0x80
 8000512:	0309      	lsls	r1, r1, #12
 8000514:	430a      	orrs	r2, r1
 8000516:	615a      	str	r2, [r3, #20]
 8000518:	4b29      	ldr	r3, [pc, #164]	; (80005c0 <MX_GPIO_Init+0xcc>)
 800051a:	695a      	ldr	r2, [r3, #20]
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	031b      	lsls	r3, r3, #12
 8000520:	4013      	ands	r3, r2
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000526:	4b26      	ldr	r3, [pc, #152]	; (80005c0 <MX_GPIO_Init+0xcc>)
 8000528:	695a      	ldr	r2, [r3, #20]
 800052a:	4b25      	ldr	r3, [pc, #148]	; (80005c0 <MX_GPIO_Init+0xcc>)
 800052c:	2180      	movs	r1, #128	; 0x80
 800052e:	03c9      	lsls	r1, r1, #15
 8000530:	430a      	orrs	r2, r1
 8000532:	615a      	str	r2, [r3, #20]
 8000534:	4b22      	ldr	r3, [pc, #136]	; (80005c0 <MX_GPIO_Init+0xcc>)
 8000536:	695a      	ldr	r2, [r3, #20]
 8000538:	2380      	movs	r3, #128	; 0x80
 800053a:	03db      	lsls	r3, r3, #15
 800053c:	4013      	ands	r3, r2
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <MX_GPIO_Init+0xcc>)
 8000544:	695a      	ldr	r2, [r3, #20]
 8000546:	4b1e      	ldr	r3, [pc, #120]	; (80005c0 <MX_GPIO_Init+0xcc>)
 8000548:	2180      	movs	r1, #128	; 0x80
 800054a:	0289      	lsls	r1, r1, #10
 800054c:	430a      	orrs	r2, r1
 800054e:	615a      	str	r2, [r3, #20]
 8000550:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <MX_GPIO_Init+0xcc>)
 8000552:	695a      	ldr	r2, [r3, #20]
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	029b      	lsls	r3, r3, #10
 8000558:	4013      	ands	r3, r2
 800055a:	603b      	str	r3, [r7, #0]
 800055c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800055e:	2390      	movs	r3, #144	; 0x90
 8000560:	05db      	lsls	r3, r3, #23
 8000562:	2200      	movs	r2, #0
 8000564:	2120      	movs	r1, #32
 8000566:	0018      	movs	r0, r3
 8000568:	f000 fd69 	bl	800103e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800056c:	193b      	adds	r3, r7, r4
 800056e:	2280      	movs	r2, #128	; 0x80
 8000570:	0192      	lsls	r2, r2, #6
 8000572:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000574:	193b      	adds	r3, r7, r4
 8000576:	2284      	movs	r2, #132	; 0x84
 8000578:	0392      	lsls	r2, r2, #14
 800057a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	193b      	adds	r3, r7, r4
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000582:	193b      	adds	r3, r7, r4
 8000584:	4a0f      	ldr	r2, [pc, #60]	; (80005c4 <MX_GPIO_Init+0xd0>)
 8000586:	0019      	movs	r1, r3
 8000588:	0010      	movs	r0, r2
 800058a:	f000 fbc3 	bl	8000d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800058e:	0021      	movs	r1, r4
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2220      	movs	r2, #32
 8000594:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2201      	movs	r2, #1
 800059a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	2200      	movs	r2, #0
 80005a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005a8:	187a      	adds	r2, r7, r1
 80005aa:	2390      	movs	r3, #144	; 0x90
 80005ac:	05db      	lsls	r3, r3, #23
 80005ae:	0011      	movs	r1, r2
 80005b0:	0018      	movs	r0, r3
 80005b2:	f000 fbaf 	bl	8000d14 <HAL_GPIO_Init>

}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	b009      	add	sp, #36	; 0x24
 80005bc:	bd90      	pop	{r4, r7, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	40021000 	.word	0x40021000
 80005c4:	48000800 	.word	0x48000800

080005c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80005cc:	b672      	cpsid	i
}
 80005ce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <Error_Handler+0x8>
	...

080005d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005da:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <HAL_MspInit+0x44>)
 80005dc:	699a      	ldr	r2, [r3, #24]
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <HAL_MspInit+0x44>)
 80005e0:	2101      	movs	r1, #1
 80005e2:	430a      	orrs	r2, r1
 80005e4:	619a      	str	r2, [r3, #24]
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <HAL_MspInit+0x44>)
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	2201      	movs	r2, #1
 80005ec:	4013      	ands	r3, r2
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <HAL_MspInit+0x44>)
 80005f4:	69da      	ldr	r2, [r3, #28]
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <HAL_MspInit+0x44>)
 80005f8:	2180      	movs	r1, #128	; 0x80
 80005fa:	0549      	lsls	r1, r1, #21
 80005fc:	430a      	orrs	r2, r1
 80005fe:	61da      	str	r2, [r3, #28]
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <HAL_MspInit+0x44>)
 8000602:	69da      	ldr	r2, [r3, #28]
 8000604:	2380      	movs	r3, #128	; 0x80
 8000606:	055b      	lsls	r3, r3, #21
 8000608:	4013      	ands	r3, r2
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	46bd      	mov	sp, r7
 8000612:	b002      	add	sp, #8
 8000614:	bd80      	pop	{r7, pc}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	40021000 	.word	0x40021000

0800061c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a09      	ldr	r2, [pc, #36]	; (8000650 <HAL_CRC_MspInit+0x34>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d10b      	bne.n	8000646 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <HAL_CRC_MspInit+0x38>)
 8000630:	695a      	ldr	r2, [r3, #20]
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <HAL_CRC_MspInit+0x38>)
 8000634:	2140      	movs	r1, #64	; 0x40
 8000636:	430a      	orrs	r2, r1
 8000638:	615a      	str	r2, [r3, #20]
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_CRC_MspInit+0x38>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	2240      	movs	r2, #64	; 0x40
 8000640:	4013      	ands	r3, r2
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	b004      	add	sp, #16
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	40023000 	.word	0x40023000
 8000654:	40021000 	.word	0x40021000

08000658 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b08d      	sub	sp, #52	; 0x34
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	241c      	movs	r4, #28
 8000662:	193b      	adds	r3, r7, r4
 8000664:	0018      	movs	r0, r3
 8000666:	2314      	movs	r3, #20
 8000668:	001a      	movs	r2, r3
 800066a:	2100      	movs	r1, #0
 800066c:	f001 ffd4 	bl	8002618 <memset>
  if(huart->Instance==USART2)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a38      	ldr	r2, [pc, #224]	; (8000758 <HAL_UART_MspInit+0x100>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d133      	bne.n	80006e2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800067a:	4b38      	ldr	r3, [pc, #224]	; (800075c <HAL_UART_MspInit+0x104>)
 800067c:	69da      	ldr	r2, [r3, #28]
 800067e:	4b37      	ldr	r3, [pc, #220]	; (800075c <HAL_UART_MspInit+0x104>)
 8000680:	2180      	movs	r1, #128	; 0x80
 8000682:	0289      	lsls	r1, r1, #10
 8000684:	430a      	orrs	r2, r1
 8000686:	61da      	str	r2, [r3, #28]
 8000688:	4b34      	ldr	r3, [pc, #208]	; (800075c <HAL_UART_MspInit+0x104>)
 800068a:	69da      	ldr	r2, [r3, #28]
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	029b      	lsls	r3, r3, #10
 8000690:	4013      	ands	r3, r2
 8000692:	61bb      	str	r3, [r7, #24]
 8000694:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	4b31      	ldr	r3, [pc, #196]	; (800075c <HAL_UART_MspInit+0x104>)
 8000698:	695a      	ldr	r2, [r3, #20]
 800069a:	4b30      	ldr	r3, [pc, #192]	; (800075c <HAL_UART_MspInit+0x104>)
 800069c:	2180      	movs	r1, #128	; 0x80
 800069e:	0289      	lsls	r1, r1, #10
 80006a0:	430a      	orrs	r2, r1
 80006a2:	615a      	str	r2, [r3, #20]
 80006a4:	4b2d      	ldr	r3, [pc, #180]	; (800075c <HAL_UART_MspInit+0x104>)
 80006a6:	695a      	ldr	r2, [r3, #20]
 80006a8:	2380      	movs	r3, #128	; 0x80
 80006aa:	029b      	lsls	r3, r3, #10
 80006ac:	4013      	ands	r3, r2
 80006ae:	617b      	str	r3, [r7, #20]
 80006b0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006b2:	0021      	movs	r1, r4
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	220c      	movs	r2, #12
 80006b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2202      	movs	r2, #2
 80006be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2200      	movs	r2, #0
 80006ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2201      	movs	r2, #1
 80006d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d2:	187a      	adds	r2, r7, r1
 80006d4:	2390      	movs	r3, #144	; 0x90
 80006d6:	05db      	lsls	r3, r3, #23
 80006d8:	0011      	movs	r1, r2
 80006da:	0018      	movs	r0, r3
 80006dc:	f000 fb1a 	bl	8000d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80006e0:	e036      	b.n	8000750 <HAL_UART_MspInit+0xf8>
  else if(huart->Instance==USART3)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a1e      	ldr	r2, [pc, #120]	; (8000760 <HAL_UART_MspInit+0x108>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d131      	bne.n	8000750 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART3_CLK_ENABLE();
 80006ec:	4b1b      	ldr	r3, [pc, #108]	; (800075c <HAL_UART_MspInit+0x104>)
 80006ee:	69da      	ldr	r2, [r3, #28]
 80006f0:	4b1a      	ldr	r3, [pc, #104]	; (800075c <HAL_UART_MspInit+0x104>)
 80006f2:	2180      	movs	r1, #128	; 0x80
 80006f4:	02c9      	lsls	r1, r1, #11
 80006f6:	430a      	orrs	r2, r1
 80006f8:	61da      	str	r2, [r3, #28]
 80006fa:	4b18      	ldr	r3, [pc, #96]	; (800075c <HAL_UART_MspInit+0x104>)
 80006fc:	69da      	ldr	r2, [r3, #28]
 80006fe:	2380      	movs	r3, #128	; 0x80
 8000700:	02db      	lsls	r3, r3, #11
 8000702:	4013      	ands	r3, r2
 8000704:	613b      	str	r3, [r7, #16]
 8000706:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <HAL_UART_MspInit+0x104>)
 800070a:	695a      	ldr	r2, [r3, #20]
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <HAL_UART_MspInit+0x104>)
 800070e:	2180      	movs	r1, #128	; 0x80
 8000710:	0309      	lsls	r1, r1, #12
 8000712:	430a      	orrs	r2, r1
 8000714:	615a      	str	r2, [r3, #20]
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <HAL_UART_MspInit+0x104>)
 8000718:	695a      	ldr	r2, [r3, #20]
 800071a:	2380      	movs	r3, #128	; 0x80
 800071c:	031b      	lsls	r3, r3, #12
 800071e:	4013      	ands	r3, r2
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000724:	211c      	movs	r1, #28
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2230      	movs	r2, #48	; 0x30
 800072a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2202      	movs	r2, #2
 8000730:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2203      	movs	r2, #3
 800073c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2201      	movs	r2, #1
 8000742:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000744:	187b      	adds	r3, r7, r1
 8000746:	4a07      	ldr	r2, [pc, #28]	; (8000764 <HAL_UART_MspInit+0x10c>)
 8000748:	0019      	movs	r1, r3
 800074a:	0010      	movs	r0, r2
 800074c:	f000 fae2 	bl	8000d14 <HAL_GPIO_Init>
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	b00d      	add	sp, #52	; 0x34
 8000756:	bd90      	pop	{r4, r7, pc}
 8000758:	40004400 	.word	0x40004400
 800075c:	40021000 	.word	0x40021000
 8000760:	40004800 	.word	0x40004800
 8000764:	48000800 	.word	0x48000800

08000768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800076c:	e7fe      	b.n	800076c <NMI_Handler+0x4>

0800076e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000772:	e7fe      	b.n	8000772 <HardFault_Handler+0x4>

08000774 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800078c:	f000 f8fa 	bl	8000984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b086      	sub	sp, #24
 800079a:	af00      	add	r7, sp, #0
 800079c:	60f8      	str	r0, [r7, #12]
 800079e:	60b9      	str	r1, [r7, #8]
 80007a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
 80007a6:	e00a      	b.n	80007be <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007a8:	e000      	b.n	80007ac <_read+0x16>
 80007aa:	bf00      	nop
 80007ac:	0001      	movs	r1, r0
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	1c5a      	adds	r2, r3, #1
 80007b2:	60ba      	str	r2, [r7, #8]
 80007b4:	b2ca      	uxtb	r2, r1
 80007b6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	3301      	adds	r3, #1
 80007bc:	617b      	str	r3, [r7, #20]
 80007be:	697a      	ldr	r2, [r7, #20]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	429a      	cmp	r2, r3
 80007c4:	dbf0      	blt.n	80007a8 <_read+0x12>
	}

return len;
 80007c6:	687b      	ldr	r3, [r7, #4]
}
 80007c8:	0018      	movs	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	b006      	add	sp, #24
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <_close>:
	}
	return len;
}

int _close(int file)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	return -1;
 80007d8:	2301      	movs	r3, #1
 80007da:	425b      	negs	r3, r3
}
 80007dc:	0018      	movs	r0, r3
 80007de:	46bd      	mov	sp, r7
 80007e0:	b002      	add	sp, #8
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	2280      	movs	r2, #128	; 0x80
 80007f2:	0192      	lsls	r2, r2, #6
 80007f4:	605a      	str	r2, [r3, #4]
	return 0;
 80007f6:	2300      	movs	r3, #0
}
 80007f8:	0018      	movs	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	b002      	add	sp, #8
 80007fe:	bd80      	pop	{r7, pc}

08000800 <_isatty>:

int _isatty(int file)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	return 1;
 8000808:	2301      	movs	r3, #1
}
 800080a:	0018      	movs	r0, r3
 800080c:	46bd      	mov	sp, r7
 800080e:	b002      	add	sp, #8
 8000810:	bd80      	pop	{r7, pc}

08000812 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b084      	sub	sp, #16
 8000816:	af00      	add	r7, sp, #0
 8000818:	60f8      	str	r0, [r7, #12]
 800081a:	60b9      	str	r1, [r7, #8]
 800081c:	607a      	str	r2, [r7, #4]
	return 0;
 800081e:	2300      	movs	r3, #0
}
 8000820:	0018      	movs	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	b004      	add	sp, #16
 8000826:	bd80      	pop	{r7, pc}

08000828 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000830:	4a14      	ldr	r2, [pc, #80]	; (8000884 <_sbrk+0x5c>)
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <_sbrk+0x60>)
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800083c:	4b13      	ldr	r3, [pc, #76]	; (800088c <_sbrk+0x64>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d102      	bne.n	800084a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <_sbrk+0x64>)
 8000846:	4a12      	ldr	r2, [pc, #72]	; (8000890 <_sbrk+0x68>)
 8000848:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <_sbrk+0x64>)
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	18d3      	adds	r3, r2, r3
 8000852:	693a      	ldr	r2, [r7, #16]
 8000854:	429a      	cmp	r2, r3
 8000856:	d207      	bcs.n	8000868 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000858:	f001 feb4 	bl	80025c4 <__errno>
 800085c:	0003      	movs	r3, r0
 800085e:	220c      	movs	r2, #12
 8000860:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000862:	2301      	movs	r3, #1
 8000864:	425b      	negs	r3, r3
 8000866:	e009      	b.n	800087c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <_sbrk+0x64>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800086e:	4b07      	ldr	r3, [pc, #28]	; (800088c <_sbrk+0x64>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	18d2      	adds	r2, r2, r3
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <_sbrk+0x64>)
 8000878:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800087a:	68fb      	ldr	r3, [r7, #12]
}
 800087c:	0018      	movs	r0, r3
 800087e:	46bd      	mov	sp, r7
 8000880:	b006      	add	sp, #24
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20008000 	.word	0x20008000
 8000888:	00000400 	.word	0x00000400
 800088c:	2000014c 	.word	0x2000014c
 8000890:	200002a0 	.word	0x200002a0

08000894 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008a0:	480d      	ldr	r0, [pc, #52]	; (80008d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008a2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a4:	480d      	ldr	r0, [pc, #52]	; (80008dc <LoopForever+0x6>)
  ldr r1, =_edata
 80008a6:	490e      	ldr	r1, [pc, #56]	; (80008e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008a8:	4a0e      	ldr	r2, [pc, #56]	; (80008e4 <LoopForever+0xe>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ac:	e002      	b.n	80008b4 <LoopCopyDataInit>

080008ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b2:	3304      	adds	r3, #4

080008b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b8:	d3f9      	bcc.n	80008ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ba:	4a0b      	ldr	r2, [pc, #44]	; (80008e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008bc:	4c0b      	ldr	r4, [pc, #44]	; (80008ec <LoopForever+0x16>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c0:	e001      	b.n	80008c6 <LoopFillZerobss>

080008c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c4:	3204      	adds	r2, #4

080008c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c8:	d3fb      	bcc.n	80008c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008ca:	f7ff ffe3 	bl	8000894 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80008ce:	f001 fe7f 	bl	80025d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008d2:	f7ff fca3 	bl	800021c <main>

080008d6 <LoopForever>:

LoopForever:
    b LoopForever
 80008d6:	e7fe      	b.n	80008d6 <LoopForever>
  ldr   r0, =_estack
 80008d8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80008dc:	200000c0 	.word	0x200000c0
  ldr r1, =_edata
 80008e0:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 80008e4:	08003168 	.word	0x08003168
  ldr r2, =_sbss
 80008e8:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 80008ec:	2000029c 	.word	0x2000029c

080008f0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f0:	e7fe      	b.n	80008f0 <ADC1_COMP_IRQHandler>
	...

080008f4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f8:	4b07      	ldr	r3, [pc, #28]	; (8000918 <HAL_Init+0x24>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_Init+0x24>)
 80008fe:	2110      	movs	r1, #16
 8000900:	430a      	orrs	r2, r1
 8000902:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000904:	2000      	movs	r0, #0
 8000906:	f000 f809 	bl	800091c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800090a:	f7ff fe63 	bl	80005d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800090e:	2300      	movs	r3, #0
}
 8000910:	0018      	movs	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	40022000 	.word	0x40022000

0800091c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <HAL_InitTick+0x5c>)
 8000926:	681c      	ldr	r4, [r3, #0]
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <HAL_InitTick+0x60>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	0019      	movs	r1, r3
 800092e:	23fa      	movs	r3, #250	; 0xfa
 8000930:	0098      	lsls	r0, r3, #2
 8000932:	f7ff fbe7 	bl	8000104 <__udivsi3>
 8000936:	0003      	movs	r3, r0
 8000938:	0019      	movs	r1, r3
 800093a:	0020      	movs	r0, r4
 800093c:	f7ff fbe2 	bl	8000104 <__udivsi3>
 8000940:	0003      	movs	r3, r0
 8000942:	0018      	movs	r0, r3
 8000944:	f000 f905 	bl	8000b52 <HAL_SYSTICK_Config>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d001      	beq.n	8000950 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800094c:	2301      	movs	r3, #1
 800094e:	e00f      	b.n	8000970 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b03      	cmp	r3, #3
 8000954:	d80b      	bhi.n	800096e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	2301      	movs	r3, #1
 800095a:	425b      	negs	r3, r3
 800095c:	2200      	movs	r2, #0
 800095e:	0018      	movs	r0, r3
 8000960:	f000 f8e2 	bl	8000b28 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_InitTick+0x64>)
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800096a:	2300      	movs	r3, #0
 800096c:	e000      	b.n	8000970 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
}
 8000970:	0018      	movs	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	b003      	add	sp, #12
 8000976:	bd90      	pop	{r4, r7, pc}
 8000978:	200000c0 	.word	0x200000c0
 800097c:	200000c8 	.word	0x200000c8
 8000980:	200000c4 	.word	0x200000c4

08000984 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000988:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <HAL_IncTick+0x1c>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	001a      	movs	r2, r3
 800098e:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <HAL_IncTick+0x20>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	18d2      	adds	r2, r2, r3
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <HAL_IncTick+0x20>)
 8000996:	601a      	str	r2, [r3, #0]
}
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	200000c8 	.word	0x200000c8
 80009a4:	20000288 	.word	0x20000288

080009a8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  return uwTick;
 80009ac:	4b02      	ldr	r3, [pc, #8]	; (80009b8 <HAL_GetTick+0x10>)
 80009ae:	681b      	ldr	r3, [r3, #0]
}
 80009b0:	0018      	movs	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	20000288 	.word	0x20000288

080009bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009c4:	f7ff fff0 	bl	80009a8 <HAL_GetTick>
 80009c8:	0003      	movs	r3, r0
 80009ca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	3301      	adds	r3, #1
 80009d4:	d005      	beq.n	80009e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009d6:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <HAL_Delay+0x44>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	001a      	movs	r2, r3
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	189b      	adds	r3, r3, r2
 80009e0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	f7ff ffe0 	bl	80009a8 <HAL_GetTick>
 80009e8:	0002      	movs	r2, r0
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d8f7      	bhi.n	80009e4 <HAL_Delay+0x28>
  {
  }
}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b004      	add	sp, #16
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	200000c8 	.word	0x200000c8

08000a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	0002      	movs	r2, r0
 8000a0c:	6039      	str	r1, [r7, #0]
 8000a0e:	1dfb      	adds	r3, r7, #7
 8000a10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b7f      	cmp	r3, #127	; 0x7f
 8000a18:	d828      	bhi.n	8000a6c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a1a:	4a2f      	ldr	r2, [pc, #188]	; (8000ad8 <__NVIC_SetPriority+0xd4>)
 8000a1c:	1dfb      	adds	r3, r7, #7
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	b25b      	sxtb	r3, r3
 8000a22:	089b      	lsrs	r3, r3, #2
 8000a24:	33c0      	adds	r3, #192	; 0xc0
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	589b      	ldr	r3, [r3, r2]
 8000a2a:	1dfa      	adds	r2, r7, #7
 8000a2c:	7812      	ldrb	r2, [r2, #0]
 8000a2e:	0011      	movs	r1, r2
 8000a30:	2203      	movs	r2, #3
 8000a32:	400a      	ands	r2, r1
 8000a34:	00d2      	lsls	r2, r2, #3
 8000a36:	21ff      	movs	r1, #255	; 0xff
 8000a38:	4091      	lsls	r1, r2
 8000a3a:	000a      	movs	r2, r1
 8000a3c:	43d2      	mvns	r2, r2
 8000a3e:	401a      	ands	r2, r3
 8000a40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	019b      	lsls	r3, r3, #6
 8000a46:	22ff      	movs	r2, #255	; 0xff
 8000a48:	401a      	ands	r2, r3
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	0018      	movs	r0, r3
 8000a50:	2303      	movs	r3, #3
 8000a52:	4003      	ands	r3, r0
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a58:	481f      	ldr	r0, [pc, #124]	; (8000ad8 <__NVIC_SetPriority+0xd4>)
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b25b      	sxtb	r3, r3
 8000a60:	089b      	lsrs	r3, r3, #2
 8000a62:	430a      	orrs	r2, r1
 8000a64:	33c0      	adds	r3, #192	; 0xc0
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a6a:	e031      	b.n	8000ad0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a6c:	4a1b      	ldr	r2, [pc, #108]	; (8000adc <__NVIC_SetPriority+0xd8>)
 8000a6e:	1dfb      	adds	r3, r7, #7
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	0019      	movs	r1, r3
 8000a74:	230f      	movs	r3, #15
 8000a76:	400b      	ands	r3, r1
 8000a78:	3b08      	subs	r3, #8
 8000a7a:	089b      	lsrs	r3, r3, #2
 8000a7c:	3306      	adds	r3, #6
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	18d3      	adds	r3, r2, r3
 8000a82:	3304      	adds	r3, #4
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	1dfa      	adds	r2, r7, #7
 8000a88:	7812      	ldrb	r2, [r2, #0]
 8000a8a:	0011      	movs	r1, r2
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	400a      	ands	r2, r1
 8000a90:	00d2      	lsls	r2, r2, #3
 8000a92:	21ff      	movs	r1, #255	; 0xff
 8000a94:	4091      	lsls	r1, r2
 8000a96:	000a      	movs	r2, r1
 8000a98:	43d2      	mvns	r2, r2
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	019b      	lsls	r3, r3, #6
 8000aa2:	22ff      	movs	r2, #255	; 0xff
 8000aa4:	401a      	ands	r2, r3
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	0018      	movs	r0, r3
 8000aac:	2303      	movs	r3, #3
 8000aae:	4003      	ands	r3, r0
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab4:	4809      	ldr	r0, [pc, #36]	; (8000adc <__NVIC_SetPriority+0xd8>)
 8000ab6:	1dfb      	adds	r3, r7, #7
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	001c      	movs	r4, r3
 8000abc:	230f      	movs	r3, #15
 8000abe:	4023      	ands	r3, r4
 8000ac0:	3b08      	subs	r3, #8
 8000ac2:	089b      	lsrs	r3, r3, #2
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	3306      	adds	r3, #6
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	18c3      	adds	r3, r0, r3
 8000acc:	3304      	adds	r3, #4
 8000ace:	601a      	str	r2, [r3, #0]
}
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b003      	add	sp, #12
 8000ad6:	bd90      	pop	{r4, r7, pc}
 8000ad8:	e000e100 	.word	0xe000e100
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	1e5a      	subs	r2, r3, #1
 8000aec:	2380      	movs	r3, #128	; 0x80
 8000aee:	045b      	lsls	r3, r3, #17
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d301      	bcc.n	8000af8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af4:	2301      	movs	r3, #1
 8000af6:	e010      	b.n	8000b1a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af8:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <SysTick_Config+0x44>)
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	3a01      	subs	r2, #1
 8000afe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b00:	2301      	movs	r3, #1
 8000b02:	425b      	negs	r3, r3
 8000b04:	2103      	movs	r1, #3
 8000b06:	0018      	movs	r0, r3
 8000b08:	f7ff ff7c 	bl	8000a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <SysTick_Config+0x44>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <SysTick_Config+0x44>)
 8000b14:	2207      	movs	r2, #7
 8000b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	b002      	add	sp, #8
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	e000e010 	.word	0xe000e010

08000b28 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
 8000b32:	210f      	movs	r1, #15
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	1c02      	adds	r2, r0, #0
 8000b38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b3a:	68ba      	ldr	r2, [r7, #8]
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	b25b      	sxtb	r3, r3
 8000b42:	0011      	movs	r1, r2
 8000b44:	0018      	movs	r0, r3
 8000b46:	f7ff ff5d 	bl	8000a04 <__NVIC_SetPriority>
}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b004      	add	sp, #16
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f7ff ffbf 	bl	8000ae0 <SysTick_Config>
 8000b62:	0003      	movs	r3, r0
}
 8000b64:	0018      	movs	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b002      	add	sp, #8
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d101      	bne.n	8000b7e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e056      	b.n	8000c2c <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	7f5b      	ldrb	r3, [r3, #29]
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d106      	bne.n	8000b96 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	0018      	movs	r0, r3
 8000b92:	f7ff fd43 	bl	800061c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2202      	movs	r2, #2
 8000b9a:	775a      	strb	r2, [r3, #29]

#if defined(CRC_POL_POL)
  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	791b      	ldrb	r3, [r3, #4]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d10c      	bne.n	8000bbe <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a22      	ldr	r2, [pc, #136]	; (8000c34 <HAL_CRC_Init+0xc8>)
 8000baa:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	689a      	ldr	r2, [r3, #8]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2118      	movs	r1, #24
 8000bb8:	438a      	bics	r2, r1
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	e00b      	b.n	8000bd6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6899      	ldr	r1, [r3, #8]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	68da      	ldr	r2, [r3, #12]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f000 f835 	bl	8000c38 <HAL_CRCEx_Polynomial_Set>
 8000bce:	1e03      	subs	r3, r0, #0
 8000bd0:	d001      	beq.n	8000bd6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e02a      	b.n	8000c2c <HAL_CRC_Init+0xc0>
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	795b      	ldrb	r3, [r3, #5]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d105      	bne.n	8000bea <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2201      	movs	r2, #1
 8000be4:	4252      	negs	r2, r2
 8000be6:	611a      	str	r2, [r3, #16]
 8000be8:	e004      	b.n	8000bf4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	6912      	ldr	r2, [r2, #16]
 8000bf2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	2260      	movs	r2, #96	; 0x60
 8000bfc:	4393      	bics	r3, r2
 8000bfe:	0019      	movs	r1, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	695a      	ldr	r2, [r3, #20]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	2280      	movs	r2, #128	; 0x80
 8000c14:	4393      	bics	r3, r2
 8000c16:	0019      	movs	r1, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	699a      	ldr	r2, [r3, #24]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	430a      	orrs	r2, r1
 8000c22:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2201      	movs	r2, #1
 8000c28:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000c2a:	2300      	movs	r3, #0
}
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	b002      	add	sp, #8
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	04c11db7 	.word	0x04c11db7

08000c38 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c44:	2317      	movs	r3, #23
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000c4c:	231f      	movs	r3, #31
 8000c4e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000c50:	46c0      	nop			; (mov r8, r8)
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	1e5a      	subs	r2, r3, #1
 8000c56:	613a      	str	r2, [r7, #16]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d008      	beq.n	8000c6e <HAL_CRCEx_Polynomial_Set+0x36>
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	221f      	movs	r2, #31
 8000c60:	4013      	ands	r3, r2
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	40da      	lsrs	r2, r3
 8000c66:	0013      	movs	r3, r2
 8000c68:	2201      	movs	r2, #1
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	d0f1      	beq.n	8000c52 <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b18      	cmp	r3, #24
 8000c72:	d00f      	beq.n	8000c94 <HAL_CRCEx_Polynomial_Set+0x5c>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b18      	cmp	r3, #24
 8000c78:	d824      	bhi.n	8000cc4 <HAL_CRCEx_Polynomial_Set+0x8c>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b10      	cmp	r3, #16
 8000c7e:	d011      	beq.n	8000ca4 <HAL_CRCEx_Polynomial_Set+0x6c>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b10      	cmp	r3, #16
 8000c84:	d81e      	bhi.n	8000cc4 <HAL_CRCEx_Polynomial_Set+0x8c>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d020      	beq.n	8000cce <HAL_CRCEx_Polynomial_Set+0x96>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b08      	cmp	r3, #8
 8000c90:	d010      	beq.n	8000cb4 <HAL_CRCEx_Polynomial_Set+0x7c>
 8000c92:	e017      	b.n	8000cc4 <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	2b06      	cmp	r3, #6
 8000c98:	d91b      	bls.n	8000cd2 <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 8000c9a:	2317      	movs	r3, #23
 8000c9c:	18fb      	adds	r3, r7, r3
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000ca2:	e016      	b.n	8000cd2 <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	2b07      	cmp	r3, #7
 8000ca8:	d915      	bls.n	8000cd6 <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 8000caa:	2317      	movs	r3, #23
 8000cac:	18fb      	adds	r3, r7, r3
 8000cae:	2201      	movs	r2, #1
 8000cb0:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000cb2:	e010      	b.n	8000cd6 <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	2b0f      	cmp	r3, #15
 8000cb8:	d90f      	bls.n	8000cda <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 8000cba:	2317      	movs	r3, #23
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000cc2:	e00a      	b.n	8000cda <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000cc4:	2317      	movs	r3, #23
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	2201      	movs	r2, #1
 8000cca:	701a      	strb	r2, [r3, #0]
      break;
 8000ccc:	e006      	b.n	8000cdc <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	e004      	b.n	8000cdc <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	e002      	b.n	8000cdc <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	e000      	b.n	8000cdc <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8000cda:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 8000cdc:	2317      	movs	r3, #23
 8000cde:	18fb      	adds	r3, r7, r3
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d10e      	bne.n	8000d04 <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	2218      	movs	r2, #24
 8000cf6:	4393      	bics	r3, r2
 8000cf8:	0019      	movs	r1, r3
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	430a      	orrs	r2, r1
 8000d02:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000d04:	2317      	movs	r3, #23
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	781b      	ldrb	r3, [r3, #0]
}
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b006      	add	sp, #24
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d22:	e155      	b.n	8000fd0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2101      	movs	r1, #1
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	4091      	lsls	r1, r2
 8000d2e:	000a      	movs	r2, r1
 8000d30:	4013      	ands	r3, r2
 8000d32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d100      	bne.n	8000d3c <HAL_GPIO_Init+0x28>
 8000d3a:	e146      	b.n	8000fca <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	2203      	movs	r2, #3
 8000d42:	4013      	ands	r3, r2
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d005      	beq.n	8000d54 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d130      	bne.n	8000db6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	2203      	movs	r2, #3
 8000d60:	409a      	lsls	r2, r3
 8000d62:	0013      	movs	r3, r2
 8000d64:	43da      	mvns	r2, r3
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	68da      	ldr	r2, [r3, #12]
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	409a      	lsls	r2, r3
 8000d76:	0013      	movs	r3, r2
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	409a      	lsls	r2, r3
 8000d90:	0013      	movs	r3, r2
 8000d92:	43da      	mvns	r2, r3
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	091b      	lsrs	r3, r3, #4
 8000da0:	2201      	movs	r2, #1
 8000da2:	401a      	ands	r2, r3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	409a      	lsls	r2, r3
 8000da8:	0013      	movs	r3, r2
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2203      	movs	r2, #3
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	2b03      	cmp	r3, #3
 8000dc0:	d017      	beq.n	8000df2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	2203      	movs	r2, #3
 8000dce:	409a      	lsls	r2, r3
 8000dd0:	0013      	movs	r3, r2
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	689a      	ldr	r2, [r3, #8]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	409a      	lsls	r2, r3
 8000de4:	0013      	movs	r3, r2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	2203      	movs	r2, #3
 8000df8:	4013      	ands	r3, r2
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d123      	bne.n	8000e46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	08da      	lsrs	r2, r3, #3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3208      	adds	r2, #8
 8000e06:	0092      	lsls	r2, r2, #2
 8000e08:	58d3      	ldr	r3, [r2, r3]
 8000e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	2207      	movs	r2, #7
 8000e10:	4013      	ands	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	220f      	movs	r2, #15
 8000e16:	409a      	lsls	r2, r3
 8000e18:	0013      	movs	r3, r2
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	691a      	ldr	r2, [r3, #16]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	2107      	movs	r1, #7
 8000e2a:	400b      	ands	r3, r1
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	409a      	lsls	r2, r3
 8000e30:	0013      	movs	r3, r2
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	08da      	lsrs	r2, r3, #3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3208      	adds	r2, #8
 8000e40:	0092      	lsls	r2, r2, #2
 8000e42:	6939      	ldr	r1, [r7, #16]
 8000e44:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	2203      	movs	r2, #3
 8000e52:	409a      	lsls	r2, r3
 8000e54:	0013      	movs	r3, r2
 8000e56:	43da      	mvns	r2, r3
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2203      	movs	r2, #3
 8000e64:	401a      	ands	r2, r3
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	0013      	movs	r3, r2
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	23c0      	movs	r3, #192	; 0xc0
 8000e80:	029b      	lsls	r3, r3, #10
 8000e82:	4013      	ands	r3, r2
 8000e84:	d100      	bne.n	8000e88 <HAL_GPIO_Init+0x174>
 8000e86:	e0a0      	b.n	8000fca <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e88:	4b57      	ldr	r3, [pc, #348]	; (8000fe8 <HAL_GPIO_Init+0x2d4>)
 8000e8a:	699a      	ldr	r2, [r3, #24]
 8000e8c:	4b56      	ldr	r3, [pc, #344]	; (8000fe8 <HAL_GPIO_Init+0x2d4>)
 8000e8e:	2101      	movs	r1, #1
 8000e90:	430a      	orrs	r2, r1
 8000e92:	619a      	str	r2, [r3, #24]
 8000e94:	4b54      	ldr	r3, [pc, #336]	; (8000fe8 <HAL_GPIO_Init+0x2d4>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	2201      	movs	r2, #1
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ea0:	4a52      	ldr	r2, [pc, #328]	; (8000fec <HAL_GPIO_Init+0x2d8>)
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	089b      	lsrs	r3, r3, #2
 8000ea6:	3302      	adds	r3, #2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	589b      	ldr	r3, [r3, r2]
 8000eac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	220f      	movs	r2, #15
 8000eb8:	409a      	lsls	r2, r3
 8000eba:	0013      	movs	r3, r2
 8000ebc:	43da      	mvns	r2, r3
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	2390      	movs	r3, #144	; 0x90
 8000ec8:	05db      	lsls	r3, r3, #23
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d019      	beq.n	8000f02 <HAL_GPIO_Init+0x1ee>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a47      	ldr	r2, [pc, #284]	; (8000ff0 <HAL_GPIO_Init+0x2dc>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d013      	beq.n	8000efe <HAL_GPIO_Init+0x1ea>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a46      	ldr	r2, [pc, #280]	; (8000ff4 <HAL_GPIO_Init+0x2e0>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d00d      	beq.n	8000efa <HAL_GPIO_Init+0x1e6>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a45      	ldr	r2, [pc, #276]	; (8000ff8 <HAL_GPIO_Init+0x2e4>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d007      	beq.n	8000ef6 <HAL_GPIO_Init+0x1e2>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a44      	ldr	r2, [pc, #272]	; (8000ffc <HAL_GPIO_Init+0x2e8>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d101      	bne.n	8000ef2 <HAL_GPIO_Init+0x1de>
 8000eee:	2304      	movs	r3, #4
 8000ef0:	e008      	b.n	8000f04 <HAL_GPIO_Init+0x1f0>
 8000ef2:	2305      	movs	r3, #5
 8000ef4:	e006      	b.n	8000f04 <HAL_GPIO_Init+0x1f0>
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e004      	b.n	8000f04 <HAL_GPIO_Init+0x1f0>
 8000efa:	2302      	movs	r3, #2
 8000efc:	e002      	b.n	8000f04 <HAL_GPIO_Init+0x1f0>
 8000efe:	2301      	movs	r3, #1
 8000f00:	e000      	b.n	8000f04 <HAL_GPIO_Init+0x1f0>
 8000f02:	2300      	movs	r3, #0
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	2103      	movs	r1, #3
 8000f08:	400a      	ands	r2, r1
 8000f0a:	0092      	lsls	r2, r2, #2
 8000f0c:	4093      	lsls	r3, r2
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f14:	4935      	ldr	r1, [pc, #212]	; (8000fec <HAL_GPIO_Init+0x2d8>)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	089b      	lsrs	r3, r3, #2
 8000f1a:	3302      	adds	r3, #2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f22:	4b37      	ldr	r3, [pc, #220]	; (8001000 <HAL_GPIO_Init+0x2ec>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	2380      	movs	r3, #128	; 0x80
 8000f38:	025b      	lsls	r3, r3, #9
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f46:	4b2e      	ldr	r3, [pc, #184]	; (8001000 <HAL_GPIO_Init+0x2ec>)
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000f4c:	4b2c      	ldr	r3, [pc, #176]	; (8001000 <HAL_GPIO_Init+0x2ec>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	43da      	mvns	r2, r3
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	029b      	lsls	r3, r3, #10
 8000f64:	4013      	ands	r3, r2
 8000f66:	d003      	beq.n	8000f70 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f70:	4b23      	ldr	r3, [pc, #140]	; (8001000 <HAL_GPIO_Init+0x2ec>)
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f76:	4b22      	ldr	r3, [pc, #136]	; (8001000 <HAL_GPIO_Init+0x2ec>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685a      	ldr	r2, [r3, #4]
 8000f8a:	2380      	movs	r3, #128	; 0x80
 8000f8c:	035b      	lsls	r3, r3, #13
 8000f8e:	4013      	ands	r3, r2
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f9a:	4b19      	ldr	r3, [pc, #100]	; (8001000 <HAL_GPIO_Init+0x2ec>)
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000fa0:	4b17      	ldr	r3, [pc, #92]	; (8001000 <HAL_GPIO_Init+0x2ec>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	43da      	mvns	r2, r3
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685a      	ldr	r2, [r3, #4]
 8000fb4:	2380      	movs	r3, #128	; 0x80
 8000fb6:	039b      	lsls	r3, r3, #14
 8000fb8:	4013      	ands	r3, r2
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <HAL_GPIO_Init+0x2ec>)
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	40da      	lsrs	r2, r3
 8000fd8:	1e13      	subs	r3, r2, #0
 8000fda:	d000      	beq.n	8000fde <HAL_GPIO_Init+0x2ca>
 8000fdc:	e6a2      	b.n	8000d24 <HAL_GPIO_Init+0x10>
  } 
}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	b006      	add	sp, #24
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40010000 	.word	0x40010000
 8000ff0:	48000400 	.word	0x48000400
 8000ff4:	48000800 	.word	0x48000800
 8000ff8:	48000c00 	.word	0x48000c00
 8000ffc:	48001000 	.word	0x48001000
 8001000:	40010400 	.word	0x40010400

08001004 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	000a      	movs	r2, r1
 800100e:	1cbb      	adds	r3, r7, #2
 8001010:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	691b      	ldr	r3, [r3, #16]
 8001016:	1cba      	adds	r2, r7, #2
 8001018:	8812      	ldrh	r2, [r2, #0]
 800101a:	4013      	ands	r3, r2
 800101c:	d004      	beq.n	8001028 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800101e:	230f      	movs	r3, #15
 8001020:	18fb      	adds	r3, r7, r3
 8001022:	2201      	movs	r2, #1
 8001024:	701a      	strb	r2, [r3, #0]
 8001026:	e003      	b.n	8001030 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001028:	230f      	movs	r3, #15
 800102a:	18fb      	adds	r3, r7, r3
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001030:	230f      	movs	r3, #15
 8001032:	18fb      	adds	r3, r7, r3
 8001034:	781b      	ldrb	r3, [r3, #0]
  }
 8001036:	0018      	movs	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	b004      	add	sp, #16
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	0008      	movs	r0, r1
 8001048:	0011      	movs	r1, r2
 800104a:	1cbb      	adds	r3, r7, #2
 800104c:	1c02      	adds	r2, r0, #0
 800104e:	801a      	strh	r2, [r3, #0]
 8001050:	1c7b      	adds	r3, r7, #1
 8001052:	1c0a      	adds	r2, r1, #0
 8001054:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001056:	1c7b      	adds	r3, r7, #1
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d004      	beq.n	8001068 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800105e:	1cbb      	adds	r3, r7, #2
 8001060:	881a      	ldrh	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001066:	e003      	b.n	8001070 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001068:	1cbb      	adds	r3, r7, #2
 800106a:	881a      	ldrh	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001070:	46c0      	nop			; (mov r8, r8)
 8001072:	46bd      	mov	sp, r7
 8001074:	b002      	add	sp, #8
 8001076:	bd80      	pop	{r7, pc}

08001078 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d102      	bne.n	800108c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	f000 fb76 	bl	8001778 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2201      	movs	r2, #1
 8001092:	4013      	ands	r3, r2
 8001094:	d100      	bne.n	8001098 <HAL_RCC_OscConfig+0x20>
 8001096:	e08e      	b.n	80011b6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001098:	4bc5      	ldr	r3, [pc, #788]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	220c      	movs	r2, #12
 800109e:	4013      	ands	r3, r2
 80010a0:	2b04      	cmp	r3, #4
 80010a2:	d00e      	beq.n	80010c2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010a4:	4bc2      	ldr	r3, [pc, #776]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	220c      	movs	r2, #12
 80010aa:	4013      	ands	r3, r2
 80010ac:	2b08      	cmp	r3, #8
 80010ae:	d117      	bne.n	80010e0 <HAL_RCC_OscConfig+0x68>
 80010b0:	4bbf      	ldr	r3, [pc, #764]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	23c0      	movs	r3, #192	; 0xc0
 80010b6:	025b      	lsls	r3, r3, #9
 80010b8:	401a      	ands	r2, r3
 80010ba:	2380      	movs	r3, #128	; 0x80
 80010bc:	025b      	lsls	r3, r3, #9
 80010be:	429a      	cmp	r2, r3
 80010c0:	d10e      	bne.n	80010e0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c2:	4bbb      	ldr	r3, [pc, #748]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	2380      	movs	r3, #128	; 0x80
 80010c8:	029b      	lsls	r3, r3, #10
 80010ca:	4013      	ands	r3, r2
 80010cc:	d100      	bne.n	80010d0 <HAL_RCC_OscConfig+0x58>
 80010ce:	e071      	b.n	80011b4 <HAL_RCC_OscConfig+0x13c>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d000      	beq.n	80010da <HAL_RCC_OscConfig+0x62>
 80010d8:	e06c      	b.n	80011b4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	f000 fb4c 	bl	8001778 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d107      	bne.n	80010f8 <HAL_RCC_OscConfig+0x80>
 80010e8:	4bb1      	ldr	r3, [pc, #708]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4bb0      	ldr	r3, [pc, #704]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80010ee:	2180      	movs	r1, #128	; 0x80
 80010f0:	0249      	lsls	r1, r1, #9
 80010f2:	430a      	orrs	r2, r1
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	e02f      	b.n	8001158 <HAL_RCC_OscConfig+0xe0>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d10c      	bne.n	800111a <HAL_RCC_OscConfig+0xa2>
 8001100:	4bab      	ldr	r3, [pc, #684]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4baa      	ldr	r3, [pc, #680]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001106:	49ab      	ldr	r1, [pc, #684]	; (80013b4 <HAL_RCC_OscConfig+0x33c>)
 8001108:	400a      	ands	r2, r1
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	4ba8      	ldr	r3, [pc, #672]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4ba7      	ldr	r3, [pc, #668]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001112:	49a9      	ldr	r1, [pc, #676]	; (80013b8 <HAL_RCC_OscConfig+0x340>)
 8001114:	400a      	ands	r2, r1
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	e01e      	b.n	8001158 <HAL_RCC_OscConfig+0xe0>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b05      	cmp	r3, #5
 8001120:	d10e      	bne.n	8001140 <HAL_RCC_OscConfig+0xc8>
 8001122:	4ba3      	ldr	r3, [pc, #652]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	4ba2      	ldr	r3, [pc, #648]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001128:	2180      	movs	r1, #128	; 0x80
 800112a:	02c9      	lsls	r1, r1, #11
 800112c:	430a      	orrs	r2, r1
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	4b9f      	ldr	r3, [pc, #636]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b9e      	ldr	r3, [pc, #632]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001136:	2180      	movs	r1, #128	; 0x80
 8001138:	0249      	lsls	r1, r1, #9
 800113a:	430a      	orrs	r2, r1
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	e00b      	b.n	8001158 <HAL_RCC_OscConfig+0xe0>
 8001140:	4b9b      	ldr	r3, [pc, #620]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b9a      	ldr	r3, [pc, #616]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001146:	499b      	ldr	r1, [pc, #620]	; (80013b4 <HAL_RCC_OscConfig+0x33c>)
 8001148:	400a      	ands	r2, r1
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	4b98      	ldr	r3, [pc, #608]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b97      	ldr	r3, [pc, #604]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001152:	4999      	ldr	r1, [pc, #612]	; (80013b8 <HAL_RCC_OscConfig+0x340>)
 8001154:	400a      	ands	r2, r1
 8001156:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d014      	beq.n	800118a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001160:	f7ff fc22 	bl	80009a8 <HAL_GetTick>
 8001164:	0003      	movs	r3, r0
 8001166:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800116a:	f7ff fc1d 	bl	80009a8 <HAL_GetTick>
 800116e:	0002      	movs	r2, r0
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b64      	cmp	r3, #100	; 0x64
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e2fd      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117c:	4b8c      	ldr	r3, [pc, #560]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	2380      	movs	r3, #128	; 0x80
 8001182:	029b      	lsls	r3, r3, #10
 8001184:	4013      	ands	r3, r2
 8001186:	d0f0      	beq.n	800116a <HAL_RCC_OscConfig+0xf2>
 8001188:	e015      	b.n	80011b6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118a:	f7ff fc0d 	bl	80009a8 <HAL_GetTick>
 800118e:	0003      	movs	r3, r0
 8001190:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001194:	f7ff fc08 	bl	80009a8 <HAL_GetTick>
 8001198:	0002      	movs	r2, r0
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b64      	cmp	r3, #100	; 0x64
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e2e8      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a6:	4b82      	ldr	r3, [pc, #520]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	2380      	movs	r3, #128	; 0x80
 80011ac:	029b      	lsls	r3, r3, #10
 80011ae:	4013      	ands	r3, r2
 80011b0:	d1f0      	bne.n	8001194 <HAL_RCC_OscConfig+0x11c>
 80011b2:	e000      	b.n	80011b6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2202      	movs	r2, #2
 80011bc:	4013      	ands	r3, r2
 80011be:	d100      	bne.n	80011c2 <HAL_RCC_OscConfig+0x14a>
 80011c0:	e06c      	b.n	800129c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011c2:	4b7b      	ldr	r3, [pc, #492]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	220c      	movs	r2, #12
 80011c8:	4013      	ands	r3, r2
 80011ca:	d00e      	beq.n	80011ea <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011cc:	4b78      	ldr	r3, [pc, #480]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	220c      	movs	r2, #12
 80011d2:	4013      	ands	r3, r2
 80011d4:	2b08      	cmp	r3, #8
 80011d6:	d11f      	bne.n	8001218 <HAL_RCC_OscConfig+0x1a0>
 80011d8:	4b75      	ldr	r3, [pc, #468]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	23c0      	movs	r3, #192	; 0xc0
 80011de:	025b      	lsls	r3, r3, #9
 80011e0:	401a      	ands	r2, r3
 80011e2:	2380      	movs	r3, #128	; 0x80
 80011e4:	021b      	lsls	r3, r3, #8
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d116      	bne.n	8001218 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ea:	4b71      	ldr	r3, [pc, #452]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2202      	movs	r2, #2
 80011f0:	4013      	ands	r3, r2
 80011f2:	d005      	beq.n	8001200 <HAL_RCC_OscConfig+0x188>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d001      	beq.n	8001200 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e2bb      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001200:	4b6b      	ldr	r3, [pc, #428]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	22f8      	movs	r2, #248	; 0xf8
 8001206:	4393      	bics	r3, r2
 8001208:	0019      	movs	r1, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	00da      	lsls	r2, r3, #3
 8001210:	4b67      	ldr	r3, [pc, #412]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001212:	430a      	orrs	r2, r1
 8001214:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001216:	e041      	b.n	800129c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d024      	beq.n	800126a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001220:	4b63      	ldr	r3, [pc, #396]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b62      	ldr	r3, [pc, #392]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001226:	2101      	movs	r1, #1
 8001228:	430a      	orrs	r2, r1
 800122a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122c:	f7ff fbbc 	bl	80009a8 <HAL_GetTick>
 8001230:	0003      	movs	r3, r0
 8001232:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001234:	e008      	b.n	8001248 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001236:	f7ff fbb7 	bl	80009a8 <HAL_GetTick>
 800123a:	0002      	movs	r2, r0
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e297      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001248:	4b59      	ldr	r3, [pc, #356]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2202      	movs	r2, #2
 800124e:	4013      	ands	r3, r2
 8001250:	d0f1      	beq.n	8001236 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001252:	4b57      	ldr	r3, [pc, #348]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	22f8      	movs	r2, #248	; 0xf8
 8001258:	4393      	bics	r3, r2
 800125a:	0019      	movs	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	00da      	lsls	r2, r3, #3
 8001262:	4b53      	ldr	r3, [pc, #332]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001264:	430a      	orrs	r2, r1
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	e018      	b.n	800129c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800126a:	4b51      	ldr	r3, [pc, #324]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	4b50      	ldr	r3, [pc, #320]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001270:	2101      	movs	r1, #1
 8001272:	438a      	bics	r2, r1
 8001274:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001276:	f7ff fb97 	bl	80009a8 <HAL_GetTick>
 800127a:	0003      	movs	r3, r0
 800127c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001280:	f7ff fb92 	bl	80009a8 <HAL_GetTick>
 8001284:	0002      	movs	r2, r0
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e272      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001292:	4b47      	ldr	r3, [pc, #284]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2202      	movs	r2, #2
 8001298:	4013      	ands	r3, r2
 800129a:	d1f1      	bne.n	8001280 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2208      	movs	r2, #8
 80012a2:	4013      	ands	r3, r2
 80012a4:	d036      	beq.n	8001314 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d019      	beq.n	80012e2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ae:	4b40      	ldr	r3, [pc, #256]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80012b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012b2:	4b3f      	ldr	r3, [pc, #252]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80012b4:	2101      	movs	r1, #1
 80012b6:	430a      	orrs	r2, r1
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ba:	f7ff fb75 	bl	80009a8 <HAL_GetTick>
 80012be:	0003      	movs	r3, r0
 80012c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c4:	f7ff fb70 	bl	80009a8 <HAL_GetTick>
 80012c8:	0002      	movs	r2, r0
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e250      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d6:	4b36      	ldr	r3, [pc, #216]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80012d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012da:	2202      	movs	r2, #2
 80012dc:	4013      	ands	r3, r2
 80012de:	d0f1      	beq.n	80012c4 <HAL_RCC_OscConfig+0x24c>
 80012e0:	e018      	b.n	8001314 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012e2:	4b33      	ldr	r3, [pc, #204]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80012e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012e6:	4b32      	ldr	r3, [pc, #200]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80012e8:	2101      	movs	r1, #1
 80012ea:	438a      	bics	r2, r1
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ee:	f7ff fb5b 	bl	80009a8 <HAL_GetTick>
 80012f2:	0003      	movs	r3, r0
 80012f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f8:	f7ff fb56 	bl	80009a8 <HAL_GetTick>
 80012fc:	0002      	movs	r2, r0
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e236      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800130a:	4b29      	ldr	r3, [pc, #164]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 800130c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130e:	2202      	movs	r2, #2
 8001310:	4013      	ands	r3, r2
 8001312:	d1f1      	bne.n	80012f8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2204      	movs	r2, #4
 800131a:	4013      	ands	r3, r2
 800131c:	d100      	bne.n	8001320 <HAL_RCC_OscConfig+0x2a8>
 800131e:	e0b5      	b.n	800148c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001320:	201f      	movs	r0, #31
 8001322:	183b      	adds	r3, r7, r0
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001328:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 800132a:	69da      	ldr	r2, [r3, #28]
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	055b      	lsls	r3, r3, #21
 8001330:	4013      	ands	r3, r2
 8001332:	d110      	bne.n	8001356 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001334:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001336:	69da      	ldr	r2, [r3, #28]
 8001338:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 800133a:	2180      	movs	r1, #128	; 0x80
 800133c:	0549      	lsls	r1, r1, #21
 800133e:	430a      	orrs	r2, r1
 8001340:	61da      	str	r2, [r3, #28]
 8001342:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001344:	69da      	ldr	r2, [r3, #28]
 8001346:	2380      	movs	r3, #128	; 0x80
 8001348:	055b      	lsls	r3, r3, #21
 800134a:	4013      	ands	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001350:	183b      	adds	r3, r7, r0
 8001352:	2201      	movs	r2, #1
 8001354:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001356:	4b19      	ldr	r3, [pc, #100]	; (80013bc <HAL_RCC_OscConfig+0x344>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	2380      	movs	r3, #128	; 0x80
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4013      	ands	r3, r2
 8001360:	d11a      	bne.n	8001398 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <HAL_RCC_OscConfig+0x344>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_RCC_OscConfig+0x344>)
 8001368:	2180      	movs	r1, #128	; 0x80
 800136a:	0049      	lsls	r1, r1, #1
 800136c:	430a      	orrs	r2, r1
 800136e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001370:	f7ff fb1a 	bl	80009a8 <HAL_GetTick>
 8001374:	0003      	movs	r3, r0
 8001376:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800137a:	f7ff fb15 	bl	80009a8 <HAL_GetTick>
 800137e:	0002      	movs	r2, r0
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b64      	cmp	r3, #100	; 0x64
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e1f5      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <HAL_RCC_OscConfig+0x344>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4013      	ands	r3, r2
 8001396:	d0f0      	beq.n	800137a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d10f      	bne.n	80013c0 <HAL_RCC_OscConfig+0x348>
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80013a2:	6a1a      	ldr	r2, [r3, #32]
 80013a4:	4b02      	ldr	r3, [pc, #8]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80013a6:	2101      	movs	r1, #1
 80013a8:	430a      	orrs	r2, r1
 80013aa:	621a      	str	r2, [r3, #32]
 80013ac:	e036      	b.n	800141c <HAL_RCC_OscConfig+0x3a4>
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	40021000 	.word	0x40021000
 80013b4:	fffeffff 	.word	0xfffeffff
 80013b8:	fffbffff 	.word	0xfffbffff
 80013bc:	40007000 	.word	0x40007000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d10c      	bne.n	80013e2 <HAL_RCC_OscConfig+0x36a>
 80013c8:	4bca      	ldr	r3, [pc, #808]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80013ca:	6a1a      	ldr	r2, [r3, #32]
 80013cc:	4bc9      	ldr	r3, [pc, #804]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80013ce:	2101      	movs	r1, #1
 80013d0:	438a      	bics	r2, r1
 80013d2:	621a      	str	r2, [r3, #32]
 80013d4:	4bc7      	ldr	r3, [pc, #796]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80013d6:	6a1a      	ldr	r2, [r3, #32]
 80013d8:	4bc6      	ldr	r3, [pc, #792]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80013da:	2104      	movs	r1, #4
 80013dc:	438a      	bics	r2, r1
 80013de:	621a      	str	r2, [r3, #32]
 80013e0:	e01c      	b.n	800141c <HAL_RCC_OscConfig+0x3a4>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	2b05      	cmp	r3, #5
 80013e8:	d10c      	bne.n	8001404 <HAL_RCC_OscConfig+0x38c>
 80013ea:	4bc2      	ldr	r3, [pc, #776]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80013ec:	6a1a      	ldr	r2, [r3, #32]
 80013ee:	4bc1      	ldr	r3, [pc, #772]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80013f0:	2104      	movs	r1, #4
 80013f2:	430a      	orrs	r2, r1
 80013f4:	621a      	str	r2, [r3, #32]
 80013f6:	4bbf      	ldr	r3, [pc, #764]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80013f8:	6a1a      	ldr	r2, [r3, #32]
 80013fa:	4bbe      	ldr	r3, [pc, #760]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80013fc:	2101      	movs	r1, #1
 80013fe:	430a      	orrs	r2, r1
 8001400:	621a      	str	r2, [r3, #32]
 8001402:	e00b      	b.n	800141c <HAL_RCC_OscConfig+0x3a4>
 8001404:	4bbb      	ldr	r3, [pc, #748]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001406:	6a1a      	ldr	r2, [r3, #32]
 8001408:	4bba      	ldr	r3, [pc, #744]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 800140a:	2101      	movs	r1, #1
 800140c:	438a      	bics	r2, r1
 800140e:	621a      	str	r2, [r3, #32]
 8001410:	4bb8      	ldr	r3, [pc, #736]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001412:	6a1a      	ldr	r2, [r3, #32]
 8001414:	4bb7      	ldr	r3, [pc, #732]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001416:	2104      	movs	r1, #4
 8001418:	438a      	bics	r2, r1
 800141a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d014      	beq.n	800144e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001424:	f7ff fac0 	bl	80009a8 <HAL_GetTick>
 8001428:	0003      	movs	r3, r0
 800142a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800142c:	e009      	b.n	8001442 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800142e:	f7ff fabb 	bl	80009a8 <HAL_GetTick>
 8001432:	0002      	movs	r2, r0
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	4aaf      	ldr	r2, [pc, #700]	; (80016f8 <HAL_RCC_OscConfig+0x680>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e19a      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001442:	4bac      	ldr	r3, [pc, #688]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	2202      	movs	r2, #2
 8001448:	4013      	ands	r3, r2
 800144a:	d0f0      	beq.n	800142e <HAL_RCC_OscConfig+0x3b6>
 800144c:	e013      	b.n	8001476 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144e:	f7ff faab 	bl	80009a8 <HAL_GetTick>
 8001452:	0003      	movs	r3, r0
 8001454:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001456:	e009      	b.n	800146c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001458:	f7ff faa6 	bl	80009a8 <HAL_GetTick>
 800145c:	0002      	movs	r2, r0
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	4aa5      	ldr	r2, [pc, #660]	; (80016f8 <HAL_RCC_OscConfig+0x680>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e185      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800146c:	4ba1      	ldr	r3, [pc, #644]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	2202      	movs	r2, #2
 8001472:	4013      	ands	r3, r2
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001476:	231f      	movs	r3, #31
 8001478:	18fb      	adds	r3, r7, r3
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d105      	bne.n	800148c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001480:	4b9c      	ldr	r3, [pc, #624]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001482:	69da      	ldr	r2, [r3, #28]
 8001484:	4b9b      	ldr	r3, [pc, #620]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001486:	499d      	ldr	r1, [pc, #628]	; (80016fc <HAL_RCC_OscConfig+0x684>)
 8001488:	400a      	ands	r2, r1
 800148a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2210      	movs	r2, #16
 8001492:	4013      	ands	r3, r2
 8001494:	d063      	beq.n	800155e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d12a      	bne.n	80014f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800149e:	4b95      	ldr	r3, [pc, #596]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80014a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014a2:	4b94      	ldr	r3, [pc, #592]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80014a4:	2104      	movs	r1, #4
 80014a6:	430a      	orrs	r2, r1
 80014a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80014aa:	4b92      	ldr	r3, [pc, #584]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80014ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ae:	4b91      	ldr	r3, [pc, #580]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80014b0:	2101      	movs	r1, #1
 80014b2:	430a      	orrs	r2, r1
 80014b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b6:	f7ff fa77 	bl	80009a8 <HAL_GetTick>
 80014ba:	0003      	movs	r3, r0
 80014bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014c0:	f7ff fa72 	bl	80009a8 <HAL_GetTick>
 80014c4:	0002      	movs	r2, r0
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e152      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80014d2:	4b88      	ldr	r3, [pc, #544]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80014d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d6:	2202      	movs	r2, #2
 80014d8:	4013      	ands	r3, r2
 80014da:	d0f1      	beq.n	80014c0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014dc:	4b85      	ldr	r3, [pc, #532]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80014de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e0:	22f8      	movs	r2, #248	; 0xf8
 80014e2:	4393      	bics	r3, r2
 80014e4:	0019      	movs	r1, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	00da      	lsls	r2, r3, #3
 80014ec:	4b81      	ldr	r3, [pc, #516]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80014ee:	430a      	orrs	r2, r1
 80014f0:	635a      	str	r2, [r3, #52]	; 0x34
 80014f2:	e034      	b.n	800155e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	695b      	ldr	r3, [r3, #20]
 80014f8:	3305      	adds	r3, #5
 80014fa:	d111      	bne.n	8001520 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80014fc:	4b7d      	ldr	r3, [pc, #500]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80014fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001500:	4b7c      	ldr	r3, [pc, #496]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001502:	2104      	movs	r1, #4
 8001504:	438a      	bics	r2, r1
 8001506:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001508:	4b7a      	ldr	r3, [pc, #488]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 800150a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800150c:	22f8      	movs	r2, #248	; 0xf8
 800150e:	4393      	bics	r3, r2
 8001510:	0019      	movs	r1, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	00da      	lsls	r2, r3, #3
 8001518:	4b76      	ldr	r3, [pc, #472]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 800151a:	430a      	orrs	r2, r1
 800151c:	635a      	str	r2, [r3, #52]	; 0x34
 800151e:	e01e      	b.n	800155e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001520:	4b74      	ldr	r3, [pc, #464]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001524:	4b73      	ldr	r3, [pc, #460]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001526:	2104      	movs	r1, #4
 8001528:	430a      	orrs	r2, r1
 800152a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800152c:	4b71      	ldr	r3, [pc, #452]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 800152e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001530:	4b70      	ldr	r3, [pc, #448]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001532:	2101      	movs	r1, #1
 8001534:	438a      	bics	r2, r1
 8001536:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001538:	f7ff fa36 	bl	80009a8 <HAL_GetTick>
 800153c:	0003      	movs	r3, r0
 800153e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001542:	f7ff fa31 	bl	80009a8 <HAL_GetTick>
 8001546:	0002      	movs	r2, r0
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e111      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001554:	4b67      	ldr	r3, [pc, #412]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001558:	2202      	movs	r2, #2
 800155a:	4013      	ands	r3, r2
 800155c:	d1f1      	bne.n	8001542 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2220      	movs	r2, #32
 8001564:	4013      	ands	r3, r2
 8001566:	d05c      	beq.n	8001622 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001568:	4b62      	ldr	r3, [pc, #392]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	220c      	movs	r2, #12
 800156e:	4013      	ands	r3, r2
 8001570:	2b0c      	cmp	r3, #12
 8001572:	d00e      	beq.n	8001592 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001574:	4b5f      	ldr	r3, [pc, #380]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	220c      	movs	r2, #12
 800157a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800157c:	2b08      	cmp	r3, #8
 800157e:	d114      	bne.n	80015aa <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001580:	4b5c      	ldr	r3, [pc, #368]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	23c0      	movs	r3, #192	; 0xc0
 8001586:	025b      	lsls	r3, r3, #9
 8001588:	401a      	ands	r2, r3
 800158a:	23c0      	movs	r3, #192	; 0xc0
 800158c:	025b      	lsls	r3, r3, #9
 800158e:	429a      	cmp	r2, r3
 8001590:	d10b      	bne.n	80015aa <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001592:	4b58      	ldr	r3, [pc, #352]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001596:	2380      	movs	r3, #128	; 0x80
 8001598:	025b      	lsls	r3, r3, #9
 800159a:	4013      	ands	r3, r2
 800159c:	d040      	beq.n	8001620 <HAL_RCC_OscConfig+0x5a8>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d03c      	beq.n	8001620 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e0e6      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d01b      	beq.n	80015ea <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80015b2:	4b50      	ldr	r3, [pc, #320]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80015b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015b6:	4b4f      	ldr	r3, [pc, #316]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80015b8:	2180      	movs	r1, #128	; 0x80
 80015ba:	0249      	lsls	r1, r1, #9
 80015bc:	430a      	orrs	r2, r1
 80015be:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c0:	f7ff f9f2 	bl	80009a8 <HAL_GetTick>
 80015c4:	0003      	movs	r3, r0
 80015c6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015ca:	f7ff f9ed 	bl	80009a8 <HAL_GetTick>
 80015ce:	0002      	movs	r2, r0
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e0cd      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80015dc:	4b45      	ldr	r3, [pc, #276]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80015de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	025b      	lsls	r3, r3, #9
 80015e4:	4013      	ands	r3, r2
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x552>
 80015e8:	e01b      	b.n	8001622 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80015ea:	4b42      	ldr	r3, [pc, #264]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80015ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ee:	4b41      	ldr	r3, [pc, #260]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80015f0:	4943      	ldr	r1, [pc, #268]	; (8001700 <HAL_RCC_OscConfig+0x688>)
 80015f2:	400a      	ands	r2, r1
 80015f4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f6:	f7ff f9d7 	bl	80009a8 <HAL_GetTick>
 80015fa:	0003      	movs	r3, r0
 80015fc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001600:	f7ff f9d2 	bl	80009a8 <HAL_GetTick>
 8001604:	0002      	movs	r2, r0
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e0b2      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001612:	4b38      	ldr	r3, [pc, #224]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001616:	2380      	movs	r3, #128	; 0x80
 8001618:	025b      	lsls	r3, r3, #9
 800161a:	4013      	ands	r3, r2
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x588>
 800161e:	e000      	b.n	8001622 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001620:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001626:	2b00      	cmp	r3, #0
 8001628:	d100      	bne.n	800162c <HAL_RCC_OscConfig+0x5b4>
 800162a:	e0a4      	b.n	8001776 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800162c:	4b31      	ldr	r3, [pc, #196]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	220c      	movs	r2, #12
 8001632:	4013      	ands	r3, r2
 8001634:	2b08      	cmp	r3, #8
 8001636:	d100      	bne.n	800163a <HAL_RCC_OscConfig+0x5c2>
 8001638:	e078      	b.n	800172c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163e:	2b02      	cmp	r3, #2
 8001640:	d14c      	bne.n	80016dc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001642:	4b2c      	ldr	r3, [pc, #176]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	4b2b      	ldr	r3, [pc, #172]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001648:	492e      	ldr	r1, [pc, #184]	; (8001704 <HAL_RCC_OscConfig+0x68c>)
 800164a:	400a      	ands	r2, r1
 800164c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164e:	f7ff f9ab 	bl	80009a8 <HAL_GetTick>
 8001652:	0003      	movs	r3, r0
 8001654:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001658:	f7ff f9a6 	bl	80009a8 <HAL_GetTick>
 800165c:	0002      	movs	r2, r0
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e086      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800166a:	4b22      	ldr	r3, [pc, #136]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	049b      	lsls	r3, r3, #18
 8001672:	4013      	ands	r3, r2
 8001674:	d1f0      	bne.n	8001658 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001676:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167a:	220f      	movs	r2, #15
 800167c:	4393      	bics	r3, r2
 800167e:	0019      	movs	r1, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001684:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001686:	430a      	orrs	r2, r1
 8001688:	62da      	str	r2, [r3, #44]	; 0x2c
 800168a:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	4a1e      	ldr	r2, [pc, #120]	; (8001708 <HAL_RCC_OscConfig+0x690>)
 8001690:	4013      	ands	r3, r2
 8001692:	0019      	movs	r1, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169c:	431a      	orrs	r2, r3
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80016a0:	430a      	orrs	r2, r1
 80016a2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016a4:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80016aa:	2180      	movs	r1, #128	; 0x80
 80016ac:	0449      	lsls	r1, r1, #17
 80016ae:	430a      	orrs	r2, r1
 80016b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b2:	f7ff f979 	bl	80009a8 <HAL_GetTick>
 80016b6:	0003      	movs	r3, r0
 80016b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016bc:	f7ff f974 	bl	80009a8 <HAL_GetTick>
 80016c0:	0002      	movs	r2, r0
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e054      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	2380      	movs	r3, #128	; 0x80
 80016d4:	049b      	lsls	r3, r3, #18
 80016d6:	4013      	ands	r3, r2
 80016d8:	d0f0      	beq.n	80016bc <HAL_RCC_OscConfig+0x644>
 80016da:	e04c      	b.n	8001776 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80016e2:	4908      	ldr	r1, [pc, #32]	; (8001704 <HAL_RCC_OscConfig+0x68c>)
 80016e4:	400a      	ands	r2, r1
 80016e6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e8:	f7ff f95e 	bl	80009a8 <HAL_GetTick>
 80016ec:	0003      	movs	r3, r0
 80016ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016f0:	e015      	b.n	800171e <HAL_RCC_OscConfig+0x6a6>
 80016f2:	46c0      	nop			; (mov r8, r8)
 80016f4:	40021000 	.word	0x40021000
 80016f8:	00001388 	.word	0x00001388
 80016fc:	efffffff 	.word	0xefffffff
 8001700:	fffeffff 	.word	0xfffeffff
 8001704:	feffffff 	.word	0xfeffffff
 8001708:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170c:	f7ff f94c 	bl	80009a8 <HAL_GetTick>
 8001710:	0002      	movs	r2, r0
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e02c      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800171e:	4b18      	ldr	r3, [pc, #96]	; (8001780 <HAL_RCC_OscConfig+0x708>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	049b      	lsls	r3, r3, #18
 8001726:	4013      	ands	r3, r2
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x694>
 800172a:	e024      	b.n	8001776 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001730:	2b01      	cmp	r3, #1
 8001732:	d101      	bne.n	8001738 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e01f      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <HAL_RCC_OscConfig+0x708>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <HAL_RCC_OscConfig+0x708>)
 8001740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001742:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	23c0      	movs	r3, #192	; 0xc0
 8001748:	025b      	lsls	r3, r3, #9
 800174a:	401a      	ands	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001750:	429a      	cmp	r2, r3
 8001752:	d10e      	bne.n	8001772 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	220f      	movs	r2, #15
 8001758:	401a      	ands	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800175e:	429a      	cmp	r2, r3
 8001760:	d107      	bne.n	8001772 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	23f0      	movs	r3, #240	; 0xf0
 8001766:	039b      	lsls	r3, r3, #14
 8001768:	401a      	ands	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800176e:	429a      	cmp	r2, r3
 8001770:	d001      	beq.n	8001776 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	0018      	movs	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	b008      	add	sp, #32
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40021000 	.word	0x40021000

08001784 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e0bf      	b.n	8001918 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001798:	4b61      	ldr	r3, [pc, #388]	; (8001920 <HAL_RCC_ClockConfig+0x19c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2201      	movs	r2, #1
 800179e:	4013      	ands	r3, r2
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d911      	bls.n	80017ca <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a6:	4b5e      	ldr	r3, [pc, #376]	; (8001920 <HAL_RCC_ClockConfig+0x19c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2201      	movs	r2, #1
 80017ac:	4393      	bics	r3, r2
 80017ae:	0019      	movs	r1, r3
 80017b0:	4b5b      	ldr	r3, [pc, #364]	; (8001920 <HAL_RCC_ClockConfig+0x19c>)
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	430a      	orrs	r2, r1
 80017b6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b8:	4b59      	ldr	r3, [pc, #356]	; (8001920 <HAL_RCC_ClockConfig+0x19c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2201      	movs	r2, #1
 80017be:	4013      	ands	r3, r2
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d001      	beq.n	80017ca <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e0a6      	b.n	8001918 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2202      	movs	r2, #2
 80017d0:	4013      	ands	r3, r2
 80017d2:	d015      	beq.n	8001800 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2204      	movs	r2, #4
 80017da:	4013      	ands	r3, r2
 80017dc:	d006      	beq.n	80017ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017de:	4b51      	ldr	r3, [pc, #324]	; (8001924 <HAL_RCC_ClockConfig+0x1a0>)
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	4b50      	ldr	r3, [pc, #320]	; (8001924 <HAL_RCC_ClockConfig+0x1a0>)
 80017e4:	21e0      	movs	r1, #224	; 0xe0
 80017e6:	00c9      	lsls	r1, r1, #3
 80017e8:	430a      	orrs	r2, r1
 80017ea:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ec:	4b4d      	ldr	r3, [pc, #308]	; (8001924 <HAL_RCC_ClockConfig+0x1a0>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	22f0      	movs	r2, #240	; 0xf0
 80017f2:	4393      	bics	r3, r2
 80017f4:	0019      	movs	r1, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	4b4a      	ldr	r3, [pc, #296]	; (8001924 <HAL_RCC_ClockConfig+0x1a0>)
 80017fc:	430a      	orrs	r2, r1
 80017fe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2201      	movs	r2, #1
 8001806:	4013      	ands	r3, r2
 8001808:	d04c      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d107      	bne.n	8001822 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001812:	4b44      	ldr	r3, [pc, #272]	; (8001924 <HAL_RCC_ClockConfig+0x1a0>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	029b      	lsls	r3, r3, #10
 800181a:	4013      	ands	r3, r2
 800181c:	d120      	bne.n	8001860 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e07a      	b.n	8001918 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d107      	bne.n	800183a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800182a:	4b3e      	ldr	r3, [pc, #248]	; (8001924 <HAL_RCC_ClockConfig+0x1a0>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	049b      	lsls	r3, r3, #18
 8001832:	4013      	ands	r3, r2
 8001834:	d114      	bne.n	8001860 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e06e      	b.n	8001918 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b03      	cmp	r3, #3
 8001840:	d107      	bne.n	8001852 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001842:	4b38      	ldr	r3, [pc, #224]	; (8001924 <HAL_RCC_ClockConfig+0x1a0>)
 8001844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001846:	2380      	movs	r3, #128	; 0x80
 8001848:	025b      	lsls	r3, r3, #9
 800184a:	4013      	ands	r3, r2
 800184c:	d108      	bne.n	8001860 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e062      	b.n	8001918 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001852:	4b34      	ldr	r3, [pc, #208]	; (8001924 <HAL_RCC_ClockConfig+0x1a0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2202      	movs	r2, #2
 8001858:	4013      	ands	r3, r2
 800185a:	d101      	bne.n	8001860 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e05b      	b.n	8001918 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001860:	4b30      	ldr	r3, [pc, #192]	; (8001924 <HAL_RCC_ClockConfig+0x1a0>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2203      	movs	r2, #3
 8001866:	4393      	bics	r3, r2
 8001868:	0019      	movs	r1, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <HAL_RCC_ClockConfig+0x1a0>)
 8001870:	430a      	orrs	r2, r1
 8001872:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001874:	f7ff f898 	bl	80009a8 <HAL_GetTick>
 8001878:	0003      	movs	r3, r0
 800187a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187c:	e009      	b.n	8001892 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800187e:	f7ff f893 	bl	80009a8 <HAL_GetTick>
 8001882:	0002      	movs	r2, r0
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	4a27      	ldr	r2, [pc, #156]	; (8001928 <HAL_RCC_ClockConfig+0x1a4>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e042      	b.n	8001918 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001892:	4b24      	ldr	r3, [pc, #144]	; (8001924 <HAL_RCC_ClockConfig+0x1a0>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	220c      	movs	r2, #12
 8001898:	401a      	ands	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d1ec      	bne.n	800187e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018a4:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <HAL_RCC_ClockConfig+0x19c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2201      	movs	r2, #1
 80018aa:	4013      	ands	r3, r2
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d211      	bcs.n	80018d6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b2:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <HAL_RCC_ClockConfig+0x19c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2201      	movs	r2, #1
 80018b8:	4393      	bics	r3, r2
 80018ba:	0019      	movs	r1, r3
 80018bc:	4b18      	ldr	r3, [pc, #96]	; (8001920 <HAL_RCC_ClockConfig+0x19c>)
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c4:	4b16      	ldr	r3, [pc, #88]	; (8001920 <HAL_RCC_ClockConfig+0x19c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2201      	movs	r2, #1
 80018ca:	4013      	ands	r3, r2
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d001      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e020      	b.n	8001918 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2204      	movs	r2, #4
 80018dc:	4013      	ands	r3, r2
 80018de:	d009      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018e0:	4b10      	ldr	r3, [pc, #64]	; (8001924 <HAL_RCC_ClockConfig+0x1a0>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	4a11      	ldr	r2, [pc, #68]	; (800192c <HAL_RCC_ClockConfig+0x1a8>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	0019      	movs	r1, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68da      	ldr	r2, [r3, #12]
 80018ee:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <HAL_RCC_ClockConfig+0x1a0>)
 80018f0:	430a      	orrs	r2, r1
 80018f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018f4:	f000 f820 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 80018f8:	0001      	movs	r1, r0
 80018fa:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <HAL_RCC_ClockConfig+0x1a0>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	091b      	lsrs	r3, r3, #4
 8001900:	220f      	movs	r2, #15
 8001902:	4013      	ands	r3, r2
 8001904:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <HAL_RCC_ClockConfig+0x1ac>)
 8001906:	5cd3      	ldrb	r3, [r2, r3]
 8001908:	000a      	movs	r2, r1
 800190a:	40da      	lsrs	r2, r3
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <HAL_RCC_ClockConfig+0x1b0>)
 800190e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001910:	2000      	movs	r0, #0
 8001912:	f7ff f803 	bl	800091c <HAL_InitTick>
  
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	0018      	movs	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	b004      	add	sp, #16
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40022000 	.word	0x40022000
 8001924:	40021000 	.word	0x40021000
 8001928:	00001388 	.word	0x00001388
 800192c:	fffff8ff 	.word	0xfffff8ff
 8001930:	080030e4 	.word	0x080030e4
 8001934:	200000c0 	.word	0x200000c0

08001938 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b08f      	sub	sp, #60	; 0x3c
 800193c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800193e:	2314      	movs	r3, #20
 8001940:	18fb      	adds	r3, r7, r3
 8001942:	4a38      	ldr	r2, [pc, #224]	; (8001a24 <HAL_RCC_GetSysClockFreq+0xec>)
 8001944:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001946:	c313      	stmia	r3!, {r0, r1, r4}
 8001948:	6812      	ldr	r2, [r2, #0]
 800194a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	4a36      	ldr	r2, [pc, #216]	; (8001a28 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001950:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001952:	c313      	stmia	r3!, {r0, r1, r4}
 8001954:	6812      	ldr	r2, [r2, #0]
 8001956:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800195c:	2300      	movs	r3, #0
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001960:	2300      	movs	r3, #0
 8001962:	637b      	str	r3, [r7, #52]	; 0x34
 8001964:	2300      	movs	r3, #0
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800196c:	4b2f      	ldr	r3, [pc, #188]	; (8001a2c <HAL_RCC_GetSysClockFreq+0xf4>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001974:	220c      	movs	r2, #12
 8001976:	4013      	ands	r3, r2
 8001978:	2b0c      	cmp	r3, #12
 800197a:	d047      	beq.n	8001a0c <HAL_RCC_GetSysClockFreq+0xd4>
 800197c:	d849      	bhi.n	8001a12 <HAL_RCC_GetSysClockFreq+0xda>
 800197e:	2b04      	cmp	r3, #4
 8001980:	d002      	beq.n	8001988 <HAL_RCC_GetSysClockFreq+0x50>
 8001982:	2b08      	cmp	r3, #8
 8001984:	d003      	beq.n	800198e <HAL_RCC_GetSysClockFreq+0x56>
 8001986:	e044      	b.n	8001a12 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001988:	4b29      	ldr	r3, [pc, #164]	; (8001a30 <HAL_RCC_GetSysClockFreq+0xf8>)
 800198a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800198c:	e044      	b.n	8001a18 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800198e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001990:	0c9b      	lsrs	r3, r3, #18
 8001992:	220f      	movs	r2, #15
 8001994:	4013      	ands	r3, r2
 8001996:	2214      	movs	r2, #20
 8001998:	18ba      	adds	r2, r7, r2
 800199a:	5cd3      	ldrb	r3, [r2, r3]
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800199e:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <HAL_RCC_GetSysClockFreq+0xf4>)
 80019a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a2:	220f      	movs	r2, #15
 80019a4:	4013      	ands	r3, r2
 80019a6:	1d3a      	adds	r2, r7, #4
 80019a8:	5cd3      	ldrb	r3, [r2, r3]
 80019aa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80019ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ae:	23c0      	movs	r3, #192	; 0xc0
 80019b0:	025b      	lsls	r3, r3, #9
 80019b2:	401a      	ands	r2, r3
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	025b      	lsls	r3, r3, #9
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d109      	bne.n	80019d0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019be:	481c      	ldr	r0, [pc, #112]	; (8001a30 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019c0:	f7fe fba0 	bl	8000104 <__udivsi3>
 80019c4:	0003      	movs	r3, r0
 80019c6:	001a      	movs	r2, r3
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	4353      	muls	r3, r2
 80019cc:	637b      	str	r3, [r7, #52]	; 0x34
 80019ce:	e01a      	b.n	8001a06 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80019d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019d2:	23c0      	movs	r3, #192	; 0xc0
 80019d4:	025b      	lsls	r3, r3, #9
 80019d6:	401a      	ands	r2, r3
 80019d8:	23c0      	movs	r3, #192	; 0xc0
 80019da:	025b      	lsls	r3, r3, #9
 80019dc:	429a      	cmp	r2, r3
 80019de:	d109      	bne.n	80019f4 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019e2:	4814      	ldr	r0, [pc, #80]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xfc>)
 80019e4:	f7fe fb8e 	bl	8000104 <__udivsi3>
 80019e8:	0003      	movs	r3, r0
 80019ea:	001a      	movs	r2, r3
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	4353      	muls	r3, r2
 80019f0:	637b      	str	r3, [r7, #52]	; 0x34
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019f6:	480e      	ldr	r0, [pc, #56]	; (8001a30 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019f8:	f7fe fb84 	bl	8000104 <__udivsi3>
 80019fc:	0003      	movs	r3, r0
 80019fe:	001a      	movs	r2, r3
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	4353      	muls	r3, r2
 8001a04:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a08:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a0a:	e005      	b.n	8001a18 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001a0c:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a0e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a10:	e002      	b.n	8001a18 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a12:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a14:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a16:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	b00f      	add	sp, #60	; 0x3c
 8001a20:	bd90      	pop	{r4, r7, pc}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	080030c4 	.word	0x080030c4
 8001a28:	080030d4 	.word	0x080030d4
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	007a1200 	.word	0x007a1200
 8001a34:	02dc6c00 	.word	0x02dc6c00

08001a38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a3c:	4b02      	ldr	r3, [pc, #8]	; (8001a48 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	200000c0 	.word	0x200000c0

08001a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001a50:	f7ff fff2 	bl	8001a38 <HAL_RCC_GetHCLKFreq>
 8001a54:	0001      	movs	r1, r0
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	0a1b      	lsrs	r3, r3, #8
 8001a5c:	2207      	movs	r2, #7
 8001a5e:	4013      	ands	r3, r2
 8001a60:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a62:	5cd3      	ldrb	r3, [r2, r3]
 8001a64:	40d9      	lsrs	r1, r3
 8001a66:	000b      	movs	r3, r1
}    
 8001a68:	0018      	movs	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	40021000 	.word	0x40021000
 8001a74:	080030f4 	.word	0x080030f4

08001a78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	025b      	lsls	r3, r3, #9
 8001a90:	4013      	ands	r3, r2
 8001a92:	d100      	bne.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001a94:	e08e      	b.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001a96:	2017      	movs	r0, #23
 8001a98:	183b      	adds	r3, r7, r0
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a9e:	4b6e      	ldr	r3, [pc, #440]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aa0:	69da      	ldr	r2, [r3, #28]
 8001aa2:	2380      	movs	r3, #128	; 0x80
 8001aa4:	055b      	lsls	r3, r3, #21
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d110      	bne.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001aaa:	4b6b      	ldr	r3, [pc, #428]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aac:	69da      	ldr	r2, [r3, #28]
 8001aae:	4b6a      	ldr	r3, [pc, #424]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ab0:	2180      	movs	r1, #128	; 0x80
 8001ab2:	0549      	lsls	r1, r1, #21
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	61da      	str	r2, [r3, #28]
 8001ab8:	4b67      	ldr	r3, [pc, #412]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aba:	69da      	ldr	r2, [r3, #28]
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	055b      	lsls	r3, r3, #21
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ac6:	183b      	adds	r3, r7, r0
 8001ac8:	2201      	movs	r2, #1
 8001aca:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001acc:	4b63      	ldr	r3, [pc, #396]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d11a      	bne.n	8001b0e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ad8:	4b60      	ldr	r3, [pc, #384]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b5f      	ldr	r3, [pc, #380]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ade:	2180      	movs	r1, #128	; 0x80
 8001ae0:	0049      	lsls	r1, r1, #1
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ae6:	f7fe ff5f 	bl	80009a8 <HAL_GetTick>
 8001aea:	0003      	movs	r3, r0
 8001aec:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aee:	e008      	b.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af0:	f7fe ff5a 	bl	80009a8 <HAL_GetTick>
 8001af4:	0002      	movs	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b64      	cmp	r3, #100	; 0x64
 8001afc:	d901      	bls.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e0a6      	b.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b02:	4b56      	ldr	r3, [pc, #344]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d0f0      	beq.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b0e:	4b52      	ldr	r3, [pc, #328]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b10:	6a1a      	ldr	r2, [r3, #32]
 8001b12:	23c0      	movs	r3, #192	; 0xc0
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4013      	ands	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d034      	beq.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	23c0      	movs	r3, #192	; 0xc0
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4013      	ands	r3, r2
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d02c      	beq.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b30:	4b49      	ldr	r3, [pc, #292]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	4a4a      	ldr	r2, [pc, #296]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001b36:	4013      	ands	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b3a:	4b47      	ldr	r3, [pc, #284]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b3c:	6a1a      	ldr	r2, [r3, #32]
 8001b3e:	4b46      	ldr	r3, [pc, #280]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b40:	2180      	movs	r1, #128	; 0x80
 8001b42:	0249      	lsls	r1, r1, #9
 8001b44:	430a      	orrs	r2, r1
 8001b46:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b48:	4b43      	ldr	r3, [pc, #268]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b4a:	6a1a      	ldr	r2, [r3, #32]
 8001b4c:	4b42      	ldr	r3, [pc, #264]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b4e:	4945      	ldr	r1, [pc, #276]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001b50:	400a      	ands	r2, r1
 8001b52:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b54:	4b40      	ldr	r3, [pc, #256]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d013      	beq.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b62:	f7fe ff21 	bl	80009a8 <HAL_GetTick>
 8001b66:	0003      	movs	r3, r0
 8001b68:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6a:	e009      	b.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6c:	f7fe ff1c 	bl	80009a8 <HAL_GetTick>
 8001b70:	0002      	movs	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	4a3c      	ldr	r2, [pc, #240]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e067      	b.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b80:	4b35      	ldr	r3, [pc, #212]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	2202      	movs	r2, #2
 8001b86:	4013      	ands	r3, r2
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b8a:	4b33      	ldr	r3, [pc, #204]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	4a34      	ldr	r2, [pc, #208]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	0019      	movs	r1, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	4b2f      	ldr	r3, [pc, #188]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b9e:	2317      	movs	r3, #23
 8001ba0:	18fb      	adds	r3, r7, r3
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d105      	bne.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ba8:	4b2b      	ldr	r3, [pc, #172]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001baa:	69da      	ldr	r2, [r3, #28]
 8001bac:	4b2a      	ldr	r3, [pc, #168]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bae:	492f      	ldr	r1, [pc, #188]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001bb0:	400a      	ands	r2, r1
 8001bb2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d009      	beq.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bbe:	4b26      	ldr	r3, [pc, #152]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	4393      	bics	r3, r2
 8001bc6:	0019      	movs	r1, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d009      	beq.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001bdc:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be0:	4a23      	ldr	r2, [pc, #140]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001be2:	4013      	ands	r3, r2
 8001be4:	0019      	movs	r1, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68da      	ldr	r2, [r3, #12]
 8001bea:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bec:	430a      	orrs	r2, r1
 8001bee:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	2380      	movs	r3, #128	; 0x80
 8001bf6:	02db      	lsls	r3, r3, #11
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d009      	beq.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001bfc:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	4a1c      	ldr	r2, [pc, #112]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001c02:	4013      	ands	r3, r2
 8001c04:	0019      	movs	r1, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691a      	ldr	r2, [r3, #16]
 8001c0a:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2220      	movs	r2, #32
 8001c16:	4013      	ands	r3, r2
 8001c18:	d009      	beq.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	2210      	movs	r2, #16
 8001c20:	4393      	bics	r3, r2
 8001c22:	0019      	movs	r1, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	695a      	ldr	r2, [r3, #20]
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4013      	ands	r3, r2
 8001c38:	d009      	beq.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001c3a:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	2240      	movs	r2, #64	; 0x40
 8001c40:	4393      	bics	r3, r2
 8001c42:	0019      	movs	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	699a      	ldr	r2, [r3, #24]
 8001c48:	4b03      	ldr	r3, [pc, #12]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	0018      	movs	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	b006      	add	sp, #24
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40007000 	.word	0x40007000
 8001c60:	fffffcff 	.word	0xfffffcff
 8001c64:	fffeffff 	.word	0xfffeffff
 8001c68:	00001388 	.word	0x00001388
 8001c6c:	efffffff 	.word	0xefffffff
 8001c70:	fffcffff 	.word	0xfffcffff
 8001c74:	fff3ffff 	.word	0xfff3ffff

08001c78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e044      	b.n	8001d14 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d107      	bne.n	8001ca2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2274      	movs	r2, #116	; 0x74
 8001c96:	2100      	movs	r1, #0
 8001c98:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f7fe fcdb 	bl	8000658 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2224      	movs	r2, #36	; 0x24
 8001ca6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	438a      	bics	r2, r1
 8001cb6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f000 f8da 	bl	8001e74 <UART_SetConfig>
 8001cc0:	0003      	movs	r3, r0
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d101      	bne.n	8001cca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e024      	b.n	8001d14 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f000 fab5 	bl	8002244 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	490d      	ldr	r1, [pc, #52]	; (8001d1c <HAL_UART_Init+0xa4>)
 8001ce6:	400a      	ands	r2, r1
 8001ce8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	212a      	movs	r1, #42	; 0x2a
 8001cf6:	438a      	bics	r2, r1
 8001cf8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2101      	movs	r1, #1
 8001d06:	430a      	orrs	r2, r1
 8001d08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f000 fb4d 	bl	80023ac <UART_CheckIdleState>
 8001d12:	0003      	movs	r3, r0
}
 8001d14:	0018      	movs	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	b002      	add	sp, #8
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	ffffb7ff 	.word	0xffffb7ff

08001d20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	; 0x28
 8001d24:	af02      	add	r7, sp, #8
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	603b      	str	r3, [r7, #0]
 8001d2c:	1dbb      	adds	r3, r7, #6
 8001d2e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d34:	2b20      	cmp	r3, #32
 8001d36:	d000      	beq.n	8001d3a <HAL_UART_Transmit+0x1a>
 8001d38:	e096      	b.n	8001e68 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_UART_Transmit+0x28>
 8001d40:	1dbb      	adds	r3, r7, #6
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e08e      	b.n	8001e6a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	015b      	lsls	r3, r3, #5
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d109      	bne.n	8001d6c <HAL_UART_Transmit+0x4c>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d105      	bne.n	8001d6c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2201      	movs	r2, #1
 8001d64:	4013      	ands	r3, r2
 8001d66:	d001      	beq.n	8001d6c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e07e      	b.n	8001e6a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2274      	movs	r2, #116	; 0x74
 8001d70:	5c9b      	ldrb	r3, [r3, r2]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_UART_Transmit+0x5a>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e077      	b.n	8001e6a <HAL_UART_Transmit+0x14a>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2274      	movs	r2, #116	; 0x74
 8001d7e:	2101      	movs	r1, #1
 8001d80:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2280      	movs	r2, #128	; 0x80
 8001d86:	2100      	movs	r1, #0
 8001d88:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2221      	movs	r2, #33	; 0x21
 8001d8e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d90:	f7fe fe0a 	bl	80009a8 <HAL_GetTick>
 8001d94:	0003      	movs	r3, r0
 8001d96:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	1dba      	adds	r2, r7, #6
 8001d9c:	2150      	movs	r1, #80	; 0x50
 8001d9e:	8812      	ldrh	r2, [r2, #0]
 8001da0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1dba      	adds	r2, r7, #6
 8001da6:	2152      	movs	r1, #82	; 0x52
 8001da8:	8812      	ldrh	r2, [r2, #0]
 8001daa:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	015b      	lsls	r3, r3, #5
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d108      	bne.n	8001dca <HAL_UART_Transmit+0xaa>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d104      	bne.n	8001dca <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	61bb      	str	r3, [r7, #24]
 8001dc8:	e003      	b.n	8001dd2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2274      	movs	r2, #116	; 0x74
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001dda:	e02d      	b.n	8001e38 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	0013      	movs	r3, r2
 8001de6:	2200      	movs	r2, #0
 8001de8:	2180      	movs	r1, #128	; 0x80
 8001dea:	f000 fb27 	bl	800243c <UART_WaitOnFlagUntilTimeout>
 8001dee:	1e03      	subs	r3, r0, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e039      	b.n	8001e6a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d10b      	bne.n	8001e14 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	881a      	ldrh	r2, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	05d2      	lsls	r2, r2, #23
 8001e06:	0dd2      	lsrs	r2, r2, #23
 8001e08:	b292      	uxth	r2, r2
 8001e0a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	3302      	adds	r3, #2
 8001e10:	61bb      	str	r3, [r7, #24]
 8001e12:	e008      	b.n	8001e26 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	781a      	ldrb	r2, [r3, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	b292      	uxth	r2, r2
 8001e1e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	3301      	adds	r3, #1
 8001e24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2252      	movs	r2, #82	; 0x52
 8001e2a:	5a9b      	ldrh	r3, [r3, r2]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	b299      	uxth	r1, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2252      	movs	r2, #82	; 0x52
 8001e36:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2252      	movs	r2, #82	; 0x52
 8001e3c:	5a9b      	ldrh	r3, [r3, r2]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1cb      	bne.n	8001ddc <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	0013      	movs	r3, r2
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2140      	movs	r1, #64	; 0x40
 8001e52:	f000 faf3 	bl	800243c <UART_WaitOnFlagUntilTimeout>
 8001e56:	1e03      	subs	r3, r0, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e005      	b.n	8001e6a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2220      	movs	r2, #32
 8001e62:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	e000      	b.n	8001e6a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001e68:	2302      	movs	r3, #2
  }
}
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	b008      	add	sp, #32
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e7c:	231e      	movs	r3, #30
 8001e7e:	18fb      	adds	r3, r7, r3
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	69db      	ldr	r3, [r3, #28]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4abe      	ldr	r2, [pc, #760]	; (800219c <UART_SetConfig+0x328>)
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	0019      	movs	r1, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	4ab9      	ldr	r2, [pc, #740]	; (80021a0 <UART_SetConfig+0x32c>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	0019      	movs	r1, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	697a      	ldr	r2, [r7, #20]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	4ab0      	ldr	r2, [pc, #704]	; (80021a4 <UART_SetConfig+0x330>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	0019      	movs	r1, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4aac      	ldr	r2, [pc, #688]	; (80021a8 <UART_SetConfig+0x334>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d127      	bne.n	8001f4a <UART_SetConfig+0xd6>
 8001efa:	4bac      	ldr	r3, [pc, #688]	; (80021ac <UART_SetConfig+0x338>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	2203      	movs	r2, #3
 8001f00:	4013      	ands	r3, r2
 8001f02:	2b03      	cmp	r3, #3
 8001f04:	d00d      	beq.n	8001f22 <UART_SetConfig+0xae>
 8001f06:	d81b      	bhi.n	8001f40 <UART_SetConfig+0xcc>
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d014      	beq.n	8001f36 <UART_SetConfig+0xc2>
 8001f0c:	d818      	bhi.n	8001f40 <UART_SetConfig+0xcc>
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d002      	beq.n	8001f18 <UART_SetConfig+0xa4>
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d00a      	beq.n	8001f2c <UART_SetConfig+0xb8>
 8001f16:	e013      	b.n	8001f40 <UART_SetConfig+0xcc>
 8001f18:	231f      	movs	r3, #31
 8001f1a:	18fb      	adds	r3, r7, r3
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]
 8001f20:	e0bd      	b.n	800209e <UART_SetConfig+0x22a>
 8001f22:	231f      	movs	r3, #31
 8001f24:	18fb      	adds	r3, r7, r3
 8001f26:	2202      	movs	r2, #2
 8001f28:	701a      	strb	r2, [r3, #0]
 8001f2a:	e0b8      	b.n	800209e <UART_SetConfig+0x22a>
 8001f2c:	231f      	movs	r3, #31
 8001f2e:	18fb      	adds	r3, r7, r3
 8001f30:	2204      	movs	r2, #4
 8001f32:	701a      	strb	r2, [r3, #0]
 8001f34:	e0b3      	b.n	800209e <UART_SetConfig+0x22a>
 8001f36:	231f      	movs	r3, #31
 8001f38:	18fb      	adds	r3, r7, r3
 8001f3a:	2208      	movs	r2, #8
 8001f3c:	701a      	strb	r2, [r3, #0]
 8001f3e:	e0ae      	b.n	800209e <UART_SetConfig+0x22a>
 8001f40:	231f      	movs	r3, #31
 8001f42:	18fb      	adds	r3, r7, r3
 8001f44:	2210      	movs	r2, #16
 8001f46:	701a      	strb	r2, [r3, #0]
 8001f48:	e0a9      	b.n	800209e <UART_SetConfig+0x22a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a98      	ldr	r2, [pc, #608]	; (80021b0 <UART_SetConfig+0x33c>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d134      	bne.n	8001fbe <UART_SetConfig+0x14a>
 8001f54:	4b95      	ldr	r3, [pc, #596]	; (80021ac <UART_SetConfig+0x338>)
 8001f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f58:	23c0      	movs	r3, #192	; 0xc0
 8001f5a:	029b      	lsls	r3, r3, #10
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	22c0      	movs	r2, #192	; 0xc0
 8001f60:	0292      	lsls	r2, r2, #10
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d017      	beq.n	8001f96 <UART_SetConfig+0x122>
 8001f66:	22c0      	movs	r2, #192	; 0xc0
 8001f68:	0292      	lsls	r2, r2, #10
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d822      	bhi.n	8001fb4 <UART_SetConfig+0x140>
 8001f6e:	2280      	movs	r2, #128	; 0x80
 8001f70:	0292      	lsls	r2, r2, #10
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d019      	beq.n	8001faa <UART_SetConfig+0x136>
 8001f76:	2280      	movs	r2, #128	; 0x80
 8001f78:	0292      	lsls	r2, r2, #10
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d81a      	bhi.n	8001fb4 <UART_SetConfig+0x140>
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d004      	beq.n	8001f8c <UART_SetConfig+0x118>
 8001f82:	2280      	movs	r2, #128	; 0x80
 8001f84:	0252      	lsls	r2, r2, #9
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d00a      	beq.n	8001fa0 <UART_SetConfig+0x12c>
 8001f8a:	e013      	b.n	8001fb4 <UART_SetConfig+0x140>
 8001f8c:	231f      	movs	r3, #31
 8001f8e:	18fb      	adds	r3, r7, r3
 8001f90:	2200      	movs	r2, #0
 8001f92:	701a      	strb	r2, [r3, #0]
 8001f94:	e083      	b.n	800209e <UART_SetConfig+0x22a>
 8001f96:	231f      	movs	r3, #31
 8001f98:	18fb      	adds	r3, r7, r3
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	701a      	strb	r2, [r3, #0]
 8001f9e:	e07e      	b.n	800209e <UART_SetConfig+0x22a>
 8001fa0:	231f      	movs	r3, #31
 8001fa2:	18fb      	adds	r3, r7, r3
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	701a      	strb	r2, [r3, #0]
 8001fa8:	e079      	b.n	800209e <UART_SetConfig+0x22a>
 8001faa:	231f      	movs	r3, #31
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	2208      	movs	r2, #8
 8001fb0:	701a      	strb	r2, [r3, #0]
 8001fb2:	e074      	b.n	800209e <UART_SetConfig+0x22a>
 8001fb4:	231f      	movs	r3, #31
 8001fb6:	18fb      	adds	r3, r7, r3
 8001fb8:	2210      	movs	r2, #16
 8001fba:	701a      	strb	r2, [r3, #0]
 8001fbc:	e06f      	b.n	800209e <UART_SetConfig+0x22a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a7c      	ldr	r2, [pc, #496]	; (80021b4 <UART_SetConfig+0x340>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d134      	bne.n	8002032 <UART_SetConfig+0x1be>
 8001fc8:	4b78      	ldr	r3, [pc, #480]	; (80021ac <UART_SetConfig+0x338>)
 8001fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fcc:	23c0      	movs	r3, #192	; 0xc0
 8001fce:	031b      	lsls	r3, r3, #12
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	22c0      	movs	r2, #192	; 0xc0
 8001fd4:	0312      	lsls	r2, r2, #12
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d017      	beq.n	800200a <UART_SetConfig+0x196>
 8001fda:	22c0      	movs	r2, #192	; 0xc0
 8001fdc:	0312      	lsls	r2, r2, #12
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d822      	bhi.n	8002028 <UART_SetConfig+0x1b4>
 8001fe2:	2280      	movs	r2, #128	; 0x80
 8001fe4:	0312      	lsls	r2, r2, #12
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d019      	beq.n	800201e <UART_SetConfig+0x1aa>
 8001fea:	2280      	movs	r2, #128	; 0x80
 8001fec:	0312      	lsls	r2, r2, #12
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d81a      	bhi.n	8002028 <UART_SetConfig+0x1b4>
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d004      	beq.n	8002000 <UART_SetConfig+0x18c>
 8001ff6:	2280      	movs	r2, #128	; 0x80
 8001ff8:	02d2      	lsls	r2, r2, #11
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d00a      	beq.n	8002014 <UART_SetConfig+0x1a0>
 8001ffe:	e013      	b.n	8002028 <UART_SetConfig+0x1b4>
 8002000:	231f      	movs	r3, #31
 8002002:	18fb      	adds	r3, r7, r3
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
 8002008:	e049      	b.n	800209e <UART_SetConfig+0x22a>
 800200a:	231f      	movs	r3, #31
 800200c:	18fb      	adds	r3, r7, r3
 800200e:	2202      	movs	r2, #2
 8002010:	701a      	strb	r2, [r3, #0]
 8002012:	e044      	b.n	800209e <UART_SetConfig+0x22a>
 8002014:	231f      	movs	r3, #31
 8002016:	18fb      	adds	r3, r7, r3
 8002018:	2204      	movs	r2, #4
 800201a:	701a      	strb	r2, [r3, #0]
 800201c:	e03f      	b.n	800209e <UART_SetConfig+0x22a>
 800201e:	231f      	movs	r3, #31
 8002020:	18fb      	adds	r3, r7, r3
 8002022:	2208      	movs	r2, #8
 8002024:	701a      	strb	r2, [r3, #0]
 8002026:	e03a      	b.n	800209e <UART_SetConfig+0x22a>
 8002028:	231f      	movs	r3, #31
 800202a:	18fb      	adds	r3, r7, r3
 800202c:	2210      	movs	r2, #16
 800202e:	701a      	strb	r2, [r3, #0]
 8002030:	e035      	b.n	800209e <UART_SetConfig+0x22a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a60      	ldr	r2, [pc, #384]	; (80021b8 <UART_SetConfig+0x344>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d104      	bne.n	8002046 <UART_SetConfig+0x1d2>
 800203c:	231f      	movs	r3, #31
 800203e:	18fb      	adds	r3, r7, r3
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]
 8002044:	e02b      	b.n	800209e <UART_SetConfig+0x22a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a5c      	ldr	r2, [pc, #368]	; (80021bc <UART_SetConfig+0x348>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d104      	bne.n	800205a <UART_SetConfig+0x1e6>
 8002050:	231f      	movs	r3, #31
 8002052:	18fb      	adds	r3, r7, r3
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
 8002058:	e021      	b.n	800209e <UART_SetConfig+0x22a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a58      	ldr	r2, [pc, #352]	; (80021c0 <UART_SetConfig+0x34c>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d104      	bne.n	800206e <UART_SetConfig+0x1fa>
 8002064:	231f      	movs	r3, #31
 8002066:	18fb      	adds	r3, r7, r3
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
 800206c:	e017      	b.n	800209e <UART_SetConfig+0x22a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a54      	ldr	r2, [pc, #336]	; (80021c4 <UART_SetConfig+0x350>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d104      	bne.n	8002082 <UART_SetConfig+0x20e>
 8002078:	231f      	movs	r3, #31
 800207a:	18fb      	adds	r3, r7, r3
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
 8002080:	e00d      	b.n	800209e <UART_SetConfig+0x22a>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a50      	ldr	r2, [pc, #320]	; (80021c8 <UART_SetConfig+0x354>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d104      	bne.n	8002096 <UART_SetConfig+0x222>
 800208c:	231f      	movs	r3, #31
 800208e:	18fb      	adds	r3, r7, r3
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
 8002094:	e003      	b.n	800209e <UART_SetConfig+0x22a>
 8002096:	231f      	movs	r3, #31
 8002098:	18fb      	adds	r3, r7, r3
 800209a:	2210      	movs	r2, #16
 800209c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69da      	ldr	r2, [r3, #28]
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	021b      	lsls	r3, r3, #8
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d15d      	bne.n	8002166 <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 80020aa:	231f      	movs	r3, #31
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d015      	beq.n	80020e0 <UART_SetConfig+0x26c>
 80020b4:	dc18      	bgt.n	80020e8 <UART_SetConfig+0x274>
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d00d      	beq.n	80020d6 <UART_SetConfig+0x262>
 80020ba:	dc15      	bgt.n	80020e8 <UART_SetConfig+0x274>
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d002      	beq.n	80020c6 <UART_SetConfig+0x252>
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d005      	beq.n	80020d0 <UART_SetConfig+0x25c>
 80020c4:	e010      	b.n	80020e8 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80020c6:	f7ff fcc1 	bl	8001a4c <HAL_RCC_GetPCLK1Freq>
 80020ca:	0003      	movs	r3, r0
 80020cc:	61bb      	str	r3, [r7, #24]
        break;
 80020ce:	e012      	b.n	80020f6 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80020d0:	4b3e      	ldr	r3, [pc, #248]	; (80021cc <UART_SetConfig+0x358>)
 80020d2:	61bb      	str	r3, [r7, #24]
        break;
 80020d4:	e00f      	b.n	80020f6 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80020d6:	f7ff fc2f 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 80020da:	0003      	movs	r3, r0
 80020dc:	61bb      	str	r3, [r7, #24]
        break;
 80020de:	e00a      	b.n	80020f6 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	021b      	lsls	r3, r3, #8
 80020e4:	61bb      	str	r3, [r7, #24]
        break;
 80020e6:	e006      	b.n	80020f6 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80020ec:	231e      	movs	r3, #30
 80020ee:	18fb      	adds	r3, r7, r3
 80020f0:	2201      	movs	r2, #1
 80020f2:	701a      	strb	r2, [r3, #0]
        break;
 80020f4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d100      	bne.n	80020fe <UART_SetConfig+0x28a>
 80020fc:	e095      	b.n	800222a <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	005a      	lsls	r2, r3, #1
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	085b      	lsrs	r3, r3, #1
 8002108:	18d2      	adds	r2, r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	0019      	movs	r1, r3
 8002110:	0010      	movs	r0, r2
 8002112:	f7fd fff7 	bl	8000104 <__udivsi3>
 8002116:	0003      	movs	r3, r0
 8002118:	b29b      	uxth	r3, r3
 800211a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	2b0f      	cmp	r3, #15
 8002120:	d91c      	bls.n	800215c <UART_SetConfig+0x2e8>
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	025b      	lsls	r3, r3, #9
 8002128:	429a      	cmp	r2, r3
 800212a:	d217      	bcs.n	800215c <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	b29a      	uxth	r2, r3
 8002130:	200e      	movs	r0, #14
 8002132:	183b      	adds	r3, r7, r0
 8002134:	210f      	movs	r1, #15
 8002136:	438a      	bics	r2, r1
 8002138:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	085b      	lsrs	r3, r3, #1
 800213e:	b29b      	uxth	r3, r3
 8002140:	2207      	movs	r2, #7
 8002142:	4013      	ands	r3, r2
 8002144:	b299      	uxth	r1, r3
 8002146:	183b      	adds	r3, r7, r0
 8002148:	183a      	adds	r2, r7, r0
 800214a:	8812      	ldrh	r2, [r2, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	183a      	adds	r2, r7, r0
 8002156:	8812      	ldrh	r2, [r2, #0]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	e066      	b.n	800222a <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800215c:	231e      	movs	r3, #30
 800215e:	18fb      	adds	r3, r7, r3
 8002160:	2201      	movs	r2, #1
 8002162:	701a      	strb	r2, [r3, #0]
 8002164:	e061      	b.n	800222a <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002166:	231f      	movs	r3, #31
 8002168:	18fb      	adds	r3, r7, r3
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b08      	cmp	r3, #8
 800216e:	d02f      	beq.n	80021d0 <UART_SetConfig+0x35c>
 8002170:	dc32      	bgt.n	80021d8 <UART_SetConfig+0x364>
 8002172:	2b04      	cmp	r3, #4
 8002174:	d00d      	beq.n	8002192 <UART_SetConfig+0x31e>
 8002176:	dc2f      	bgt.n	80021d8 <UART_SetConfig+0x364>
 8002178:	2b00      	cmp	r3, #0
 800217a:	d002      	beq.n	8002182 <UART_SetConfig+0x30e>
 800217c:	2b02      	cmp	r3, #2
 800217e:	d005      	beq.n	800218c <UART_SetConfig+0x318>
 8002180:	e02a      	b.n	80021d8 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002182:	f7ff fc63 	bl	8001a4c <HAL_RCC_GetPCLK1Freq>
 8002186:	0003      	movs	r3, r0
 8002188:	61bb      	str	r3, [r7, #24]
        break;
 800218a:	e02c      	b.n	80021e6 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800218c:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <UART_SetConfig+0x358>)
 800218e:	61bb      	str	r3, [r7, #24]
        break;
 8002190:	e029      	b.n	80021e6 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002192:	f7ff fbd1 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 8002196:	0003      	movs	r3, r0
 8002198:	61bb      	str	r3, [r7, #24]
        break;
 800219a:	e024      	b.n	80021e6 <UART_SetConfig+0x372>
 800219c:	efff69f3 	.word	0xefff69f3
 80021a0:	ffffcfff 	.word	0xffffcfff
 80021a4:	fffff4ff 	.word	0xfffff4ff
 80021a8:	40013800 	.word	0x40013800
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40004400 	.word	0x40004400
 80021b4:	40004800 	.word	0x40004800
 80021b8:	40004c00 	.word	0x40004c00
 80021bc:	40005000 	.word	0x40005000
 80021c0:	40011400 	.word	0x40011400
 80021c4:	40011800 	.word	0x40011800
 80021c8:	40011c00 	.word	0x40011c00
 80021cc:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80021d0:	2380      	movs	r3, #128	; 0x80
 80021d2:	021b      	lsls	r3, r3, #8
 80021d4:	61bb      	str	r3, [r7, #24]
        break;
 80021d6:	e006      	b.n	80021e6 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80021dc:	231e      	movs	r3, #30
 80021de:	18fb      	adds	r3, r7, r3
 80021e0:	2201      	movs	r2, #1
 80021e2:	701a      	strb	r2, [r3, #0]
        break;
 80021e4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d01e      	beq.n	800222a <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	085a      	lsrs	r2, r3, #1
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	18d2      	adds	r2, r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	0019      	movs	r1, r3
 80021fc:	0010      	movs	r0, r2
 80021fe:	f7fd ff81 	bl	8000104 <__udivsi3>
 8002202:	0003      	movs	r3, r0
 8002204:	b29b      	uxth	r3, r3
 8002206:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	2b0f      	cmp	r3, #15
 800220c:	d909      	bls.n	8002222 <UART_SetConfig+0x3ae>
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	025b      	lsls	r3, r3, #9
 8002214:	429a      	cmp	r2, r3
 8002216:	d204      	bcs.n	8002222 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	60da      	str	r2, [r3, #12]
 8002220:	e003      	b.n	800222a <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002222:	231e      	movs	r3, #30
 8002224:	18fb      	adds	r3, r7, r3
 8002226:	2201      	movs	r2, #1
 8002228:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002236:	231e      	movs	r3, #30
 8002238:	18fb      	adds	r3, r7, r3
 800223a:	781b      	ldrb	r3, [r3, #0]
}
 800223c:	0018      	movs	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	b008      	add	sp, #32
 8002242:	bd80      	pop	{r7, pc}

08002244 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	2201      	movs	r2, #1
 8002252:	4013      	ands	r3, r2
 8002254:	d00b      	beq.n	800226e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	4a4a      	ldr	r2, [pc, #296]	; (8002388 <UART_AdvFeatureConfig+0x144>)
 800225e:	4013      	ands	r3, r2
 8002260:	0019      	movs	r1, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	2202      	movs	r2, #2
 8002274:	4013      	ands	r3, r2
 8002276:	d00b      	beq.n	8002290 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	4a43      	ldr	r2, [pc, #268]	; (800238c <UART_AdvFeatureConfig+0x148>)
 8002280:	4013      	ands	r3, r2
 8002282:	0019      	movs	r1, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	2204      	movs	r2, #4
 8002296:	4013      	ands	r3, r2
 8002298:	d00b      	beq.n	80022b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4a3b      	ldr	r2, [pc, #236]	; (8002390 <UART_AdvFeatureConfig+0x14c>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	0019      	movs	r1, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	2208      	movs	r2, #8
 80022b8:	4013      	ands	r3, r2
 80022ba:	d00b      	beq.n	80022d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	4a34      	ldr	r2, [pc, #208]	; (8002394 <UART_AdvFeatureConfig+0x150>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	0019      	movs	r1, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	2210      	movs	r2, #16
 80022da:	4013      	ands	r3, r2
 80022dc:	d00b      	beq.n	80022f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	4a2c      	ldr	r2, [pc, #176]	; (8002398 <UART_AdvFeatureConfig+0x154>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	0019      	movs	r1, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	2220      	movs	r2, #32
 80022fc:	4013      	ands	r3, r2
 80022fe:	d00b      	beq.n	8002318 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	4a25      	ldr	r2, [pc, #148]	; (800239c <UART_AdvFeatureConfig+0x158>)
 8002308:	4013      	ands	r3, r2
 800230a:	0019      	movs	r1, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	2240      	movs	r2, #64	; 0x40
 800231e:	4013      	ands	r3, r2
 8002320:	d01d      	beq.n	800235e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	4a1d      	ldr	r2, [pc, #116]	; (80023a0 <UART_AdvFeatureConfig+0x15c>)
 800232a:	4013      	ands	r3, r2
 800232c:	0019      	movs	r1, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800233e:	2380      	movs	r3, #128	; 0x80
 8002340:	035b      	lsls	r3, r3, #13
 8002342:	429a      	cmp	r2, r3
 8002344:	d10b      	bne.n	800235e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	4a15      	ldr	r2, [pc, #84]	; (80023a4 <UART_AdvFeatureConfig+0x160>)
 800234e:	4013      	ands	r3, r2
 8002350:	0019      	movs	r1, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	2280      	movs	r2, #128	; 0x80
 8002364:	4013      	ands	r3, r2
 8002366:	d00b      	beq.n	8002380 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <UART_AdvFeatureConfig+0x164>)
 8002370:	4013      	ands	r3, r2
 8002372:	0019      	movs	r1, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	605a      	str	r2, [r3, #4]
  }
}
 8002380:	46c0      	nop			; (mov r8, r8)
 8002382:	46bd      	mov	sp, r7
 8002384:	b002      	add	sp, #8
 8002386:	bd80      	pop	{r7, pc}
 8002388:	fffdffff 	.word	0xfffdffff
 800238c:	fffeffff 	.word	0xfffeffff
 8002390:	fffbffff 	.word	0xfffbffff
 8002394:	ffff7fff 	.word	0xffff7fff
 8002398:	ffffefff 	.word	0xffffefff
 800239c:	ffffdfff 	.word	0xffffdfff
 80023a0:	ffefffff 	.word	0xffefffff
 80023a4:	ff9fffff 	.word	0xff9fffff
 80023a8:	fff7ffff 	.word	0xfff7ffff

080023ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af02      	add	r7, sp, #8
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2280      	movs	r2, #128	; 0x80
 80023b8:	2100      	movs	r1, #0
 80023ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80023bc:	f7fe faf4 	bl	80009a8 <HAL_GetTick>
 80023c0:	0003      	movs	r3, r0
 80023c2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2208      	movs	r2, #8
 80023cc:	4013      	ands	r3, r2
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d10c      	bne.n	80023ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2280      	movs	r2, #128	; 0x80
 80023d6:	0391      	lsls	r1, r2, #14
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	4a17      	ldr	r2, [pc, #92]	; (8002438 <UART_CheckIdleState+0x8c>)
 80023dc:	9200      	str	r2, [sp, #0]
 80023de:	2200      	movs	r2, #0
 80023e0:	f000 f82c 	bl	800243c <UART_WaitOnFlagUntilTimeout>
 80023e4:	1e03      	subs	r3, r0, #0
 80023e6:	d001      	beq.n	80023ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e021      	b.n	8002430 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2204      	movs	r2, #4
 80023f4:	4013      	ands	r3, r2
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d10c      	bne.n	8002414 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2280      	movs	r2, #128	; 0x80
 80023fe:	03d1      	lsls	r1, r2, #15
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	4a0d      	ldr	r2, [pc, #52]	; (8002438 <UART_CheckIdleState+0x8c>)
 8002404:	9200      	str	r2, [sp, #0]
 8002406:	2200      	movs	r2, #0
 8002408:	f000 f818 	bl	800243c <UART_WaitOnFlagUntilTimeout>
 800240c:	1e03      	subs	r3, r0, #0
 800240e:	d001      	beq.n	8002414 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e00d      	b.n	8002430 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2220      	movs	r2, #32
 8002418:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2220      	movs	r2, #32
 800241e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2274      	movs	r2, #116	; 0x74
 800242a:	2100      	movs	r1, #0
 800242c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	0018      	movs	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	b004      	add	sp, #16
 8002436:	bd80      	pop	{r7, pc}
 8002438:	01ffffff 	.word	0x01ffffff

0800243c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b094      	sub	sp, #80	; 0x50
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	1dfb      	adds	r3, r7, #7
 800244a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800244c:	e0a3      	b.n	8002596 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800244e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002450:	3301      	adds	r3, #1
 8002452:	d100      	bne.n	8002456 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002454:	e09f      	b.n	8002596 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002456:	f7fe faa7 	bl	80009a8 <HAL_GetTick>
 800245a:	0002      	movs	r2, r0
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002462:	429a      	cmp	r2, r3
 8002464:	d302      	bcc.n	800246c <UART_WaitOnFlagUntilTimeout+0x30>
 8002466:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002468:	2b00      	cmp	r3, #0
 800246a:	d13d      	bne.n	80024e8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800246c:	f3ef 8310 	mrs	r3, PRIMASK
 8002470:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002472:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002474:	647b      	str	r3, [r7, #68]	; 0x44
 8002476:	2301      	movs	r3, #1
 8002478:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800247a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247c:	f383 8810 	msr	PRIMASK, r3
}
 8002480:	46c0      	nop			; (mov r8, r8)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	494c      	ldr	r1, [pc, #304]	; (80025c0 <UART_WaitOnFlagUntilTimeout+0x184>)
 800248e:	400a      	ands	r2, r1
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002494:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002498:	f383 8810 	msr	PRIMASK, r3
}
 800249c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800249e:	f3ef 8310 	mrs	r3, PRIMASK
 80024a2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80024a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024a6:	643b      	str	r3, [r7, #64]	; 0x40
 80024a8:	2301      	movs	r3, #1
 80024aa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ae:	f383 8810 	msr	PRIMASK, r3
}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2101      	movs	r1, #1
 80024c0:	438a      	bics	r2, r1
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ca:	f383 8810 	msr	PRIMASK, r3
}
 80024ce:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2220      	movs	r2, #32
 80024d4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2220      	movs	r2, #32
 80024da:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2274      	movs	r2, #116	; 0x74
 80024e0:	2100      	movs	r1, #0
 80024e2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e067      	b.n	80025b8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2204      	movs	r2, #4
 80024f0:	4013      	ands	r3, r2
 80024f2:	d050      	beq.n	8002596 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	69da      	ldr	r2, [r3, #28]
 80024fa:	2380      	movs	r3, #128	; 0x80
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	401a      	ands	r2, r3
 8002500:	2380      	movs	r3, #128	; 0x80
 8002502:	011b      	lsls	r3, r3, #4
 8002504:	429a      	cmp	r2, r3
 8002506:	d146      	bne.n	8002596 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2280      	movs	r2, #128	; 0x80
 800250e:	0112      	lsls	r2, r2, #4
 8002510:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002512:	f3ef 8310 	mrs	r3, PRIMASK
 8002516:	613b      	str	r3, [r7, #16]
  return(result);
 8002518:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800251a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800251c:	2301      	movs	r3, #1
 800251e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f383 8810 	msr	PRIMASK, r3
}
 8002526:	46c0      	nop			; (mov r8, r8)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4923      	ldr	r1, [pc, #140]	; (80025c0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002534:	400a      	ands	r2, r1
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800253a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	f383 8810 	msr	PRIMASK, r3
}
 8002542:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002544:	f3ef 8310 	mrs	r3, PRIMASK
 8002548:	61fb      	str	r3, [r7, #28]
  return(result);
 800254a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800254c:	64bb      	str	r3, [r7, #72]	; 0x48
 800254e:	2301      	movs	r3, #1
 8002550:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002552:	6a3b      	ldr	r3, [r7, #32]
 8002554:	f383 8810 	msr	PRIMASK, r3
}
 8002558:	46c0      	nop			; (mov r8, r8)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2101      	movs	r1, #1
 8002566:	438a      	bics	r2, r1
 8002568:	609a      	str	r2, [r3, #8]
 800256a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	f383 8810 	msr	PRIMASK, r3
}
 8002574:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2220      	movs	r2, #32
 800257a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2220      	movs	r2, #32
 8002580:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2280      	movs	r2, #128	; 0x80
 8002586:	2120      	movs	r1, #32
 8002588:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2274      	movs	r2, #116	; 0x74
 800258e:	2100      	movs	r1, #0
 8002590:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e010      	b.n	80025b8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	4013      	ands	r3, r2
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	425a      	negs	r2, r3
 80025a6:	4153      	adcs	r3, r2
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	001a      	movs	r2, r3
 80025ac:	1dfb      	adds	r3, r7, #7
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d100      	bne.n	80025b6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80025b4:	e74b      	b.n	800244e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	0018      	movs	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b014      	add	sp, #80	; 0x50
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	fffffe5f 	.word	0xfffffe5f

080025c4 <__errno>:
 80025c4:	4b01      	ldr	r3, [pc, #4]	; (80025cc <__errno+0x8>)
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	4770      	bx	lr
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	200000cc 	.word	0x200000cc

080025d0 <__libc_init_array>:
 80025d0:	b570      	push	{r4, r5, r6, lr}
 80025d2:	2600      	movs	r6, #0
 80025d4:	4d0c      	ldr	r5, [pc, #48]	; (8002608 <__libc_init_array+0x38>)
 80025d6:	4c0d      	ldr	r4, [pc, #52]	; (800260c <__libc_init_array+0x3c>)
 80025d8:	1b64      	subs	r4, r4, r5
 80025da:	10a4      	asrs	r4, r4, #2
 80025dc:	42a6      	cmp	r6, r4
 80025de:	d109      	bne.n	80025f4 <__libc_init_array+0x24>
 80025e0:	2600      	movs	r6, #0
 80025e2:	f000 fd31 	bl	8003048 <_init>
 80025e6:	4d0a      	ldr	r5, [pc, #40]	; (8002610 <__libc_init_array+0x40>)
 80025e8:	4c0a      	ldr	r4, [pc, #40]	; (8002614 <__libc_init_array+0x44>)
 80025ea:	1b64      	subs	r4, r4, r5
 80025ec:	10a4      	asrs	r4, r4, #2
 80025ee:	42a6      	cmp	r6, r4
 80025f0:	d105      	bne.n	80025fe <__libc_init_array+0x2e>
 80025f2:	bd70      	pop	{r4, r5, r6, pc}
 80025f4:	00b3      	lsls	r3, r6, #2
 80025f6:	58eb      	ldr	r3, [r5, r3]
 80025f8:	4798      	blx	r3
 80025fa:	3601      	adds	r6, #1
 80025fc:	e7ee      	b.n	80025dc <__libc_init_array+0xc>
 80025fe:	00b3      	lsls	r3, r6, #2
 8002600:	58eb      	ldr	r3, [r5, r3]
 8002602:	4798      	blx	r3
 8002604:	3601      	adds	r6, #1
 8002606:	e7f2      	b.n	80025ee <__libc_init_array+0x1e>
 8002608:	08003160 	.word	0x08003160
 800260c:	08003160 	.word	0x08003160
 8002610:	08003160 	.word	0x08003160
 8002614:	08003164 	.word	0x08003164

08002618 <memset>:
 8002618:	0003      	movs	r3, r0
 800261a:	1882      	adds	r2, r0, r2
 800261c:	4293      	cmp	r3, r2
 800261e:	d100      	bne.n	8002622 <memset+0xa>
 8002620:	4770      	bx	lr
 8002622:	7019      	strb	r1, [r3, #0]
 8002624:	3301      	adds	r3, #1
 8002626:	e7f9      	b.n	800261c <memset+0x4>

08002628 <_puts_r>:
 8002628:	b570      	push	{r4, r5, r6, lr}
 800262a:	0005      	movs	r5, r0
 800262c:	000e      	movs	r6, r1
 800262e:	2800      	cmp	r0, #0
 8002630:	d004      	beq.n	800263c <_puts_r+0x14>
 8002632:	6983      	ldr	r3, [r0, #24]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <_puts_r+0x14>
 8002638:	f000 fa6e 	bl	8002b18 <__sinit>
 800263c:	69ab      	ldr	r3, [r5, #24]
 800263e:	68ac      	ldr	r4, [r5, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d102      	bne.n	800264a <_puts_r+0x22>
 8002644:	0028      	movs	r0, r5
 8002646:	f000 fa67 	bl	8002b18 <__sinit>
 800264a:	4b2d      	ldr	r3, [pc, #180]	; (8002700 <_puts_r+0xd8>)
 800264c:	429c      	cmp	r4, r3
 800264e:	d122      	bne.n	8002696 <_puts_r+0x6e>
 8002650:	686c      	ldr	r4, [r5, #4]
 8002652:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002654:	07db      	lsls	r3, r3, #31
 8002656:	d405      	bmi.n	8002664 <_puts_r+0x3c>
 8002658:	89a3      	ldrh	r3, [r4, #12]
 800265a:	059b      	lsls	r3, r3, #22
 800265c:	d402      	bmi.n	8002664 <_puts_r+0x3c>
 800265e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002660:	f000 fafb 	bl	8002c5a <__retarget_lock_acquire_recursive>
 8002664:	89a3      	ldrh	r3, [r4, #12]
 8002666:	071b      	lsls	r3, r3, #28
 8002668:	d502      	bpl.n	8002670 <_puts_r+0x48>
 800266a:	6923      	ldr	r3, [r4, #16]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d129      	bne.n	80026c4 <_puts_r+0x9c>
 8002670:	0021      	movs	r1, r4
 8002672:	0028      	movs	r0, r5
 8002674:	f000 f8aa 	bl	80027cc <__swsetup_r>
 8002678:	2800      	cmp	r0, #0
 800267a:	d023      	beq.n	80026c4 <_puts_r+0x9c>
 800267c:	2501      	movs	r5, #1
 800267e:	426d      	negs	r5, r5
 8002680:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002682:	07db      	lsls	r3, r3, #31
 8002684:	d405      	bmi.n	8002692 <_puts_r+0x6a>
 8002686:	89a3      	ldrh	r3, [r4, #12]
 8002688:	059b      	lsls	r3, r3, #22
 800268a:	d402      	bmi.n	8002692 <_puts_r+0x6a>
 800268c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800268e:	f000 fae5 	bl	8002c5c <__retarget_lock_release_recursive>
 8002692:	0028      	movs	r0, r5
 8002694:	bd70      	pop	{r4, r5, r6, pc}
 8002696:	4b1b      	ldr	r3, [pc, #108]	; (8002704 <_puts_r+0xdc>)
 8002698:	429c      	cmp	r4, r3
 800269a:	d101      	bne.n	80026a0 <_puts_r+0x78>
 800269c:	68ac      	ldr	r4, [r5, #8]
 800269e:	e7d8      	b.n	8002652 <_puts_r+0x2a>
 80026a0:	4b19      	ldr	r3, [pc, #100]	; (8002708 <_puts_r+0xe0>)
 80026a2:	429c      	cmp	r4, r3
 80026a4:	d1d5      	bne.n	8002652 <_puts_r+0x2a>
 80026a6:	68ec      	ldr	r4, [r5, #12]
 80026a8:	e7d3      	b.n	8002652 <_puts_r+0x2a>
 80026aa:	3601      	adds	r6, #1
 80026ac:	60a3      	str	r3, [r4, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	da04      	bge.n	80026bc <_puts_r+0x94>
 80026b2:	69a2      	ldr	r2, [r4, #24]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	dc16      	bgt.n	80026e6 <_puts_r+0xbe>
 80026b8:	290a      	cmp	r1, #10
 80026ba:	d014      	beq.n	80026e6 <_puts_r+0xbe>
 80026bc:	6823      	ldr	r3, [r4, #0]
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	6022      	str	r2, [r4, #0]
 80026c2:	7019      	strb	r1, [r3, #0]
 80026c4:	68a3      	ldr	r3, [r4, #8]
 80026c6:	7831      	ldrb	r1, [r6, #0]
 80026c8:	3b01      	subs	r3, #1
 80026ca:	2900      	cmp	r1, #0
 80026cc:	d1ed      	bne.n	80026aa <_puts_r+0x82>
 80026ce:	60a3      	str	r3, [r4, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	da0f      	bge.n	80026f4 <_puts_r+0xcc>
 80026d4:	0028      	movs	r0, r5
 80026d6:	0022      	movs	r2, r4
 80026d8:	310a      	adds	r1, #10
 80026da:	f000 f821 	bl	8002720 <__swbuf_r>
 80026de:	250a      	movs	r5, #10
 80026e0:	1c43      	adds	r3, r0, #1
 80026e2:	d1cd      	bne.n	8002680 <_puts_r+0x58>
 80026e4:	e7ca      	b.n	800267c <_puts_r+0x54>
 80026e6:	0022      	movs	r2, r4
 80026e8:	0028      	movs	r0, r5
 80026ea:	f000 f819 	bl	8002720 <__swbuf_r>
 80026ee:	1c43      	adds	r3, r0, #1
 80026f0:	d1e8      	bne.n	80026c4 <_puts_r+0x9c>
 80026f2:	e7c3      	b.n	800267c <_puts_r+0x54>
 80026f4:	250a      	movs	r5, #10
 80026f6:	6823      	ldr	r3, [r4, #0]
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	6022      	str	r2, [r4, #0]
 80026fc:	701d      	strb	r5, [r3, #0]
 80026fe:	e7bf      	b.n	8002680 <_puts_r+0x58>
 8002700:	08003120 	.word	0x08003120
 8002704:	08003140 	.word	0x08003140
 8002708:	08003100 	.word	0x08003100

0800270c <puts>:
 800270c:	b510      	push	{r4, lr}
 800270e:	4b03      	ldr	r3, [pc, #12]	; (800271c <puts+0x10>)
 8002710:	0001      	movs	r1, r0
 8002712:	6818      	ldr	r0, [r3, #0]
 8002714:	f7ff ff88 	bl	8002628 <_puts_r>
 8002718:	bd10      	pop	{r4, pc}
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	200000cc 	.word	0x200000cc

08002720 <__swbuf_r>:
 8002720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002722:	0005      	movs	r5, r0
 8002724:	000e      	movs	r6, r1
 8002726:	0014      	movs	r4, r2
 8002728:	2800      	cmp	r0, #0
 800272a:	d004      	beq.n	8002736 <__swbuf_r+0x16>
 800272c:	6983      	ldr	r3, [r0, #24]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <__swbuf_r+0x16>
 8002732:	f000 f9f1 	bl	8002b18 <__sinit>
 8002736:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <__swbuf_r+0xa0>)
 8002738:	429c      	cmp	r4, r3
 800273a:	d12e      	bne.n	800279a <__swbuf_r+0x7a>
 800273c:	686c      	ldr	r4, [r5, #4]
 800273e:	69a3      	ldr	r3, [r4, #24]
 8002740:	60a3      	str	r3, [r4, #8]
 8002742:	89a3      	ldrh	r3, [r4, #12]
 8002744:	071b      	lsls	r3, r3, #28
 8002746:	d532      	bpl.n	80027ae <__swbuf_r+0x8e>
 8002748:	6923      	ldr	r3, [r4, #16]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d02f      	beq.n	80027ae <__swbuf_r+0x8e>
 800274e:	6823      	ldr	r3, [r4, #0]
 8002750:	6922      	ldr	r2, [r4, #16]
 8002752:	b2f7      	uxtb	r7, r6
 8002754:	1a98      	subs	r0, r3, r2
 8002756:	6963      	ldr	r3, [r4, #20]
 8002758:	b2f6      	uxtb	r6, r6
 800275a:	4283      	cmp	r3, r0
 800275c:	dc05      	bgt.n	800276a <__swbuf_r+0x4a>
 800275e:	0021      	movs	r1, r4
 8002760:	0028      	movs	r0, r5
 8002762:	f000 f937 	bl	80029d4 <_fflush_r>
 8002766:	2800      	cmp	r0, #0
 8002768:	d127      	bne.n	80027ba <__swbuf_r+0x9a>
 800276a:	68a3      	ldr	r3, [r4, #8]
 800276c:	3001      	adds	r0, #1
 800276e:	3b01      	subs	r3, #1
 8002770:	60a3      	str	r3, [r4, #8]
 8002772:	6823      	ldr	r3, [r4, #0]
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	6022      	str	r2, [r4, #0]
 8002778:	701f      	strb	r7, [r3, #0]
 800277a:	6963      	ldr	r3, [r4, #20]
 800277c:	4283      	cmp	r3, r0
 800277e:	d004      	beq.n	800278a <__swbuf_r+0x6a>
 8002780:	89a3      	ldrh	r3, [r4, #12]
 8002782:	07db      	lsls	r3, r3, #31
 8002784:	d507      	bpl.n	8002796 <__swbuf_r+0x76>
 8002786:	2e0a      	cmp	r6, #10
 8002788:	d105      	bne.n	8002796 <__swbuf_r+0x76>
 800278a:	0021      	movs	r1, r4
 800278c:	0028      	movs	r0, r5
 800278e:	f000 f921 	bl	80029d4 <_fflush_r>
 8002792:	2800      	cmp	r0, #0
 8002794:	d111      	bne.n	80027ba <__swbuf_r+0x9a>
 8002796:	0030      	movs	r0, r6
 8002798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800279a:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <__swbuf_r+0xa4>)
 800279c:	429c      	cmp	r4, r3
 800279e:	d101      	bne.n	80027a4 <__swbuf_r+0x84>
 80027a0:	68ac      	ldr	r4, [r5, #8]
 80027a2:	e7cc      	b.n	800273e <__swbuf_r+0x1e>
 80027a4:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <__swbuf_r+0xa8>)
 80027a6:	429c      	cmp	r4, r3
 80027a8:	d1c9      	bne.n	800273e <__swbuf_r+0x1e>
 80027aa:	68ec      	ldr	r4, [r5, #12]
 80027ac:	e7c7      	b.n	800273e <__swbuf_r+0x1e>
 80027ae:	0021      	movs	r1, r4
 80027b0:	0028      	movs	r0, r5
 80027b2:	f000 f80b 	bl	80027cc <__swsetup_r>
 80027b6:	2800      	cmp	r0, #0
 80027b8:	d0c9      	beq.n	800274e <__swbuf_r+0x2e>
 80027ba:	2601      	movs	r6, #1
 80027bc:	4276      	negs	r6, r6
 80027be:	e7ea      	b.n	8002796 <__swbuf_r+0x76>
 80027c0:	08003120 	.word	0x08003120
 80027c4:	08003140 	.word	0x08003140
 80027c8:	08003100 	.word	0x08003100

080027cc <__swsetup_r>:
 80027cc:	4b37      	ldr	r3, [pc, #220]	; (80028ac <__swsetup_r+0xe0>)
 80027ce:	b570      	push	{r4, r5, r6, lr}
 80027d0:	681d      	ldr	r5, [r3, #0]
 80027d2:	0006      	movs	r6, r0
 80027d4:	000c      	movs	r4, r1
 80027d6:	2d00      	cmp	r5, #0
 80027d8:	d005      	beq.n	80027e6 <__swsetup_r+0x1a>
 80027da:	69ab      	ldr	r3, [r5, #24]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d102      	bne.n	80027e6 <__swsetup_r+0x1a>
 80027e0:	0028      	movs	r0, r5
 80027e2:	f000 f999 	bl	8002b18 <__sinit>
 80027e6:	4b32      	ldr	r3, [pc, #200]	; (80028b0 <__swsetup_r+0xe4>)
 80027e8:	429c      	cmp	r4, r3
 80027ea:	d10f      	bne.n	800280c <__swsetup_r+0x40>
 80027ec:	686c      	ldr	r4, [r5, #4]
 80027ee:	230c      	movs	r3, #12
 80027f0:	5ee2      	ldrsh	r2, [r4, r3]
 80027f2:	b293      	uxth	r3, r2
 80027f4:	0711      	lsls	r1, r2, #28
 80027f6:	d42d      	bmi.n	8002854 <__swsetup_r+0x88>
 80027f8:	06d9      	lsls	r1, r3, #27
 80027fa:	d411      	bmi.n	8002820 <__swsetup_r+0x54>
 80027fc:	2309      	movs	r3, #9
 80027fe:	2001      	movs	r0, #1
 8002800:	6033      	str	r3, [r6, #0]
 8002802:	3337      	adds	r3, #55	; 0x37
 8002804:	4313      	orrs	r3, r2
 8002806:	81a3      	strh	r3, [r4, #12]
 8002808:	4240      	negs	r0, r0
 800280a:	bd70      	pop	{r4, r5, r6, pc}
 800280c:	4b29      	ldr	r3, [pc, #164]	; (80028b4 <__swsetup_r+0xe8>)
 800280e:	429c      	cmp	r4, r3
 8002810:	d101      	bne.n	8002816 <__swsetup_r+0x4a>
 8002812:	68ac      	ldr	r4, [r5, #8]
 8002814:	e7eb      	b.n	80027ee <__swsetup_r+0x22>
 8002816:	4b28      	ldr	r3, [pc, #160]	; (80028b8 <__swsetup_r+0xec>)
 8002818:	429c      	cmp	r4, r3
 800281a:	d1e8      	bne.n	80027ee <__swsetup_r+0x22>
 800281c:	68ec      	ldr	r4, [r5, #12]
 800281e:	e7e6      	b.n	80027ee <__swsetup_r+0x22>
 8002820:	075b      	lsls	r3, r3, #29
 8002822:	d513      	bpl.n	800284c <__swsetup_r+0x80>
 8002824:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002826:	2900      	cmp	r1, #0
 8002828:	d008      	beq.n	800283c <__swsetup_r+0x70>
 800282a:	0023      	movs	r3, r4
 800282c:	3344      	adds	r3, #68	; 0x44
 800282e:	4299      	cmp	r1, r3
 8002830:	d002      	beq.n	8002838 <__swsetup_r+0x6c>
 8002832:	0030      	movs	r0, r6
 8002834:	f000 fa80 	bl	8002d38 <_free_r>
 8002838:	2300      	movs	r3, #0
 800283a:	6363      	str	r3, [r4, #52]	; 0x34
 800283c:	2224      	movs	r2, #36	; 0x24
 800283e:	89a3      	ldrh	r3, [r4, #12]
 8002840:	4393      	bics	r3, r2
 8002842:	81a3      	strh	r3, [r4, #12]
 8002844:	2300      	movs	r3, #0
 8002846:	6063      	str	r3, [r4, #4]
 8002848:	6923      	ldr	r3, [r4, #16]
 800284a:	6023      	str	r3, [r4, #0]
 800284c:	2308      	movs	r3, #8
 800284e:	89a2      	ldrh	r2, [r4, #12]
 8002850:	4313      	orrs	r3, r2
 8002852:	81a3      	strh	r3, [r4, #12]
 8002854:	6923      	ldr	r3, [r4, #16]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10b      	bne.n	8002872 <__swsetup_r+0xa6>
 800285a:	21a0      	movs	r1, #160	; 0xa0
 800285c:	2280      	movs	r2, #128	; 0x80
 800285e:	89a3      	ldrh	r3, [r4, #12]
 8002860:	0089      	lsls	r1, r1, #2
 8002862:	0092      	lsls	r2, r2, #2
 8002864:	400b      	ands	r3, r1
 8002866:	4293      	cmp	r3, r2
 8002868:	d003      	beq.n	8002872 <__swsetup_r+0xa6>
 800286a:	0021      	movs	r1, r4
 800286c:	0030      	movs	r0, r6
 800286e:	f000 fa1f 	bl	8002cb0 <__smakebuf_r>
 8002872:	220c      	movs	r2, #12
 8002874:	5ea3      	ldrsh	r3, [r4, r2]
 8002876:	2001      	movs	r0, #1
 8002878:	001a      	movs	r2, r3
 800287a:	b299      	uxth	r1, r3
 800287c:	4002      	ands	r2, r0
 800287e:	4203      	tst	r3, r0
 8002880:	d00f      	beq.n	80028a2 <__swsetup_r+0xd6>
 8002882:	2200      	movs	r2, #0
 8002884:	60a2      	str	r2, [r4, #8]
 8002886:	6962      	ldr	r2, [r4, #20]
 8002888:	4252      	negs	r2, r2
 800288a:	61a2      	str	r2, [r4, #24]
 800288c:	2000      	movs	r0, #0
 800288e:	6922      	ldr	r2, [r4, #16]
 8002890:	4282      	cmp	r2, r0
 8002892:	d1ba      	bne.n	800280a <__swsetup_r+0x3e>
 8002894:	060a      	lsls	r2, r1, #24
 8002896:	d5b8      	bpl.n	800280a <__swsetup_r+0x3e>
 8002898:	2240      	movs	r2, #64	; 0x40
 800289a:	4313      	orrs	r3, r2
 800289c:	81a3      	strh	r3, [r4, #12]
 800289e:	3801      	subs	r0, #1
 80028a0:	e7b3      	b.n	800280a <__swsetup_r+0x3e>
 80028a2:	0788      	lsls	r0, r1, #30
 80028a4:	d400      	bmi.n	80028a8 <__swsetup_r+0xdc>
 80028a6:	6962      	ldr	r2, [r4, #20]
 80028a8:	60a2      	str	r2, [r4, #8]
 80028aa:	e7ef      	b.n	800288c <__swsetup_r+0xc0>
 80028ac:	200000cc 	.word	0x200000cc
 80028b0:	08003120 	.word	0x08003120
 80028b4:	08003140 	.word	0x08003140
 80028b8:	08003100 	.word	0x08003100

080028bc <__sflush_r>:
 80028bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028be:	898b      	ldrh	r3, [r1, #12]
 80028c0:	0005      	movs	r5, r0
 80028c2:	000c      	movs	r4, r1
 80028c4:	071a      	lsls	r2, r3, #28
 80028c6:	d45f      	bmi.n	8002988 <__sflush_r+0xcc>
 80028c8:	684a      	ldr	r2, [r1, #4]
 80028ca:	2a00      	cmp	r2, #0
 80028cc:	dc04      	bgt.n	80028d8 <__sflush_r+0x1c>
 80028ce:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80028d0:	2a00      	cmp	r2, #0
 80028d2:	dc01      	bgt.n	80028d8 <__sflush_r+0x1c>
 80028d4:	2000      	movs	r0, #0
 80028d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80028d8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80028da:	2f00      	cmp	r7, #0
 80028dc:	d0fa      	beq.n	80028d4 <__sflush_r+0x18>
 80028de:	2200      	movs	r2, #0
 80028e0:	2180      	movs	r1, #128	; 0x80
 80028e2:	682e      	ldr	r6, [r5, #0]
 80028e4:	602a      	str	r2, [r5, #0]
 80028e6:	001a      	movs	r2, r3
 80028e8:	0149      	lsls	r1, r1, #5
 80028ea:	400a      	ands	r2, r1
 80028ec:	420b      	tst	r3, r1
 80028ee:	d034      	beq.n	800295a <__sflush_r+0x9e>
 80028f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80028f2:	89a3      	ldrh	r3, [r4, #12]
 80028f4:	075b      	lsls	r3, r3, #29
 80028f6:	d506      	bpl.n	8002906 <__sflush_r+0x4a>
 80028f8:	6863      	ldr	r3, [r4, #4]
 80028fa:	1ac0      	subs	r0, r0, r3
 80028fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <__sflush_r+0x4a>
 8002902:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002904:	1ac0      	subs	r0, r0, r3
 8002906:	0002      	movs	r2, r0
 8002908:	6a21      	ldr	r1, [r4, #32]
 800290a:	2300      	movs	r3, #0
 800290c:	0028      	movs	r0, r5
 800290e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002910:	47b8      	blx	r7
 8002912:	89a1      	ldrh	r1, [r4, #12]
 8002914:	1c43      	adds	r3, r0, #1
 8002916:	d106      	bne.n	8002926 <__sflush_r+0x6a>
 8002918:	682b      	ldr	r3, [r5, #0]
 800291a:	2b1d      	cmp	r3, #29
 800291c:	d831      	bhi.n	8002982 <__sflush_r+0xc6>
 800291e:	4a2c      	ldr	r2, [pc, #176]	; (80029d0 <__sflush_r+0x114>)
 8002920:	40da      	lsrs	r2, r3
 8002922:	07d3      	lsls	r3, r2, #31
 8002924:	d52d      	bpl.n	8002982 <__sflush_r+0xc6>
 8002926:	2300      	movs	r3, #0
 8002928:	6063      	str	r3, [r4, #4]
 800292a:	6923      	ldr	r3, [r4, #16]
 800292c:	6023      	str	r3, [r4, #0]
 800292e:	04cb      	lsls	r3, r1, #19
 8002930:	d505      	bpl.n	800293e <__sflush_r+0x82>
 8002932:	1c43      	adds	r3, r0, #1
 8002934:	d102      	bne.n	800293c <__sflush_r+0x80>
 8002936:	682b      	ldr	r3, [r5, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d100      	bne.n	800293e <__sflush_r+0x82>
 800293c:	6560      	str	r0, [r4, #84]	; 0x54
 800293e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002940:	602e      	str	r6, [r5, #0]
 8002942:	2900      	cmp	r1, #0
 8002944:	d0c6      	beq.n	80028d4 <__sflush_r+0x18>
 8002946:	0023      	movs	r3, r4
 8002948:	3344      	adds	r3, #68	; 0x44
 800294a:	4299      	cmp	r1, r3
 800294c:	d002      	beq.n	8002954 <__sflush_r+0x98>
 800294e:	0028      	movs	r0, r5
 8002950:	f000 f9f2 	bl	8002d38 <_free_r>
 8002954:	2000      	movs	r0, #0
 8002956:	6360      	str	r0, [r4, #52]	; 0x34
 8002958:	e7bd      	b.n	80028d6 <__sflush_r+0x1a>
 800295a:	2301      	movs	r3, #1
 800295c:	0028      	movs	r0, r5
 800295e:	6a21      	ldr	r1, [r4, #32]
 8002960:	47b8      	blx	r7
 8002962:	1c43      	adds	r3, r0, #1
 8002964:	d1c5      	bne.n	80028f2 <__sflush_r+0x36>
 8002966:	682b      	ldr	r3, [r5, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0c2      	beq.n	80028f2 <__sflush_r+0x36>
 800296c:	2b1d      	cmp	r3, #29
 800296e:	d001      	beq.n	8002974 <__sflush_r+0xb8>
 8002970:	2b16      	cmp	r3, #22
 8002972:	d101      	bne.n	8002978 <__sflush_r+0xbc>
 8002974:	602e      	str	r6, [r5, #0]
 8002976:	e7ad      	b.n	80028d4 <__sflush_r+0x18>
 8002978:	2340      	movs	r3, #64	; 0x40
 800297a:	89a2      	ldrh	r2, [r4, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	81a3      	strh	r3, [r4, #12]
 8002980:	e7a9      	b.n	80028d6 <__sflush_r+0x1a>
 8002982:	2340      	movs	r3, #64	; 0x40
 8002984:	430b      	orrs	r3, r1
 8002986:	e7fa      	b.n	800297e <__sflush_r+0xc2>
 8002988:	690f      	ldr	r7, [r1, #16]
 800298a:	2f00      	cmp	r7, #0
 800298c:	d0a2      	beq.n	80028d4 <__sflush_r+0x18>
 800298e:	680a      	ldr	r2, [r1, #0]
 8002990:	600f      	str	r7, [r1, #0]
 8002992:	1bd2      	subs	r2, r2, r7
 8002994:	9201      	str	r2, [sp, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	079b      	lsls	r3, r3, #30
 800299a:	d100      	bne.n	800299e <__sflush_r+0xe2>
 800299c:	694a      	ldr	r2, [r1, #20]
 800299e:	60a2      	str	r2, [r4, #8]
 80029a0:	9b01      	ldr	r3, [sp, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	dc00      	bgt.n	80029a8 <__sflush_r+0xec>
 80029a6:	e795      	b.n	80028d4 <__sflush_r+0x18>
 80029a8:	003a      	movs	r2, r7
 80029aa:	0028      	movs	r0, r5
 80029ac:	9b01      	ldr	r3, [sp, #4]
 80029ae:	6a21      	ldr	r1, [r4, #32]
 80029b0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80029b2:	47b0      	blx	r6
 80029b4:	2800      	cmp	r0, #0
 80029b6:	dc06      	bgt.n	80029c6 <__sflush_r+0x10a>
 80029b8:	2340      	movs	r3, #64	; 0x40
 80029ba:	2001      	movs	r0, #1
 80029bc:	89a2      	ldrh	r2, [r4, #12]
 80029be:	4240      	negs	r0, r0
 80029c0:	4313      	orrs	r3, r2
 80029c2:	81a3      	strh	r3, [r4, #12]
 80029c4:	e787      	b.n	80028d6 <__sflush_r+0x1a>
 80029c6:	9b01      	ldr	r3, [sp, #4]
 80029c8:	183f      	adds	r7, r7, r0
 80029ca:	1a1b      	subs	r3, r3, r0
 80029cc:	9301      	str	r3, [sp, #4]
 80029ce:	e7e7      	b.n	80029a0 <__sflush_r+0xe4>
 80029d0:	20400001 	.word	0x20400001

080029d4 <_fflush_r>:
 80029d4:	690b      	ldr	r3, [r1, #16]
 80029d6:	b570      	push	{r4, r5, r6, lr}
 80029d8:	0005      	movs	r5, r0
 80029da:	000c      	movs	r4, r1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d102      	bne.n	80029e6 <_fflush_r+0x12>
 80029e0:	2500      	movs	r5, #0
 80029e2:	0028      	movs	r0, r5
 80029e4:	bd70      	pop	{r4, r5, r6, pc}
 80029e6:	2800      	cmp	r0, #0
 80029e8:	d004      	beq.n	80029f4 <_fflush_r+0x20>
 80029ea:	6983      	ldr	r3, [r0, #24]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <_fflush_r+0x20>
 80029f0:	f000 f892 	bl	8002b18 <__sinit>
 80029f4:	4b14      	ldr	r3, [pc, #80]	; (8002a48 <_fflush_r+0x74>)
 80029f6:	429c      	cmp	r4, r3
 80029f8:	d11b      	bne.n	8002a32 <_fflush_r+0x5e>
 80029fa:	686c      	ldr	r4, [r5, #4]
 80029fc:	220c      	movs	r2, #12
 80029fe:	5ea3      	ldrsh	r3, [r4, r2]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0ed      	beq.n	80029e0 <_fflush_r+0xc>
 8002a04:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002a06:	07d2      	lsls	r2, r2, #31
 8002a08:	d404      	bmi.n	8002a14 <_fflush_r+0x40>
 8002a0a:	059b      	lsls	r3, r3, #22
 8002a0c:	d402      	bmi.n	8002a14 <_fflush_r+0x40>
 8002a0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a10:	f000 f923 	bl	8002c5a <__retarget_lock_acquire_recursive>
 8002a14:	0028      	movs	r0, r5
 8002a16:	0021      	movs	r1, r4
 8002a18:	f7ff ff50 	bl	80028bc <__sflush_r>
 8002a1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a1e:	0005      	movs	r5, r0
 8002a20:	07db      	lsls	r3, r3, #31
 8002a22:	d4de      	bmi.n	80029e2 <_fflush_r+0xe>
 8002a24:	89a3      	ldrh	r3, [r4, #12]
 8002a26:	059b      	lsls	r3, r3, #22
 8002a28:	d4db      	bmi.n	80029e2 <_fflush_r+0xe>
 8002a2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a2c:	f000 f916 	bl	8002c5c <__retarget_lock_release_recursive>
 8002a30:	e7d7      	b.n	80029e2 <_fflush_r+0xe>
 8002a32:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <_fflush_r+0x78>)
 8002a34:	429c      	cmp	r4, r3
 8002a36:	d101      	bne.n	8002a3c <_fflush_r+0x68>
 8002a38:	68ac      	ldr	r4, [r5, #8]
 8002a3a:	e7df      	b.n	80029fc <_fflush_r+0x28>
 8002a3c:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <_fflush_r+0x7c>)
 8002a3e:	429c      	cmp	r4, r3
 8002a40:	d1dc      	bne.n	80029fc <_fflush_r+0x28>
 8002a42:	68ec      	ldr	r4, [r5, #12]
 8002a44:	e7da      	b.n	80029fc <_fflush_r+0x28>
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	08003120 	.word	0x08003120
 8002a4c:	08003140 	.word	0x08003140
 8002a50:	08003100 	.word	0x08003100

08002a54 <std>:
 8002a54:	2300      	movs	r3, #0
 8002a56:	b510      	push	{r4, lr}
 8002a58:	0004      	movs	r4, r0
 8002a5a:	6003      	str	r3, [r0, #0]
 8002a5c:	6043      	str	r3, [r0, #4]
 8002a5e:	6083      	str	r3, [r0, #8]
 8002a60:	8181      	strh	r1, [r0, #12]
 8002a62:	6643      	str	r3, [r0, #100]	; 0x64
 8002a64:	0019      	movs	r1, r3
 8002a66:	81c2      	strh	r2, [r0, #14]
 8002a68:	6103      	str	r3, [r0, #16]
 8002a6a:	6143      	str	r3, [r0, #20]
 8002a6c:	6183      	str	r3, [r0, #24]
 8002a6e:	2208      	movs	r2, #8
 8002a70:	305c      	adds	r0, #92	; 0x5c
 8002a72:	f7ff fdd1 	bl	8002618 <memset>
 8002a76:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <std+0x38>)
 8002a78:	6263      	str	r3, [r4, #36]	; 0x24
 8002a7a:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <std+0x3c>)
 8002a7c:	6224      	str	r4, [r4, #32]
 8002a7e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a80:	4b04      	ldr	r3, [pc, #16]	; (8002a94 <std+0x40>)
 8002a82:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a84:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <std+0x44>)
 8002a86:	6323      	str	r3, [r4, #48]	; 0x30
 8002a88:	bd10      	pop	{r4, pc}
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	08002ead 	.word	0x08002ead
 8002a90:	08002ed5 	.word	0x08002ed5
 8002a94:	08002f0d 	.word	0x08002f0d
 8002a98:	08002f39 	.word	0x08002f39

08002a9c <_cleanup_r>:
 8002a9c:	b510      	push	{r4, lr}
 8002a9e:	4902      	ldr	r1, [pc, #8]	; (8002aa8 <_cleanup_r+0xc>)
 8002aa0:	f000 f8ba 	bl	8002c18 <_fwalk_reent>
 8002aa4:	bd10      	pop	{r4, pc}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	080029d5 	.word	0x080029d5

08002aac <__sfmoreglue>:
 8002aac:	b570      	push	{r4, r5, r6, lr}
 8002aae:	2568      	movs	r5, #104	; 0x68
 8002ab0:	1e4a      	subs	r2, r1, #1
 8002ab2:	4355      	muls	r5, r2
 8002ab4:	000e      	movs	r6, r1
 8002ab6:	0029      	movs	r1, r5
 8002ab8:	3174      	adds	r1, #116	; 0x74
 8002aba:	f000 f987 	bl	8002dcc <_malloc_r>
 8002abe:	1e04      	subs	r4, r0, #0
 8002ac0:	d008      	beq.n	8002ad4 <__sfmoreglue+0x28>
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	002a      	movs	r2, r5
 8002ac6:	6001      	str	r1, [r0, #0]
 8002ac8:	6046      	str	r6, [r0, #4]
 8002aca:	300c      	adds	r0, #12
 8002acc:	60a0      	str	r0, [r4, #8]
 8002ace:	3268      	adds	r2, #104	; 0x68
 8002ad0:	f7ff fda2 	bl	8002618 <memset>
 8002ad4:	0020      	movs	r0, r4
 8002ad6:	bd70      	pop	{r4, r5, r6, pc}

08002ad8 <__sfp_lock_acquire>:
 8002ad8:	b510      	push	{r4, lr}
 8002ada:	4802      	ldr	r0, [pc, #8]	; (8002ae4 <__sfp_lock_acquire+0xc>)
 8002adc:	f000 f8bd 	bl	8002c5a <__retarget_lock_acquire_recursive>
 8002ae0:	bd10      	pop	{r4, pc}
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	20000294 	.word	0x20000294

08002ae8 <__sfp_lock_release>:
 8002ae8:	b510      	push	{r4, lr}
 8002aea:	4802      	ldr	r0, [pc, #8]	; (8002af4 <__sfp_lock_release+0xc>)
 8002aec:	f000 f8b6 	bl	8002c5c <__retarget_lock_release_recursive>
 8002af0:	bd10      	pop	{r4, pc}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	20000294 	.word	0x20000294

08002af8 <__sinit_lock_acquire>:
 8002af8:	b510      	push	{r4, lr}
 8002afa:	4802      	ldr	r0, [pc, #8]	; (8002b04 <__sinit_lock_acquire+0xc>)
 8002afc:	f000 f8ad 	bl	8002c5a <__retarget_lock_acquire_recursive>
 8002b00:	bd10      	pop	{r4, pc}
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	2000028f 	.word	0x2000028f

08002b08 <__sinit_lock_release>:
 8002b08:	b510      	push	{r4, lr}
 8002b0a:	4802      	ldr	r0, [pc, #8]	; (8002b14 <__sinit_lock_release+0xc>)
 8002b0c:	f000 f8a6 	bl	8002c5c <__retarget_lock_release_recursive>
 8002b10:	bd10      	pop	{r4, pc}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	2000028f 	.word	0x2000028f

08002b18 <__sinit>:
 8002b18:	b513      	push	{r0, r1, r4, lr}
 8002b1a:	0004      	movs	r4, r0
 8002b1c:	f7ff ffec 	bl	8002af8 <__sinit_lock_acquire>
 8002b20:	69a3      	ldr	r3, [r4, #24]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <__sinit+0x14>
 8002b26:	f7ff ffef 	bl	8002b08 <__sinit_lock_release>
 8002b2a:	bd13      	pop	{r0, r1, r4, pc}
 8002b2c:	64a3      	str	r3, [r4, #72]	; 0x48
 8002b2e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002b30:	6523      	str	r3, [r4, #80]	; 0x50
 8002b32:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <__sinit+0x68>)
 8002b34:	4a13      	ldr	r2, [pc, #76]	; (8002b84 <__sinit+0x6c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	62a2      	str	r2, [r4, #40]	; 0x28
 8002b3a:	9301      	str	r3, [sp, #4]
 8002b3c:	42a3      	cmp	r3, r4
 8002b3e:	d101      	bne.n	8002b44 <__sinit+0x2c>
 8002b40:	2301      	movs	r3, #1
 8002b42:	61a3      	str	r3, [r4, #24]
 8002b44:	0020      	movs	r0, r4
 8002b46:	f000 f81f 	bl	8002b88 <__sfp>
 8002b4a:	6060      	str	r0, [r4, #4]
 8002b4c:	0020      	movs	r0, r4
 8002b4e:	f000 f81b 	bl	8002b88 <__sfp>
 8002b52:	60a0      	str	r0, [r4, #8]
 8002b54:	0020      	movs	r0, r4
 8002b56:	f000 f817 	bl	8002b88 <__sfp>
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2104      	movs	r1, #4
 8002b5e:	60e0      	str	r0, [r4, #12]
 8002b60:	6860      	ldr	r0, [r4, #4]
 8002b62:	f7ff ff77 	bl	8002a54 <std>
 8002b66:	2201      	movs	r2, #1
 8002b68:	2109      	movs	r1, #9
 8002b6a:	68a0      	ldr	r0, [r4, #8]
 8002b6c:	f7ff ff72 	bl	8002a54 <std>
 8002b70:	2202      	movs	r2, #2
 8002b72:	2112      	movs	r1, #18
 8002b74:	68e0      	ldr	r0, [r4, #12]
 8002b76:	f7ff ff6d 	bl	8002a54 <std>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	61a3      	str	r3, [r4, #24]
 8002b7e:	e7d2      	b.n	8002b26 <__sinit+0xe>
 8002b80:	080030fc 	.word	0x080030fc
 8002b84:	08002a9d 	.word	0x08002a9d

08002b88 <__sfp>:
 8002b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8a:	0007      	movs	r7, r0
 8002b8c:	f7ff ffa4 	bl	8002ad8 <__sfp_lock_acquire>
 8002b90:	4b1f      	ldr	r3, [pc, #124]	; (8002c10 <__sfp+0x88>)
 8002b92:	681e      	ldr	r6, [r3, #0]
 8002b94:	69b3      	ldr	r3, [r6, #24]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d102      	bne.n	8002ba0 <__sfp+0x18>
 8002b9a:	0030      	movs	r0, r6
 8002b9c:	f7ff ffbc 	bl	8002b18 <__sinit>
 8002ba0:	3648      	adds	r6, #72	; 0x48
 8002ba2:	68b4      	ldr	r4, [r6, #8]
 8002ba4:	6873      	ldr	r3, [r6, #4]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	d504      	bpl.n	8002bb4 <__sfp+0x2c>
 8002baa:	6833      	ldr	r3, [r6, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d022      	beq.n	8002bf6 <__sfp+0x6e>
 8002bb0:	6836      	ldr	r6, [r6, #0]
 8002bb2:	e7f6      	b.n	8002ba2 <__sfp+0x1a>
 8002bb4:	220c      	movs	r2, #12
 8002bb6:	5ea5      	ldrsh	r5, [r4, r2]
 8002bb8:	2d00      	cmp	r5, #0
 8002bba:	d11a      	bne.n	8002bf2 <__sfp+0x6a>
 8002bbc:	0020      	movs	r0, r4
 8002bbe:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <__sfp+0x8c>)
 8002bc0:	3058      	adds	r0, #88	; 0x58
 8002bc2:	60e3      	str	r3, [r4, #12]
 8002bc4:	6665      	str	r5, [r4, #100]	; 0x64
 8002bc6:	f000 f847 	bl	8002c58 <__retarget_lock_init_recursive>
 8002bca:	f7ff ff8d 	bl	8002ae8 <__sfp_lock_release>
 8002bce:	0020      	movs	r0, r4
 8002bd0:	2208      	movs	r2, #8
 8002bd2:	0029      	movs	r1, r5
 8002bd4:	6025      	str	r5, [r4, #0]
 8002bd6:	60a5      	str	r5, [r4, #8]
 8002bd8:	6065      	str	r5, [r4, #4]
 8002bda:	6125      	str	r5, [r4, #16]
 8002bdc:	6165      	str	r5, [r4, #20]
 8002bde:	61a5      	str	r5, [r4, #24]
 8002be0:	305c      	adds	r0, #92	; 0x5c
 8002be2:	f7ff fd19 	bl	8002618 <memset>
 8002be6:	6365      	str	r5, [r4, #52]	; 0x34
 8002be8:	63a5      	str	r5, [r4, #56]	; 0x38
 8002bea:	64a5      	str	r5, [r4, #72]	; 0x48
 8002bec:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002bee:	0020      	movs	r0, r4
 8002bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bf2:	3468      	adds	r4, #104	; 0x68
 8002bf4:	e7d7      	b.n	8002ba6 <__sfp+0x1e>
 8002bf6:	2104      	movs	r1, #4
 8002bf8:	0038      	movs	r0, r7
 8002bfa:	f7ff ff57 	bl	8002aac <__sfmoreglue>
 8002bfe:	1e04      	subs	r4, r0, #0
 8002c00:	6030      	str	r0, [r6, #0]
 8002c02:	d1d5      	bne.n	8002bb0 <__sfp+0x28>
 8002c04:	f7ff ff70 	bl	8002ae8 <__sfp_lock_release>
 8002c08:	230c      	movs	r3, #12
 8002c0a:	603b      	str	r3, [r7, #0]
 8002c0c:	e7ef      	b.n	8002bee <__sfp+0x66>
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	080030fc 	.word	0x080030fc
 8002c14:	ffff0001 	.word	0xffff0001

08002c18 <_fwalk_reent>:
 8002c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c1a:	0004      	movs	r4, r0
 8002c1c:	0006      	movs	r6, r0
 8002c1e:	2700      	movs	r7, #0
 8002c20:	9101      	str	r1, [sp, #4]
 8002c22:	3448      	adds	r4, #72	; 0x48
 8002c24:	6863      	ldr	r3, [r4, #4]
 8002c26:	68a5      	ldr	r5, [r4, #8]
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	9b00      	ldr	r3, [sp, #0]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	d504      	bpl.n	8002c3c <_fwalk_reent+0x24>
 8002c32:	6824      	ldr	r4, [r4, #0]
 8002c34:	2c00      	cmp	r4, #0
 8002c36:	d1f5      	bne.n	8002c24 <_fwalk_reent+0xc>
 8002c38:	0038      	movs	r0, r7
 8002c3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002c3c:	89ab      	ldrh	r3, [r5, #12]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d908      	bls.n	8002c54 <_fwalk_reent+0x3c>
 8002c42:	220e      	movs	r2, #14
 8002c44:	5eab      	ldrsh	r3, [r5, r2]
 8002c46:	3301      	adds	r3, #1
 8002c48:	d004      	beq.n	8002c54 <_fwalk_reent+0x3c>
 8002c4a:	0029      	movs	r1, r5
 8002c4c:	0030      	movs	r0, r6
 8002c4e:	9b01      	ldr	r3, [sp, #4]
 8002c50:	4798      	blx	r3
 8002c52:	4307      	orrs	r7, r0
 8002c54:	3568      	adds	r5, #104	; 0x68
 8002c56:	e7e8      	b.n	8002c2a <_fwalk_reent+0x12>

08002c58 <__retarget_lock_init_recursive>:
 8002c58:	4770      	bx	lr

08002c5a <__retarget_lock_acquire_recursive>:
 8002c5a:	4770      	bx	lr

08002c5c <__retarget_lock_release_recursive>:
 8002c5c:	4770      	bx	lr
	...

08002c60 <__swhatbuf_r>:
 8002c60:	b570      	push	{r4, r5, r6, lr}
 8002c62:	000e      	movs	r6, r1
 8002c64:	001d      	movs	r5, r3
 8002c66:	230e      	movs	r3, #14
 8002c68:	5ec9      	ldrsh	r1, [r1, r3]
 8002c6a:	0014      	movs	r4, r2
 8002c6c:	b096      	sub	sp, #88	; 0x58
 8002c6e:	2900      	cmp	r1, #0
 8002c70:	da07      	bge.n	8002c82 <__swhatbuf_r+0x22>
 8002c72:	2300      	movs	r3, #0
 8002c74:	602b      	str	r3, [r5, #0]
 8002c76:	89b3      	ldrh	r3, [r6, #12]
 8002c78:	061b      	lsls	r3, r3, #24
 8002c7a:	d411      	bmi.n	8002ca0 <__swhatbuf_r+0x40>
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	e00f      	b.n	8002ca2 <__swhatbuf_r+0x42>
 8002c82:	466a      	mov	r2, sp
 8002c84:	f000 f984 	bl	8002f90 <_fstat_r>
 8002c88:	2800      	cmp	r0, #0
 8002c8a:	dbf2      	blt.n	8002c72 <__swhatbuf_r+0x12>
 8002c8c:	23f0      	movs	r3, #240	; 0xf0
 8002c8e:	9901      	ldr	r1, [sp, #4]
 8002c90:	021b      	lsls	r3, r3, #8
 8002c92:	4019      	ands	r1, r3
 8002c94:	4b05      	ldr	r3, [pc, #20]	; (8002cac <__swhatbuf_r+0x4c>)
 8002c96:	18c9      	adds	r1, r1, r3
 8002c98:	424b      	negs	r3, r1
 8002c9a:	4159      	adcs	r1, r3
 8002c9c:	6029      	str	r1, [r5, #0]
 8002c9e:	e7ed      	b.n	8002c7c <__swhatbuf_r+0x1c>
 8002ca0:	2340      	movs	r3, #64	; 0x40
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	6023      	str	r3, [r4, #0]
 8002ca6:	b016      	add	sp, #88	; 0x58
 8002ca8:	bd70      	pop	{r4, r5, r6, pc}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	ffffe000 	.word	0xffffe000

08002cb0 <__smakebuf_r>:
 8002cb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002cb2:	2602      	movs	r6, #2
 8002cb4:	898b      	ldrh	r3, [r1, #12]
 8002cb6:	0005      	movs	r5, r0
 8002cb8:	000c      	movs	r4, r1
 8002cba:	4233      	tst	r3, r6
 8002cbc:	d006      	beq.n	8002ccc <__smakebuf_r+0x1c>
 8002cbe:	0023      	movs	r3, r4
 8002cc0:	3347      	adds	r3, #71	; 0x47
 8002cc2:	6023      	str	r3, [r4, #0]
 8002cc4:	6123      	str	r3, [r4, #16]
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	6163      	str	r3, [r4, #20]
 8002cca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002ccc:	466a      	mov	r2, sp
 8002cce:	ab01      	add	r3, sp, #4
 8002cd0:	f7ff ffc6 	bl	8002c60 <__swhatbuf_r>
 8002cd4:	9900      	ldr	r1, [sp, #0]
 8002cd6:	0007      	movs	r7, r0
 8002cd8:	0028      	movs	r0, r5
 8002cda:	f000 f877 	bl	8002dcc <_malloc_r>
 8002cde:	2800      	cmp	r0, #0
 8002ce0:	d108      	bne.n	8002cf4 <__smakebuf_r+0x44>
 8002ce2:	220c      	movs	r2, #12
 8002ce4:	5ea3      	ldrsh	r3, [r4, r2]
 8002ce6:	059a      	lsls	r2, r3, #22
 8002ce8:	d4ef      	bmi.n	8002cca <__smakebuf_r+0x1a>
 8002cea:	2203      	movs	r2, #3
 8002cec:	4393      	bics	r3, r2
 8002cee:	431e      	orrs	r6, r3
 8002cf0:	81a6      	strh	r6, [r4, #12]
 8002cf2:	e7e4      	b.n	8002cbe <__smakebuf_r+0xe>
 8002cf4:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <__smakebuf_r+0x84>)
 8002cf6:	62ab      	str	r3, [r5, #40]	; 0x28
 8002cf8:	2380      	movs	r3, #128	; 0x80
 8002cfa:	89a2      	ldrh	r2, [r4, #12]
 8002cfc:	6020      	str	r0, [r4, #0]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	81a3      	strh	r3, [r4, #12]
 8002d02:	9b00      	ldr	r3, [sp, #0]
 8002d04:	6120      	str	r0, [r4, #16]
 8002d06:	6163      	str	r3, [r4, #20]
 8002d08:	9b01      	ldr	r3, [sp, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00d      	beq.n	8002d2a <__smakebuf_r+0x7a>
 8002d0e:	0028      	movs	r0, r5
 8002d10:	230e      	movs	r3, #14
 8002d12:	5ee1      	ldrsh	r1, [r4, r3]
 8002d14:	f000 f94e 	bl	8002fb4 <_isatty_r>
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	d006      	beq.n	8002d2a <__smakebuf_r+0x7a>
 8002d1c:	2203      	movs	r2, #3
 8002d1e:	89a3      	ldrh	r3, [r4, #12]
 8002d20:	4393      	bics	r3, r2
 8002d22:	001a      	movs	r2, r3
 8002d24:	2301      	movs	r3, #1
 8002d26:	4313      	orrs	r3, r2
 8002d28:	81a3      	strh	r3, [r4, #12]
 8002d2a:	89a0      	ldrh	r0, [r4, #12]
 8002d2c:	4307      	orrs	r7, r0
 8002d2e:	81a7      	strh	r7, [r4, #12]
 8002d30:	e7cb      	b.n	8002cca <__smakebuf_r+0x1a>
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	08002a9d 	.word	0x08002a9d

08002d38 <_free_r>:
 8002d38:	b570      	push	{r4, r5, r6, lr}
 8002d3a:	0005      	movs	r5, r0
 8002d3c:	2900      	cmp	r1, #0
 8002d3e:	d010      	beq.n	8002d62 <_free_r+0x2a>
 8002d40:	1f0c      	subs	r4, r1, #4
 8002d42:	6823      	ldr	r3, [r4, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	da00      	bge.n	8002d4a <_free_r+0x12>
 8002d48:	18e4      	adds	r4, r4, r3
 8002d4a:	0028      	movs	r0, r5
 8002d4c:	f000 f958 	bl	8003000 <__malloc_lock>
 8002d50:	4a1d      	ldr	r2, [pc, #116]	; (8002dc8 <_free_r+0x90>)
 8002d52:	6813      	ldr	r3, [r2, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d105      	bne.n	8002d64 <_free_r+0x2c>
 8002d58:	6063      	str	r3, [r4, #4]
 8002d5a:	6014      	str	r4, [r2, #0]
 8002d5c:	0028      	movs	r0, r5
 8002d5e:	f000 f957 	bl	8003010 <__malloc_unlock>
 8002d62:	bd70      	pop	{r4, r5, r6, pc}
 8002d64:	42a3      	cmp	r3, r4
 8002d66:	d908      	bls.n	8002d7a <_free_r+0x42>
 8002d68:	6821      	ldr	r1, [r4, #0]
 8002d6a:	1860      	adds	r0, r4, r1
 8002d6c:	4283      	cmp	r3, r0
 8002d6e:	d1f3      	bne.n	8002d58 <_free_r+0x20>
 8002d70:	6818      	ldr	r0, [r3, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	1841      	adds	r1, r0, r1
 8002d76:	6021      	str	r1, [r4, #0]
 8002d78:	e7ee      	b.n	8002d58 <_free_r+0x20>
 8002d7a:	001a      	movs	r2, r3
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <_free_r+0x4e>
 8002d82:	42a3      	cmp	r3, r4
 8002d84:	d9f9      	bls.n	8002d7a <_free_r+0x42>
 8002d86:	6811      	ldr	r1, [r2, #0]
 8002d88:	1850      	adds	r0, r2, r1
 8002d8a:	42a0      	cmp	r0, r4
 8002d8c:	d10b      	bne.n	8002da6 <_free_r+0x6e>
 8002d8e:	6820      	ldr	r0, [r4, #0]
 8002d90:	1809      	adds	r1, r1, r0
 8002d92:	1850      	adds	r0, r2, r1
 8002d94:	6011      	str	r1, [r2, #0]
 8002d96:	4283      	cmp	r3, r0
 8002d98:	d1e0      	bne.n	8002d5c <_free_r+0x24>
 8002d9a:	6818      	ldr	r0, [r3, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	1841      	adds	r1, r0, r1
 8002da0:	6011      	str	r1, [r2, #0]
 8002da2:	6053      	str	r3, [r2, #4]
 8002da4:	e7da      	b.n	8002d5c <_free_r+0x24>
 8002da6:	42a0      	cmp	r0, r4
 8002da8:	d902      	bls.n	8002db0 <_free_r+0x78>
 8002daa:	230c      	movs	r3, #12
 8002dac:	602b      	str	r3, [r5, #0]
 8002dae:	e7d5      	b.n	8002d5c <_free_r+0x24>
 8002db0:	6821      	ldr	r1, [r4, #0]
 8002db2:	1860      	adds	r0, r4, r1
 8002db4:	4283      	cmp	r3, r0
 8002db6:	d103      	bne.n	8002dc0 <_free_r+0x88>
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	1841      	adds	r1, r0, r1
 8002dbe:	6021      	str	r1, [r4, #0]
 8002dc0:	6063      	str	r3, [r4, #4]
 8002dc2:	6054      	str	r4, [r2, #4]
 8002dc4:	e7ca      	b.n	8002d5c <_free_r+0x24>
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	20000150 	.word	0x20000150

08002dcc <_malloc_r>:
 8002dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dce:	2303      	movs	r3, #3
 8002dd0:	1ccd      	adds	r5, r1, #3
 8002dd2:	439d      	bics	r5, r3
 8002dd4:	3508      	adds	r5, #8
 8002dd6:	0006      	movs	r6, r0
 8002dd8:	2d0c      	cmp	r5, #12
 8002dda:	d21f      	bcs.n	8002e1c <_malloc_r+0x50>
 8002ddc:	250c      	movs	r5, #12
 8002dde:	42a9      	cmp	r1, r5
 8002de0:	d81e      	bhi.n	8002e20 <_malloc_r+0x54>
 8002de2:	0030      	movs	r0, r6
 8002de4:	f000 f90c 	bl	8003000 <__malloc_lock>
 8002de8:	4925      	ldr	r1, [pc, #148]	; (8002e80 <_malloc_r+0xb4>)
 8002dea:	680a      	ldr	r2, [r1, #0]
 8002dec:	0014      	movs	r4, r2
 8002dee:	2c00      	cmp	r4, #0
 8002df0:	d11a      	bne.n	8002e28 <_malloc_r+0x5c>
 8002df2:	4f24      	ldr	r7, [pc, #144]	; (8002e84 <_malloc_r+0xb8>)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d104      	bne.n	8002e04 <_malloc_r+0x38>
 8002dfa:	0021      	movs	r1, r4
 8002dfc:	0030      	movs	r0, r6
 8002dfe:	f000 f843 	bl	8002e88 <_sbrk_r>
 8002e02:	6038      	str	r0, [r7, #0]
 8002e04:	0029      	movs	r1, r5
 8002e06:	0030      	movs	r0, r6
 8002e08:	f000 f83e 	bl	8002e88 <_sbrk_r>
 8002e0c:	1c43      	adds	r3, r0, #1
 8002e0e:	d12b      	bne.n	8002e68 <_malloc_r+0x9c>
 8002e10:	230c      	movs	r3, #12
 8002e12:	0030      	movs	r0, r6
 8002e14:	6033      	str	r3, [r6, #0]
 8002e16:	f000 f8fb 	bl	8003010 <__malloc_unlock>
 8002e1a:	e003      	b.n	8002e24 <_malloc_r+0x58>
 8002e1c:	2d00      	cmp	r5, #0
 8002e1e:	dade      	bge.n	8002dde <_malloc_r+0x12>
 8002e20:	230c      	movs	r3, #12
 8002e22:	6033      	str	r3, [r6, #0]
 8002e24:	2000      	movs	r0, #0
 8002e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e28:	6823      	ldr	r3, [r4, #0]
 8002e2a:	1b5b      	subs	r3, r3, r5
 8002e2c:	d419      	bmi.n	8002e62 <_malloc_r+0x96>
 8002e2e:	2b0b      	cmp	r3, #11
 8002e30:	d903      	bls.n	8002e3a <_malloc_r+0x6e>
 8002e32:	6023      	str	r3, [r4, #0]
 8002e34:	18e4      	adds	r4, r4, r3
 8002e36:	6025      	str	r5, [r4, #0]
 8002e38:	e003      	b.n	8002e42 <_malloc_r+0x76>
 8002e3a:	6863      	ldr	r3, [r4, #4]
 8002e3c:	42a2      	cmp	r2, r4
 8002e3e:	d10e      	bne.n	8002e5e <_malloc_r+0x92>
 8002e40:	600b      	str	r3, [r1, #0]
 8002e42:	0030      	movs	r0, r6
 8002e44:	f000 f8e4 	bl	8003010 <__malloc_unlock>
 8002e48:	0020      	movs	r0, r4
 8002e4a:	2207      	movs	r2, #7
 8002e4c:	300b      	adds	r0, #11
 8002e4e:	1d23      	adds	r3, r4, #4
 8002e50:	4390      	bics	r0, r2
 8002e52:	1ac2      	subs	r2, r0, r3
 8002e54:	4298      	cmp	r0, r3
 8002e56:	d0e6      	beq.n	8002e26 <_malloc_r+0x5a>
 8002e58:	1a1b      	subs	r3, r3, r0
 8002e5a:	50a3      	str	r3, [r4, r2]
 8002e5c:	e7e3      	b.n	8002e26 <_malloc_r+0x5a>
 8002e5e:	6053      	str	r3, [r2, #4]
 8002e60:	e7ef      	b.n	8002e42 <_malloc_r+0x76>
 8002e62:	0022      	movs	r2, r4
 8002e64:	6864      	ldr	r4, [r4, #4]
 8002e66:	e7c2      	b.n	8002dee <_malloc_r+0x22>
 8002e68:	2303      	movs	r3, #3
 8002e6a:	1cc4      	adds	r4, r0, #3
 8002e6c:	439c      	bics	r4, r3
 8002e6e:	42a0      	cmp	r0, r4
 8002e70:	d0e1      	beq.n	8002e36 <_malloc_r+0x6a>
 8002e72:	1a21      	subs	r1, r4, r0
 8002e74:	0030      	movs	r0, r6
 8002e76:	f000 f807 	bl	8002e88 <_sbrk_r>
 8002e7a:	1c43      	adds	r3, r0, #1
 8002e7c:	d1db      	bne.n	8002e36 <_malloc_r+0x6a>
 8002e7e:	e7c7      	b.n	8002e10 <_malloc_r+0x44>
 8002e80:	20000150 	.word	0x20000150
 8002e84:	20000154 	.word	0x20000154

08002e88 <_sbrk_r>:
 8002e88:	2300      	movs	r3, #0
 8002e8a:	b570      	push	{r4, r5, r6, lr}
 8002e8c:	4d06      	ldr	r5, [pc, #24]	; (8002ea8 <_sbrk_r+0x20>)
 8002e8e:	0004      	movs	r4, r0
 8002e90:	0008      	movs	r0, r1
 8002e92:	602b      	str	r3, [r5, #0]
 8002e94:	f7fd fcc8 	bl	8000828 <_sbrk>
 8002e98:	1c43      	adds	r3, r0, #1
 8002e9a:	d103      	bne.n	8002ea4 <_sbrk_r+0x1c>
 8002e9c:	682b      	ldr	r3, [r5, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d000      	beq.n	8002ea4 <_sbrk_r+0x1c>
 8002ea2:	6023      	str	r3, [r4, #0]
 8002ea4:	bd70      	pop	{r4, r5, r6, pc}
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	20000298 	.word	0x20000298

08002eac <__sread>:
 8002eac:	b570      	push	{r4, r5, r6, lr}
 8002eae:	000c      	movs	r4, r1
 8002eb0:	250e      	movs	r5, #14
 8002eb2:	5f49      	ldrsh	r1, [r1, r5]
 8002eb4:	f000 f8b4 	bl	8003020 <_read_r>
 8002eb8:	2800      	cmp	r0, #0
 8002eba:	db03      	blt.n	8002ec4 <__sread+0x18>
 8002ebc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ebe:	181b      	adds	r3, r3, r0
 8002ec0:	6563      	str	r3, [r4, #84]	; 0x54
 8002ec2:	bd70      	pop	{r4, r5, r6, pc}
 8002ec4:	89a3      	ldrh	r3, [r4, #12]
 8002ec6:	4a02      	ldr	r2, [pc, #8]	; (8002ed0 <__sread+0x24>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	81a3      	strh	r3, [r4, #12]
 8002ecc:	e7f9      	b.n	8002ec2 <__sread+0x16>
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	ffffefff 	.word	0xffffefff

08002ed4 <__swrite>:
 8002ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed6:	001f      	movs	r7, r3
 8002ed8:	898b      	ldrh	r3, [r1, #12]
 8002eda:	0005      	movs	r5, r0
 8002edc:	000c      	movs	r4, r1
 8002ede:	0016      	movs	r6, r2
 8002ee0:	05db      	lsls	r3, r3, #23
 8002ee2:	d505      	bpl.n	8002ef0 <__swrite+0x1c>
 8002ee4:	230e      	movs	r3, #14
 8002ee6:	5ec9      	ldrsh	r1, [r1, r3]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2302      	movs	r3, #2
 8002eec:	f000 f874 	bl	8002fd8 <_lseek_r>
 8002ef0:	89a3      	ldrh	r3, [r4, #12]
 8002ef2:	4a05      	ldr	r2, [pc, #20]	; (8002f08 <__swrite+0x34>)
 8002ef4:	0028      	movs	r0, r5
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	81a3      	strh	r3, [r4, #12]
 8002efa:	0032      	movs	r2, r6
 8002efc:	230e      	movs	r3, #14
 8002efe:	5ee1      	ldrsh	r1, [r4, r3]
 8002f00:	003b      	movs	r3, r7
 8002f02:	f000 f81f 	bl	8002f44 <_write_r>
 8002f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f08:	ffffefff 	.word	0xffffefff

08002f0c <__sseek>:
 8002f0c:	b570      	push	{r4, r5, r6, lr}
 8002f0e:	000c      	movs	r4, r1
 8002f10:	250e      	movs	r5, #14
 8002f12:	5f49      	ldrsh	r1, [r1, r5]
 8002f14:	f000 f860 	bl	8002fd8 <_lseek_r>
 8002f18:	89a3      	ldrh	r3, [r4, #12]
 8002f1a:	1c42      	adds	r2, r0, #1
 8002f1c:	d103      	bne.n	8002f26 <__sseek+0x1a>
 8002f1e:	4a05      	ldr	r2, [pc, #20]	; (8002f34 <__sseek+0x28>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	81a3      	strh	r3, [r4, #12]
 8002f24:	bd70      	pop	{r4, r5, r6, pc}
 8002f26:	2280      	movs	r2, #128	; 0x80
 8002f28:	0152      	lsls	r2, r2, #5
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	81a3      	strh	r3, [r4, #12]
 8002f2e:	6560      	str	r0, [r4, #84]	; 0x54
 8002f30:	e7f8      	b.n	8002f24 <__sseek+0x18>
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	ffffefff 	.word	0xffffefff

08002f38 <__sclose>:
 8002f38:	b510      	push	{r4, lr}
 8002f3a:	230e      	movs	r3, #14
 8002f3c:	5ec9      	ldrsh	r1, [r1, r3]
 8002f3e:	f000 f815 	bl	8002f6c <_close_r>
 8002f42:	bd10      	pop	{r4, pc}

08002f44 <_write_r>:
 8002f44:	b570      	push	{r4, r5, r6, lr}
 8002f46:	0004      	movs	r4, r0
 8002f48:	0008      	movs	r0, r1
 8002f4a:	0011      	movs	r1, r2
 8002f4c:	001a      	movs	r2, r3
 8002f4e:	2300      	movs	r3, #0
 8002f50:	4d05      	ldr	r5, [pc, #20]	; (8002f68 <_write_r+0x24>)
 8002f52:	602b      	str	r3, [r5, #0]
 8002f54:	f7fd f9c2 	bl	80002dc <_write>
 8002f58:	1c43      	adds	r3, r0, #1
 8002f5a:	d103      	bne.n	8002f64 <_write_r+0x20>
 8002f5c:	682b      	ldr	r3, [r5, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d000      	beq.n	8002f64 <_write_r+0x20>
 8002f62:	6023      	str	r3, [r4, #0]
 8002f64:	bd70      	pop	{r4, r5, r6, pc}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	20000298 	.word	0x20000298

08002f6c <_close_r>:
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	b570      	push	{r4, r5, r6, lr}
 8002f70:	4d06      	ldr	r5, [pc, #24]	; (8002f8c <_close_r+0x20>)
 8002f72:	0004      	movs	r4, r0
 8002f74:	0008      	movs	r0, r1
 8002f76:	602b      	str	r3, [r5, #0]
 8002f78:	f7fd fc2a 	bl	80007d0 <_close>
 8002f7c:	1c43      	adds	r3, r0, #1
 8002f7e:	d103      	bne.n	8002f88 <_close_r+0x1c>
 8002f80:	682b      	ldr	r3, [r5, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d000      	beq.n	8002f88 <_close_r+0x1c>
 8002f86:	6023      	str	r3, [r4, #0]
 8002f88:	bd70      	pop	{r4, r5, r6, pc}
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	20000298 	.word	0x20000298

08002f90 <_fstat_r>:
 8002f90:	2300      	movs	r3, #0
 8002f92:	b570      	push	{r4, r5, r6, lr}
 8002f94:	4d06      	ldr	r5, [pc, #24]	; (8002fb0 <_fstat_r+0x20>)
 8002f96:	0004      	movs	r4, r0
 8002f98:	0008      	movs	r0, r1
 8002f9a:	0011      	movs	r1, r2
 8002f9c:	602b      	str	r3, [r5, #0]
 8002f9e:	f7fd fc21 	bl	80007e4 <_fstat>
 8002fa2:	1c43      	adds	r3, r0, #1
 8002fa4:	d103      	bne.n	8002fae <_fstat_r+0x1e>
 8002fa6:	682b      	ldr	r3, [r5, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d000      	beq.n	8002fae <_fstat_r+0x1e>
 8002fac:	6023      	str	r3, [r4, #0]
 8002fae:	bd70      	pop	{r4, r5, r6, pc}
 8002fb0:	20000298 	.word	0x20000298

08002fb4 <_isatty_r>:
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	b570      	push	{r4, r5, r6, lr}
 8002fb8:	4d06      	ldr	r5, [pc, #24]	; (8002fd4 <_isatty_r+0x20>)
 8002fba:	0004      	movs	r4, r0
 8002fbc:	0008      	movs	r0, r1
 8002fbe:	602b      	str	r3, [r5, #0]
 8002fc0:	f7fd fc1e 	bl	8000800 <_isatty>
 8002fc4:	1c43      	adds	r3, r0, #1
 8002fc6:	d103      	bne.n	8002fd0 <_isatty_r+0x1c>
 8002fc8:	682b      	ldr	r3, [r5, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d000      	beq.n	8002fd0 <_isatty_r+0x1c>
 8002fce:	6023      	str	r3, [r4, #0]
 8002fd0:	bd70      	pop	{r4, r5, r6, pc}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	20000298 	.word	0x20000298

08002fd8 <_lseek_r>:
 8002fd8:	b570      	push	{r4, r5, r6, lr}
 8002fda:	0004      	movs	r4, r0
 8002fdc:	0008      	movs	r0, r1
 8002fde:	0011      	movs	r1, r2
 8002fe0:	001a      	movs	r2, r3
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	4d05      	ldr	r5, [pc, #20]	; (8002ffc <_lseek_r+0x24>)
 8002fe6:	602b      	str	r3, [r5, #0]
 8002fe8:	f7fd fc13 	bl	8000812 <_lseek>
 8002fec:	1c43      	adds	r3, r0, #1
 8002fee:	d103      	bne.n	8002ff8 <_lseek_r+0x20>
 8002ff0:	682b      	ldr	r3, [r5, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d000      	beq.n	8002ff8 <_lseek_r+0x20>
 8002ff6:	6023      	str	r3, [r4, #0]
 8002ff8:	bd70      	pop	{r4, r5, r6, pc}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	20000298 	.word	0x20000298

08003000 <__malloc_lock>:
 8003000:	b510      	push	{r4, lr}
 8003002:	4802      	ldr	r0, [pc, #8]	; (800300c <__malloc_lock+0xc>)
 8003004:	f7ff fe29 	bl	8002c5a <__retarget_lock_acquire_recursive>
 8003008:	bd10      	pop	{r4, pc}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	20000290 	.word	0x20000290

08003010 <__malloc_unlock>:
 8003010:	b510      	push	{r4, lr}
 8003012:	4802      	ldr	r0, [pc, #8]	; (800301c <__malloc_unlock+0xc>)
 8003014:	f7ff fe22 	bl	8002c5c <__retarget_lock_release_recursive>
 8003018:	bd10      	pop	{r4, pc}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	20000290 	.word	0x20000290

08003020 <_read_r>:
 8003020:	b570      	push	{r4, r5, r6, lr}
 8003022:	0004      	movs	r4, r0
 8003024:	0008      	movs	r0, r1
 8003026:	0011      	movs	r1, r2
 8003028:	001a      	movs	r2, r3
 800302a:	2300      	movs	r3, #0
 800302c:	4d05      	ldr	r5, [pc, #20]	; (8003044 <_read_r+0x24>)
 800302e:	602b      	str	r3, [r5, #0]
 8003030:	f7fd fbb1 	bl	8000796 <_read>
 8003034:	1c43      	adds	r3, r0, #1
 8003036:	d103      	bne.n	8003040 <_read_r+0x20>
 8003038:	682b      	ldr	r3, [r5, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d000      	beq.n	8003040 <_read_r+0x20>
 800303e:	6023      	str	r3, [r4, #0]
 8003040:	bd70      	pop	{r4, r5, r6, pc}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	20000298 	.word	0x20000298

08003048 <_init>:
 8003048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800304e:	bc08      	pop	{r3}
 8003050:	469e      	mov	lr, r3
 8003052:	4770      	bx	lr

08003054 <_fini>:
 8003054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800305a:	bc08      	pop	{r3}
 800305c:	469e      	mov	lr, r3
 800305e:	4770      	bx	lr
